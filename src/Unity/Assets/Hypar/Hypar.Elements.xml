<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hypar.Elements</name>
    </assembly>
    <members>
        <member name="T:Elements.Beam">
            <summary>
            A structural framing element defined by a center line curve and a profile.
            </summary>
        </member>
        <member name="M:Elements.Beam.#ctor(Elements.Geometry.Interfaces.ICurve,Elements.Geometry.Profile,Elements.Material,System.Double,System.Double,Elements.Geometry.Transform)">
            <summary>
            Construct a beam.
            </summary>
            <param name="curve">The beam's center line.</param>
            <param name="profile">The beam's profile.</param>
            <param name="material">The beam's material.</param>
            <param name="startSetback">The setback of the beam's geometry at the start.</param>
            <param name="endSetback">The setback of the beam's geometry at the end.</param>
            <param name="transform">The beam's transform.</param>
        </member>
        <member name="T:Elements.BeamSystem">
            <summary>
            BeamSystem represents a collection of beams within a perimeter.
            </summary>
        </member>
        <member name="P:Elements.BeamSystem.Elements">
            <summary>
            The Beams that make up the BeamSystem.
            </summary>
        </member>
        <member name="M:Elements.BeamSystem.#ctor(System.Int32,Elements.Geometry.Profile,Elements.Geometry.Line,Elements.Geometry.Line,Elements.Material)">
            <summary>
            Construct a BeamSystem between two edges.
            </summary>
            <param name="count">The number of Beams to create.</param>
            <param name="profile">The Profile to be used for all Beams.</param>
            <param name="edge1">The first edge of the system.</param>
            <param name="edge2">The second edge of the system.</param>
            <param name="material">The Beam material.</param>
        </member>
        <member name="M:Elements.BeamSystem.#ctor(Elements.Floor,System.Int32,Elements.Geometry.Profile,Elements.Material)">
            <summary>
            Construct a beam system under a slab.
            </summary>
            <param name="floor">The Floor under which to create Beams.</param>
            <param name="count">The number of Beams to create.</param>
            <param name="profile">The Profile to be used for all Beams.</param>
            <param name="material">The Beam material.</param>
        </member>
        <member name="T:Elements.Brace">
            <summary>
            A Brace is a structural framing element which is often diagonal.
            </summary>
        </member>
        <member name="M:Elements.Brace.#ctor(Elements.Geometry.Interfaces.ICurve,Elements.Geometry.Profile,Elements.Material,System.Double,System.Double)">
            <summary>
            Construct a Brace.
            </summary>
            <param name="curve">The Brace's center line.</param>
            <param name="profile">The Brace's profile.</param>
            <param name="material">The Brace's material.</param>
            <param name="startSetback">The setback of the Brace's geometry at the start.</param>
            <param name="endSetback">The setback of the Brace's geometry at the end.</param>
            [JsonConstructor]
        </member>
        <member name="T:Elements.BuiltInMaterials">
            <summary>
            Built in materials.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Glass">
            <summary>
            Glass.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Steel">
            <summary>
            Steel.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Default">
            <summary>
            The default material.
            </summary>
        </member>
        <member name="F:Elements.BuiltInMaterials.Concrete">
            <summary>
            Concrete.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Mass">
            <summary>
            Default material used to represent masses.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Wood">
            <summary>
            Wood.
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Edges">
            <summary>
            Edges
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.EdgesHighlighted">
            <summary>
            Edges Highlighted
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.Void">
            <summary>
            Void
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.XAxis">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.YAxis">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="P:Elements.BuiltInMaterials.ZAxis">
            <summary>
            Z Axis
            </summary>
        </member>
        <member name="T:Elements.Column">
            <summary>
            A vertical structural framing element.
            </summary>
        </member>
        <member name="P:Elements.Column.Location">
            <summary>
            The location of the base of the column.
            </summary>
        </member>
        <member name="P:Elements.Column.Height">
            <summary>
            The height of the column.
            </summary>
        </member>
        <member name="M:Elements.Column.#ctor(Elements.Geometry.Vector3,System.Double,Elements.Geometry.Profile,Elements.Material,Elements.Geometry.Transform,System.Double,System.Double)">
            <summary>
            Construct a Column.
            </summary>
            <param name="location">The location of the base of the column.</param>
            <param name="height">The column's height.</param>
            <param name="profile">The column's profile.</param>
            <param name="material">The column's material.</param>
            <param name="transform">The column's transform.</param>
            <param name="startSetback">The setback of the column's extrusion from the base of the column.</param>
            <param name="endSetback">The setback of the column's extrusion from the top of the column.</param>
        </member>
        <member name="T:Elements.Element">
            <summary>
            Base class for all Elements.
            </summary>
        </member>
        <member name="P:Elements.Element.Id">
            <summary>
            The unique identifier of the Element.
            </summary>
        </member>
        <member name="P:Elements.Element.Type">
            <summary>
            The type of the element.
            Used during deserialization to disambiguate derived types.
            </summary>
        </member>
        <member name="P:Elements.Element.Properties">
            <summary>
            A map of Properties for the Element.
            </summary>
        </member>
        <member name="P:Elements.Element.Transform">
            <summary>
            The element's transform.
            </summary>
        </member>
        <member name="P:Elements.Element.Name">
            <summary>
            A human-readable name for the Element.
            </summary>
        </member>
        <member name="M:Elements.Element.#ctor">
            <summary>
            Construct a default Element.
            </summary>
        </member>
        <member name="M:Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)">
            <summary>
            Add a Property to the Element.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="property">The parameter to add.</param>
            <exception cref="T:System.Exception">Thrown when an parameter with the same name already exists.</exception>
        </member>
        <member name="M:Elements.Element.RemoveProperty(System.String)">
            <summary>
            Remove a Property from the Properties map.
            </summary>
            <param name="name">The name of the parameter to remove.</param>
            <exception cref="T:System.Exception">Thrown when the specified parameter cannot be found.</exception>
        </member>
        <member name="T:Elements.ElementOfType`1">
            <summary>
            Base class for all Elements which have an ElementType.
            </summary>
        </member>
        <member name="P:Elements.ElementOfType`1.ElementType">
            <summary>
            The ElementType of the Element.
            </summary>
        </member>
        <member name="T:Elements.ElementType">
            <summary>
            Base class for all ElementTypes
            </summary>
        </member>
        <member name="P:Elements.ElementType.Id">
            <summary>
            The unique identifier of an ElementType.
            </summary>
        </member>
        <member name="P:Elements.ElementType.Type">
            <summary>
            The type of the ElementType.
            Used during serialization.
            </summary>
        </member>
        <member name="P:Elements.ElementType.Name">
            <summary>
            The name of the ElementType.
            </summary>
        </member>
        <member name="P:Elements.ElementType.Description">
            <summary>
            A description of the ElementType.
            </summary>
        </member>
        <member name="M:Elements.ElementType.#ctor(System.String,System.String)">
            <summary>
            Construct an ElementType.
            </summary>
            <param name="name">A name.</param>
            <param name="description">A description.</param>
        </member>
        <member name="T:Elements.Floor">
            <summary>
            A floor is a horizontal element defined by a perimeter and one or several voids.
            </summary>
        </member>
        <member name="P:Elements.Floor.Elevation">
            <summary>
            The elevation from which the floor is extruded.
            </summary>
        </member>
        <member name="P:Elements.Floor.ElementType">
            <summary>
            The floor type of the floor.
            </summary>
        </member>
        <member name="P:Elements.Floor.Profile">
            <summary>
            The untransformed profile of the floor.
            </summary>
        </member>
        <member name="P:Elements.Floor.ProfileTransformed">
            <summary>
            The transformed profile of the floor.
            </summary>
        </member>
        <member name="P:Elements.Floor.Thickness">
            <summary>
            The thickness of the floor's extrusion.
            </summary>
        </member>
        <member name="P:Elements.Floor.Geometry">
            <summary>
            The floor's geometry.
            </summary>
        </member>
        <member name="P:Elements.Floor.Openings">
            <summary>
            The openings in the floor.
            </summary>
        </member>
        <member name="M:Elements.Floor.#ctor(Elements.Geometry.Profile,Elements.FloorType,System.Double,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Create a Floor.
            </summary>
            <param name="profile">The profile of the floor.</param>
            <param name="elementType">The floor type of the floor.</param>
            <param name="elevation">The elevation of the top of the floor.</param>
            <param name="material">The floor's material.</param>
            <param name="transform">The floor's transform.</param>
            <returns>A floor.</returns>
        </member>
        <member name="M:Elements.Floor.#ctor(Elements.Geometry.Polygon,Elements.FloorType,System.Double,Elements.Material,Elements.Geometry.Transform,Elements.Opening[])">
            <summary>
            Create a floor.
            </summary>
            <param name="profile">The profile of the floor.</param>
            <param name="elementType">The floor type of the floor.</param>
            <param name="elevation">The elevation of the top of the floor.</param>
            <param name="material">The floor's material.</param>
            <param name="transform">The floor's transform. If set, this will override the floor's elevation.</param>
            <param name="openings">An array of openings in the floor.</param>
        </member>
        <member name="M:Elements.Floor.#ctor(Elements.Geometry.Profile,Elements.Geometry.Transform,Elements.Geometry.Vector3,Elements.FloorType,System.Double,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Create a floor.
            </summary>
            <param name="profile">The profile of the floor.</param>
            <param name="start">A tranforms used to pre-transform the profile and direction vector before sweeping the geometry.</param>
            <param name="direction">The direction of the floor's sweep.</param>
            <param name="elementType">The floor type of the floor.</param>
            <param name="elevation">The elevation of the floor.</param>
            <param name="material">The floor's material.</param>
            <param name="transform">The floor's transform. If set, this will override the elevation.</param>
        </member>
        <member name="M:Elements.Floor.Area">
            <summary>
            The area of the floor.
            Overlapping openings and openings which are outside of the floor's perimeter,
            will result in incorrect area results.
            </summary>
            <returns>The area of the floor.</returns>
        </member>
        <member name="T:Elements.FloorType">
            <summary>
            A container for properties common to floors.
            </summary>
        </member>
        <member name="P:Elements.FloorType.Thickness">
            <summary>
            The thickness of the Floor.
            </summary>
        </member>
        <member name="P:Elements.FloorType.Type">
            <summary>
            The type of the floor type.
            </summary>
        </member>
        <member name="M:Elements.FloorType.#ctor(System.String,System.Double,System.String)">
            <summary>
            Construct a floor type.
            </summary>
            <param name="name">The name of the floor type.</param>
            <param name="thickness">The thickness of the associated floor.</param>
            <param name="description">A description of the floor type.</param>
        </member>
        <member name="T:Elements.Frame">
            <summary>
            An element defined by a perimeter and a cross section swept along that perimeter.
            </summary>
        </member>
        <member name="P:Elements.Frame.Perimeter">
            <summary>
            The perimeter of the frame.
            </summary>
        </member>
        <member name="P:Elements.Frame.Profile">
            <summary>
            The frame's profile.
            </summary>
        </member>
        <member name="P:Elements.Frame.Geometry">
            <summary>
            The frame's geometry.
            </summary>
            <value></value>
        </member>
        <member name="M:Elements.Frame.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Profile,System.Double,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Create a frame.
            </summary>
            <param name="perimeter">The frame's perimeter.</param>
            <param name="profile">The frame's profile.</param>
            <param name="offset">The amount which the perimeter will be offset internally.</param>
            <param name="material">The frame's material.</param>
            <param name="transform">The frame's transform.</param>
        </member>
        <member name="T:Elements.GeoJSON.Feature">
            <summary>
            A GeoJSON feature.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Feature.Type">
            <summary>
            The type of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.GeoJSON.Feature.Properties">
            <summary>
            All properties of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.GeoJSON.Feature.Geometry">
            <summary>
            The geometry of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.GeoJSON.Feature.BBox">
            <summary>
            The bounding box of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.Feature.#ctor(Elements.GeoJSON.Geometry,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Construct a feature.
            </summary>
            <param name="geometry"></param>
            <param name="properties"></param>
        </member>
        <member name="T:Elements.GeoJSON.FeatureCollection">
            <summary>
            A GeoJSON feature collection.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.FeatureCollection.Type">
            <summary>
            The type of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.GeoJSON.FeatureCollection.Features">
            <summary>
            A collection of features.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.FeatureCollection.#ctor(System.Collections.Generic.IEnumerable{Elements.GeoJSON.Feature})">
            <summary>
            Construct a feature collection.
            </summary>
            <param name="features">A collection of features.</param>
        </member>
        <member name="T:Elements.GeoJSON.Geometry">
            <summary>
            The base class for all GeoJSON geometry types.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Geometry.Type">
            <summary>
            The type of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.GeoJSON.Position">
            <summary>
            A GeoJSON position specified by longitude and latitude.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Position.Latitude">
            <summary>
            The latitude in decimal degrees.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.GeoJSON.Position.Longitude">
            <summary>
            The longitude in decimal degrees.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.Position.#ctor(System.Double,System.Double)">
            <summary>
            Construct a Position.
            </summary>
            <param name="lon"></param>
            <param name="lat"></param>
        </member>
        <member name="M:Elements.GeoJSON.Position.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.Position.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.Position.ToVectorMeters">
            <summary>
            Convert the position to a vector.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.GeoJSON.Point">
            <summary>
            A GeoJSON point.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Point.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.Point.#ctor(Elements.GeoJSON.Position)">
            <summary>
            Construct a Point.
            </summary>
            <param name="coordinates"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided coordinates are null.</exception>
        </member>
        <member name="T:Elements.GeoJSON.Line">
            <summary>
            A GeoJSON line.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Line.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.Line.#ctor(Elements.GeoJSON.Position[])">
             <summary>
             Construct a Line.
             </summary>
             <param name="coordinates"></param>
            <exception cref="T:System.ArgumentException">Thrown when the coordinates provides does not contain 2 items.</exception>
        </member>
        <member name="T:Elements.GeoJSON.MultiPoint">
            <summary>
            A GeoJSON multipoint.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.MultiPoint.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.MultiPoint.#ctor(Elements.GeoJSON.Position[])">
            <summary>
            Construct a MultiPoint.
            </summary>
            <param name="coordinates"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the coordinates provided contains 1 item or less.</exception>
        </member>
        <member name="T:Elements.GeoJSON.LineString">
            <summary>
            A GeoJSON linestring.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.LineString.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.LineString.#ctor(Elements.GeoJSON.Position[])">
            <summary>
            Construct a LineString.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Elements.GeoJSON.MultiLineString">
            <summary>
            A GeoJSON multi line string.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.MultiLineString.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.MultiLineString.#ctor(Elements.GeoJSON.Position[][])">
            <summary>
            Construct a MultiLineString.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Elements.GeoJSON.Polygon">
            <summary>
            A GeoJSON polygon.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.Polygon.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.Polygon.#ctor(Elements.GeoJSON.Position[][])">
            <summary>
            Construct a Polygon.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:Elements.GeoJSON.Polygon.ToPolygons">
            <summary>
            Convert the coordinate array to a collection of polylines.
            The last position of the polygon is dropped.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.GeoJSON.MultiPolygon">
            <summary>
            A GeoJSON multi polygon.
            </summary>
        </member>
        <member name="P:Elements.GeoJSON.MultiPolygon.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.MultiPolygon.#ctor(Elements.GeoJSON.Position[][])">
            <summary>
            Construct a MultiPolygon.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Elements.GeoJSON.GeometryCollection">
            <summary>
            A GeoJSON geometry collection.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.GeometryCollection.#ctor(Elements.GeoJSON.Geometry[])">
            <summary>
            Construct a geometry collection.
            </summary>
            <param name="geometries">An array of geometries.</param>
        </member>
        <member name="T:Elements.GeoJSON.MercatorProjection">
            <summary>
            Methods for computing geographic coordinates.
            </summary>
        </member>
        <member name="M:Elements.GeoJSON.MercatorProjection.toPixel(System.Double,System.Double)">
            <summary>
            Get the coordinates of the longitude and latitude.
            </summary>
            <param name="lon"></param>
            <param name="lat"></param>
            <returns>An array of doubles containing the x, and y coordintes, in meters.</returns>
        </member>
        <member name="M:Elements.GeoJSON.MercatorProjection.toGeoCoord(System.Double,System.Double)">
            <summary>
            Get the latitude and longitude of the specified x and y coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>An array of doubles containing the longitude and latitude in degrees.</returns>
        </member>
        <member name="M:Elements.GeoJSON.MercatorProjection.lonToX(System.Double)">
            <summary>
            Get the x coordinate, in meters, of the specified longitude.
            </summary>
            <param name="lon"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.MercatorProjection.latToY(System.Double)">
            <summary>
            Get the y coordinate, in meters, of the specified latitude.
            </summary>
            <param name="lat"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.GeoJSON.MercatorProjection.xToLon(System.Double)">
            <summary>
            Get the longitude of the specified x coordinate.
            </summary>
            <param name="x">The x coordinate.</param>
            <returns>The longitude in degrees.</returns>
        </member>
        <member name="M:Elements.GeoJSON.MercatorProjection.yToLat(System.Double)">
            <summary>
            Get the latitude of the specified y coordinate.
            </summary>
            <param name="y">The y coordinate.</param>
            <returns>The latitude in degrees.</returns>
        </member>
        <member name="T:Elements.Geometry.Arc">
            <summary>
            Arc represents an arc defined between a start angle and an end angle.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Arc.Type">
            <summary>
            The type of the curve.
            Used during deserialization to disambiguate derived types.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Arc.Plane">
            <summary>
            The plane of the arc.
            </summary>
            <value></value>
        </member>
        <member name="P:Elements.Geometry.Arc.StartAngle">
            <summary>
            The angle from 0.0, in degrees, at which the arc will start with respect to the positive X axis.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Arc.EndAngle">
            <summary>
            The angle from 0.0, in degrees, at which the arc will end with respect to the positive X axis.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Arc.Length">
            <summary>
            Calculate the length of the arc.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Arc.Start">
            <summary>
            The start point of the arc.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Arc.End">
            <summary>
            The end point of the arc.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Arc.Radius">
            <summary>
            The radius of the Arc.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Arc.#ctor(Elements.Geometry.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Create a plane.
            </summary>
            <param name="center">The center of the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The start angle of the arc in degrees.</param>
            <param name="endAngle">The end angle of the arc in degrees.</param>
        </member>
        <member name="M:Elements.Geometry.Arc.#ctor(Elements.Geometry.Plane,System.Double,System.Double,System.Double)">
            <summary>
            Create a plane.
            </summary>
            <param name="plane">The plane of the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The start angle of the arc in degrees.</param>
            <param name="endAngle">The end angle of the arc in degrees.</param>
        </member>
        <member name="M:Elements.Geometry.Arc.PointAt(System.Double)">
            <summary>
            Return the point at parameter u on the arc.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0.</param>
            <returns>A Vector3 representing the point along the arc.</returns>
        </member>
        <member name="M:Elements.Geometry.Arc.TransformAt(System.Double)">
            <summary>
            Return transform on the arc at parameter u.
            </summary>
            <param name="u">A parameter between 0.0 and 1.0 on the arc.</param>
            <returns>A transform with its origin at u along the curve and its Z axis tangent to the curve.</returns>
        </member>
        <member name="M:Elements.Geometry.Arc.Frames(System.Double,System.Double)">
            <summary>
            Get a collection of transforms which represent frames along the arc.
            </summary>
            <param name="startSetback">The offset from the start of the arc.</param>
            <param name="endSetback">The offset from the end of the arc.</param>
            <returns>A collection of transforms.</returns>
        </member>
        <member name="M:Elements.Geometry.Arc.Reversed">
            <summary>
            Get an arc which is the reverse of this Arc.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Arc.Bounds">
            <summary>
            Get a bounding box for this arc.
            </summary>
            <returns>A bounding box for this arc.</returns>
        </member>
        <member name="T:Elements.Geometry.BBox3">
            <summary>
            An axis-alignment bounding box.
            </summary>
        </member>
        <member name="P:Elements.Geometry.BBox3.Max">
            <summary>
            The maximum extent of the bounding box.
            </summary>
        </member>
        <member name="P:Elements.Geometry.BBox3.Min">
            <summary>
            The minimum extent of the bounding box.
            </summary>
        </member>
        <member name="M:Elements.Geometry.BBox3.#ctor(Elements.Geometry.Vector3[])">
            <summary>
            Construct a bounding box from an array of points.
            </summary>
            <param name="points">The points which are contained within the bounding box.</param>
        </member>
        <member name="M:Elements.Geometry.BBox3.#ctor(Elements.Geometry.Profile)">
            <summary>
            Create the BBox3 for a Profile.
            </summary>
            <param name="profile">The Profile.</param>
        </member>
        <member name="M:Elements.Geometry.BBox3.#ctor(System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Create a bounding box for a collection of polygons.
            </summary>
            <param name="polygons"></param>
        </member>
        <member name="M:Elements.Geometry.BBox3.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a bounding box specifying minimum and maximum extents.
            </summary>
            <param name="min">The minimum extent of the bounding box.</param>
            <param name="max">The maximum extent of the bounding box.</param>
        </member>
        <member name="T:Elements.Geometry.Color">
            <summary>
            Color represents an RGBA color.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Color.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Color.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Color.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Color.Alpha">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a color from its components.
            </summary>
            <param name="red">The red component between 0.0 and 1.0.</param>
            <param name="green">The green component between 0.0 and 1.0.</param>
            <param name="blue">The blue component between 0.0 and 1.0.</param>
            <param name="alpha">The alpha component between 0.0 and 1.0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when any color component is less than 0.0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when any color component is greater than 1.0.</exception>
        </member>
        <member name="M:Elements.Geometry.Color.ToArray">
            <summary>
            Get the color's components as an array.
            </summary>
            <returns>An array containing the color's components.</returns>
        </member>
        <member name="M:Elements.Geometry.Color.Equals(System.Object)">
            <summary>
            Is this color equal to the provided color?
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Color.GetHashCode">
            <summary>
            Get the hash code for this color.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.Geometry.Colors">
            <summary>
            Commonly used Colors.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Beige">
            <summary>
            Beige
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Brown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Cobalt">
            <summary>
            Cobalt
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Crimson">
            <summary>
            Crimson
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Darkgray">
            <summary>
            Dark Gray
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Emerald">
            <summary>
            Emerald
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Granite">
            <summary>
            Granite
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Lavender">
            <summary>
            Lavender
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Lime">
            <summary>
            Lime
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Magenta">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Maroon">
            <summary>
            Maroon
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Mint">
            <summary>
            Mint
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Navy">
            <summary>
            Navy
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Olive">
            <summary>
            Olive
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Sand">
            <summary>
            Sand
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Stone">
            <summary>
            Stone
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.White">
            <summary>
            White
            </summary>
        </member>
        <member name="P:Elements.Geometry.Colors.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="T:Elements.Geometry.Interfaces.ICurve">
            <summary>
            ICurve is implemented by all curve types.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Interfaces.ICurve.Type">
            <summary>
            A type descriptor for use in deserialization.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.Length">
            <summary>
            Calculate the length of the curve.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Interfaces.ICurve.Start">
            <summary>
            The start of the curve.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Interfaces.ICurve.End">
            <summary>
            The end of the curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)">
            <summary>
            Get a point along the curve at parameter u.
            </summary>
            <param name="u">A parameter on the curve between 0.0 and 1.0.</param>
            <returns>The point on the curve.</returns>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)">
            <summary>
            Get the frame from the curve at parameter u.
            </summary>
            <param name="u">A parameter on the curve between 0.0 and 1.0.</param>
            <returns>The transform of the curve at parameter u, with the transform's Z axis tangent to the curve.</returns>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)">
            <summary>
            Get a collection of Transforms which represent frames along this ICurve.
            </summary>
            <param name="startSetback">The offset from the start of the ICurve.</param>
            <param name="endSetback">The offset from the end of the ICurve.</param>
            <returns>A collection of Transforms.</returns>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.Reversed">
            <summary>
            Get an ICurve which is the reverse of this curve.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Interfaces.ICurve.Bounds">
            <summary>
            Get the bounding box of this curve.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Interfaces.IProfileProvider">
            <summary>
            Interface implemented by types which provide a Profile.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Interfaces.IProfileProvider.Profile">
            <summary>
            A Profile.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Line">
            <summary>
            Line represents a linear curve between two points.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Line.Type">
            <summary>
            The type of the curve.
            Used during deserialization to disambiguate derived types.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Line.Start">
            <summary>
            The start of the line.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Line.End">
            <summary>
            The end of the line.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Line.Length">
            <summary>
            Calculate the length of the line.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Line.Direction">
            <summary>
            A normalized vector representing the direction of the line.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Construct a line from start and end points.
            </summary>
            <param name="start">The start of the line.</param>
            <param name="end">The end of the line.</param>
            <exception cref="T:System.ArgumentException">Thrown when the start and end points are the same.</exception>
        </member>
        <member name="M:Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double)">
            <summary>
            Construct a line of length from a start along direction.
            </summary>
            <param name="start"></param>
            <param name="direction"></param>
            <param name="length"></param>
        </member>
        <member name="M:Elements.Geometry.Line.TransformAt(System.Double)">
            <summary>
            Get a transform whose XY plane is perpendicular to the curve, and whose
            positive Z axis points along the curve.
            </summary>
            <param name="u">The parameter along the Line, between 0.0 and 1.0, at which to calculate the Transform.</param>
            <returns>A transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.PointAt(System.Double)">
            <summary>
            Get a point along the line at parameter u.
            </summary>
            <param name="u"></param>
            <returns>A point on the curve at parameter u.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Reversed">
            <summary>
            Get a new line that is the reverse of the original line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Line.Thicken(System.Double)">
            <summary>
            Thicken a line by the specified amount.
            </summary>
            <param name="amount">The amount to thicken the line.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Line.Equals(System.Object)">
            <summary>
            Does this line equal the provided line?
            </summary>
            <param name="obj">The target line.</param>
            <returns>True if the start and end points of the lines are equal, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.GetHashCode">
            <summary>
            Get the hash code for the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Line.Frames(System.Double,System.Double)">
            <summary>
            Get a collection of transforms which represent frames along this line.
            </summary>
            <param name="startSetback">The offset from the start of the line.</param>
            <param name="endSetback">The offset from the end of the line.</param>
            <returns>A collection of transforms.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Intersect(Elements.Geometry.Plane)">
            <summary>
            Intersect this line with the specified plane 
            </summary>
            <param name="p">The plane.</param>
            <returns>The point of intersection or null if no intersection occurs.</returns>
        </member>
        <member name="M:Elements.Geometry.Line.Bounds">
            <summary>
            Get the bounding box for this line.
            </summary>
            <returns>A bounding box for this line.</returns>
        </member>
        <member name="T:Elements.Geometry.Matrix">
            <summary>
            A column-ordered 4x3 matrix.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.XAxis">
            <summary>
            The X axis of the Matrix.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.YAxis">
            <summary>
            The Y axis of the Matrix.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.ZAxis">
            <summary>
            The Z axis of the Matrix.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Matrix.Translation">
            <summary>
            The translation component of the Matrix.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.#ctor">
            <summary>
            Construct a 4X3 matrix.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Construct a matrix from axes.
            </summary>
            <param name="xAxis">The X axis.</param>
            <param name="yAxis">The Y axis.</param>
            <param name="zAxis">The Z axis.</param>
            <param name="translation">The translation.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetIdentity">
            <summary>
            Set the matrix to identity.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.ZeroTranslation">
            <summary>
            Set the translation of the matrix to zero.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetTranslation(Elements.Geometry.Vector3)">
            <summary>
            Set the translation of the matrix.
            </summary>
            <param name="v">The translation vector.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupTranslation(Elements.Geometry.Vector3)">
            <summary>
            Setup the matrix to translate.
            </summary>
            <param name="v">The translation.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupRotate(System.Int32,System.Double)">
            <summary>
            Setup the matrix to rotate.
            </summary>
            <param name="axis">The axis of rotation. 1-x, 2-y, 3-z</param>
            <param name="theta">The angle of rotation in radians.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided axis is not 1-3.</exception>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupRotate(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Setup the matrix to perform rotation.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="theta">The angle of rotation in radians.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupScale(Elements.Geometry.Vector3)">
            <summary>
            Setup the matrix to scale.
            </summary>
            <param name="s">The scale value.</param>
        </member>
        <member name="M:Elements.Geometry.Matrix.SetupProject(Elements.Geometry.Plane)">
            <summary>
            Setup the matrix to project.
            </summary>
            <param name="p">The plane on which to project.</param>
            <exception cref="T:System.Exception">Thrown when provided Plane's normal is not unit length.</exception>
        </member>
        <member name="M:Elements.Geometry.Matrix.op_Multiply(Elements.Geometry.Vector3,Elements.Geometry.Matrix)">
            <summary>
            Transform the specified vector.
            </summary>
            <param name="p">The vector to transform.</param>
            <param name="m">The transformation matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Matrix.op_Multiply(Elements.Geometry.Matrix,Elements.Geometry.Matrix)">
            <summary>
            Multiply two matrices.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Matrix.Transpose">
            <summary>
            Transpose the matrix.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Matrix.ToString">
            <summary>
            Return the string representation of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.Geometry.Mesh">
            <summary>
            An indexed mesh.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Mesh.VMax">
            <summary>
            The maximum vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.VMin">
            <summary>
            The minimum vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.NMax">
            <summary>
            The maximum normal.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.NMin">
            <summary>
            The minimum normal.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.CMax">
            <summary>
            The maximum color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.CMin">
            <summary>
            The minimum color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.IMax">
            <summary>
            The maximum index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.IMin">
            <summary>
            The minimum index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.Vertices">
            <summary>
            The vertices of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.Normals">
            <summary>
            The normals of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.Indices">
            <summary>
            The indices of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Mesh.VertexColors">
            <summary>
            The vertex colors of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Mesh.#ctor">
            <summary>
            Construct an empty mesh.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Mesh.#ctor(System.Double[],System.Double[],System.UInt16[])">
            <summary>
            Construct a mesh from vertices, normals, and indices.
            </summary>
            <param name="vertices">An array containing doubles of the form [x1, y1, z1, x2, y2, z2...].</param>
            <param name="normals">An array containing doubles of the form [nx1, ny1, nz1, nx2, ny2, nz2...]</param>
            <param name="indices">An array containing integers of the form [0, 1, 2, 0, 2, 3...].</param>
        </member>
        <member name="M:Elements.Geometry.Mesh.AddTriangle(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Add a triangle to the mesh.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="n"></param>
        </member>
        <member name="M:Elements.Geometry.Mesh.AddTriangle(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Add a triangle to the mesh.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Elements.Geometry.Mesh.AddQuad(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Add two triangles to the mesh by splitting a rectangular region in two.
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Elements.Geometry.Mesh.ToString">
            <summary>
            Get a string representation of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Mesh.Loft(System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Create a ruled loft between sections.
            </summary>
            <param name="sections"></param>
        </member>
        <member name="T:Elements.Geometry.Plane">
            <summary>
            A cartesian plane.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Plane.Origin">
            <summary>
            The origin of the plane.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Plane.Normal">
            <summary>
            The normal of the plane.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Construct a plane.
            </summary>
            <param name="origin">The origin of the plane.</param>
            <param name="normal">The normal of the plane.</param>
        </member>
        <member name="M:Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Construct a plane by three points.
            The plane is constructed as a->b * b->c.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of a, b, or c are null.</exception>
        </member>
        <member name="M:Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Construct a plane.
            Only the first three points of the points array will be used.
            </summary>
            <param name="origin">The origin of the plane.</param>
            <param name="points">An array of vectors to be used to determine the normal of the plane.</param>
            <exception cref="T:System.ArgumentException">Thrown when less than three points are provided.</exception>
            <exception cref="T:System.ArgumentException">Thrown when coincident points are provided.</exception>
        </member>
        <member name="T:Elements.Geometry.Polygon">
            <summary>
            A closed planar polygon.
            </summary>
            <summary>
            Methods to construct various polygons.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Polygon.Area">
            <summary>
            The area enclosed by the polygon.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Polygon.Centroid">
            <summary>
            The centroid of the Polygon.
            </summary>
            <returns>
            Retruns a Vector3 representation of the Polygon centroid.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.#ctor(Elements.Geometry.Vector3[])">
            <summary>
            Construct a Polygon from a collection of vertices.
            </summary>
            <param name="vertices">A collection of vertices.</param>
            <exception cref="T:System.ArgumentException">Thrown when coincident vertices are provided.</exception>
        </member>
        <member name="M:Elements.Geometry.Polygon.Contains(Elements.Geometry.Vector3)">
            <summary>
            Tests if the supplied Vector3 is within this Polygon without coincidence with an edge when compared on a shared plane.
            </summary>
            <param name="vector">The Vector3 to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Vector3 is within this Polygon when compared on a shared plane. Returns false if the Vector3 is outside this Polygon or if the supplied Vector3 is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Contains(Elements.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon is within this Polygon without coincident edges when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare to this Polygon.</param>
            <returns>
            Returns true if every vertex of the supplied Polygon is within this Polygon when compared on a shared plane. Returns false if the supplied Polygon is not entirely within this Polygon, or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Covers(Elements.Geometry.Vector3)">
            <summary>
            Tests if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane.
            </summary>
            <param name="vector">The Vector3 to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if the supplied Vector3 is outside this Polygon, or if the supplied Vector3 is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Covers(Elements.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon is within this Polygon with or without edge coincident vertices when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare to this Polygon.</param>
            <returns>
            Returns true if every vertex of the supplied Polygon is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if any vertex of the supplied Polygon is outside this Polygon, or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Vector3)">
            <summary>
            Tests if the supplied Vector3 is outside this Polygon when compared on a shared plane.
            </summary>
            <param name="vector">The Vector3 to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Vector3 is outside this Polygon when compared on a shared plane or if the supplied Vector3 is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon and this Polygon are coincident in any way when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Polygon do not intersect or touch this Polygon when compared on a shared plane or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Intersects(Elements.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare with this Polygon.</param>
            <returns>
            Returns true if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane. Returns false if the supplied Polygon does not share an area with this Polygon or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Touches(Elements.Geometry.Vector3)">
            <summary>
            Tests if the supplied Vector3 is coincident with an edge of this Polygon when compared on a shared plane.
            </summary>
            <param name="vector">The Vector3 to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Vector3 coincides with an edge of this Polygon when compared on a shared plane. Returns false if the supplied Vector3 is not coincident with an edge of this Polygon, or if the supplied Vector3 is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Touches(Elements.Geometry.Polygon)">
            <summary>
            Tests if at least one point of an edge of the supplied Polygon is shared with an edge of this Polygon without the Polygons interesecting when compared on a shared plane.
            </summary>
            <param name="polygon">The Polygon to compare to this Polygon.</param>
            <returns>
            Returns true if the supplied Polygon shares at least one edge point with this Polygon without the Polygons intersecting when compared on a shared plane. Returns false if the Polygons intersect, are disjoint, or if the supplied Polygon is null.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Difference(Elements.Geometry.Polygon)">
            <summary>
            Constructs the geometric difference between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting Polygon.</param>
            <returns>
            Returns a list of Polygons representing the subtraction of the supplied Polygon from this Polygon.
            Returns null if the area of this Polygon is entirely subtracted.
            Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Difference(System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Constructs the geometric difference between this Polygon and the supplied Polygons.
            </summary>
            <param name="difPolys">The list of intersecting Polygons.</param>
            <returns>
            Returns a list of Polygons representing the subtraction of the supplied Polygons from this Polygon.
            Returns null if the area of this Polygon is entirely subtracted.
            Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Intersection(Elements.Geometry.Polygon)">
            <summary>
            Constructs the Polygon intersections between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting Polygon.</param>
            <returns>
            Returns a list of Polygons representing the intersection of this Polygon with the supplied Polygon.
            Returns null if the two Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Union(Elements.Geometry.Polygon)">
            <summary>
            Constructs the geometric union between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The Polygon to be combined with this Polygon.</param>
            <returns>
            Returns a single Polygon from a successful union.
            Returns null if a union cannot be performed on the two Polygons.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Union(System.Collections.Generic.IList{Elements.Geometry.Polygon})">
            <summary>
            Constructs the geometric union between this Polygon and the supplied list of Polygons.
            </summary>
            <param name="polygons">The list of Polygons to be combined with this Polygon.</param>
            <returns>
            Returns a single Polygon from a successful union.
            Returns null if a union cannot be performed on the complete list of Polygons.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.XOR(Elements.Geometry.Polygon)">
            <summary>
            Returns Polygons representing the symmetric difference between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting polygon.</param>
            <returns>
            Returns a list of Polygons representing the symmetric difference of this Polygon and the supplied Polygon.
            Returns a representation of this Polygon and the supplied Polygon if the Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Offset(System.Double)">
            <summary>
            Offset this polygon by the specified amount.
            </summary>
            <param name="offset">The amount to offset.</param>
            <returns>A new Polygon offset by offset.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Segments">
            <summary>
            Get a collection a lines representing each segment of this polyline.
            </summary>
            <returns>A collection of Lines.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Reversed">
            <summary>
            Reverse the direction of a polygon.
            </summary>
            <returns>Returns a new Polygon whose vertices are reversed.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Equals(System.Object)">
            <summary>
            Is this polygon equal to the provided polygon?
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Elements.Geometry.Polygon.GetHashCode">
            <summary>
            Get the hash code for the polygon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Project(Elements.Geometry.Plane)">
            <summary>
            Project the specified vector onto the plane.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Elements.Geometry.Polygon.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)">
            <summary>
            Project this Polygon onto a Plane along a vector.
            </summary>
            <param name="direction">The projection vector.</param>
            <param name="p">The Plane onto which to project the Polygon.</param>
            <returns>A Polygon projected onto the Plane.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Frames(System.Double,System.Double)">
            <summary>
            Get the transforms used to transform a Profile extruded along this Polyline.
            </summary>
            <param name="startSetback"></param>
            <param name="endSetback"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Plane">
            <summary>
            Compute the Plane defined by the first three vertices of the Polygon.
            </summary>
            <returns>A Plane.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.ToString">
            <summary>
            The string representation of the Polygon.
            </summary>
            <returns>A string containing the string representations of this Polygon's vertices.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Rectangle(System.Double,System.Double,Elements.Geometry.Vector3,System.Double,System.Double)">
            <summary>
            Create a rectangle.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="origin">An optional origin to displace the rectangle.</param>
            <param name="verticalOffset">An optional amount the rectangle should be offset from center in the vertical direction.</param>
            <param name="horizontalOffset">An optional amount the rectangle should be offset from center in the horizontal direction.</param>
            <returns>A rectangular Polygon centered around origin.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Rectangle(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a rectangle.
            </summary>
            <param name="min">The minimum coordinate.</param>
            <param name="max">The maximum coordinate.</param>
            <returns>A rectangular Polygon with its lower left corner at min and its upper right corner at max.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Circle(System.Double,System.Int32)">
            <summary>
            Create a circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="divisions">The number of divisions of the circle.</param>
            <returns>A circle as a Polygon tessellated into the specified number of divisions.</returns>
        </member>
        <member name="M:Elements.Geometry.Polygon.Ngon(System.Int32,System.Double)">
            <summary>
            Create an ngon.
            </summary>
            <param name="sides">The number of side of the Polygon.</param>
            <param name="radius">The radius of the circle in which the Ngon is inscribed.</param>
            <returns>A Polygon with the specified number of sides.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the radius is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the number of sides is less than 3.</exception>
        </member>
        <member name="T:Elements.Geometry.PolygonExtensions">
            <summary>
            Polygon extension methods.
            </summary>
        </member>
        <member name="M:Elements.Geometry.PolygonExtensions.ToClipperPath(Elements.Geometry.Polygon)">
            <summary>
            Construct a clipper path from a Polygon.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.PolygonExtensions.ToPolygon(System.Collections.Generic.List{ClipperLib.IntPoint})">
            <summary>
            Construct a Polygon from a clipper path 
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Elements.Geometry.Polyline">
            <summary>
            A coplanar continuous set of lines.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Polyline.Type">
            <summary>
            The type of the curve.
            Used during deserialization to disambiguate derived types.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Polyline._vertices">
            <summary>
            The internal collection of vertices.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Polyline.Vertices">
            <summary>
            The vertices of the polygon.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polyline.Length">
            <summary>
            Calculate the length of the polygon.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Polyline.Start">
            <summary>
            The start of the polyline.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Polyline.End">
            <summary>
            The end of the polyline.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Polyline.#ctor(Elements.Geometry.Vector3[])">
            <summary>
            Construct a polyline from a collection of vertices.
            </summary>
            <param name="vertices">A CCW wound set of vertices.</param>
        </member>
        <member name="M:Elements.Geometry.Polyline.Reversed">
            <summary>
            Reverse the direction of a polyline.
            </summary>
            <returns>Returns a new polyline with opposite winding.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.ToString">
            <summary>
            Get a string representation of this polyline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.Segments">
            <summary>
            Get a collection a lines representing each segment of this polyline.
            </summary>
            <returns>A collection of Lines.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.PointAt(System.Double)">
            <summary>
            Get a point on the polygon at parameter u.
            </summary>
            <param name="u">A value between 0.0 and 1.0.</param>
            <returns>Returns a Vector3 indicating a point along the Polygon length from its start vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.PointAtInternal(System.Double,System.Int32@)">
            <summary>
            Get a point on the polygon at parameter u.
            </summary>
            <param name="u">A value between 0.0 and 1.0.</param>
            <param name="segmentIndex">The index of the segment containing parameter u.</param>
            <returns>Returns a Vector3 indicating a point along the Polygon length from its start vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.TransformAt(System.Double)">
            <summary>
            Get the Transform at the specified parameter along the Polygon.
            </summary>
            <param name="u">The parameter on the Polygon between 0.0 and 1.0.</param>
            <returns>A Transform with its Z axis aligned trangent to the Polygon.</returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.Frames(System.Double,System.Double)">
            <summary>
            Get the transforms used to transform a Profile extruded along this Polyline.
            </summary>
            <param name="startSetback"></param>
            <param name="endSetback"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Polyline.Bounds">
            <summary>
            Get the bounding box for this curve.
            </summary>
        </member>
        <member name="T:Elements.Geometry.VerticalAlignment">
            <summary>
            The vertical alignment of the profile.
            </summary>
        </member>
        <member name="F:Elements.Geometry.VerticalAlignment.Top">
            <summary>
            Align the profile along its top.
            </summary>
        </member>
        <member name="F:Elements.Geometry.VerticalAlignment.Center">
            <summary>
            Align the profile along its center.
            </summary>
        </member>
        <member name="F:Elements.Geometry.VerticalAlignment.Bottom">
            <summary>
            Align the profile along its bottom.
            </summary>
        </member>
        <member name="T:Elements.Geometry.HorizontalAlignment">
            <summary>
            The horizontal alignment of the profile.
            </summary>
        </member>
        <member name="F:Elements.Geometry.HorizontalAlignment.Left">
            <summary>
            Align the profile along its left edge.
            </summary>
        </member>
        <member name="F:Elements.Geometry.HorizontalAlignment.Center">
            <summary>
            Align the profile along its center.
            </summary>
        </member>
        <member name="F:Elements.Geometry.HorizontalAlignment.Right">
            <summary>
            Align the profile along its right edge.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Profile">
            <summary>
            A Profile describes a Polygonal perimeter
            with zero or many Polygonal voids.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Profile.Id">
            <summary>
            The identifier of the Profile.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Profile.Name">
            <summary>
            The name of the Profile.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Profile.Perimeter">
            <summary>
            The perimeter of the Profile.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Profile.Voids">
            <summary>
            A collection of Polygons representing voids in the Profile.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.String)">
            <summary>
            Construct a Profile.
            </summary>
            <param name="name">The name of the Profile.</param>
            <param name="perimeter">The perimeter of the Profile.</param>
            <param name="voids">A collection of Polygons representing voids in the Profile.</param>
        </member>
        <member name="M:Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,System.String)">
            <summary>
            Construct a Profile.
            </summary>
            <param name="name">The name of the Profile.</param>
            <param name="perimeter">The perimeter of the Profile</param>
        </member>
        <member name="M:Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon,System.String)">
            <summary>
            Construct a Profile.
            </summary>
            <param name="name">The name of the Profile.</param>
            <param name="perimeter">The perimeter of the Profile.</param>
            <param name="singleVoid">A void in the Profile.</param>
        </member>
        <member name="M:Elements.Geometry.Profile.Reversed">
            <summary>
            Get a new Profile which is the reverse of this Profile.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.Area">
            <summary>
            The area of the Profile.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.#ctor(System.String)">
            <summary>
            Default constructor for Profile.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profile.Clip">
            <summary>
             Conduct a clip operation on this profile.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Profiles.HSSPipeProfileServer">
            <summary>
            A singleton class which serves every HSS pipe section as defined by AISC.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Profiles.HSSPipeProfileServer.Instance">
            <summary>
            The HSSPipeProfileServer singleton.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Profiles.ProfileServer">
            <summary>
            Base class for types which serve Profiles.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.ProfileServer.InchesToMeters">
            <summary>
            A conversion factor from inches to meters.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Profiles.ProfileServer._profiles">
            <summary>
            The map of Profiles.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Profiles.ProfileServer.GetProfileByName(System.String)">
            <summary>
            Get a profile by name from the server.
            </summary>
            <param name="name"></param>
            <returns>A Profile. Throws an exception if a profile with the specified name cannot be found.</returns>
            <exception cref="T:System.Exception">Thrown when a Profile with the specfied name cannot be found.</exception>
        </member>
        <member name="M:Elements.Geometry.Profiles.ProfileServer.AllProfiles">
            <summary>
            Get all Profiles available in the WideFlangeProfileServer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.Geometry.Profiles.WideFlangeProfileServer">
             <summary>
            A singleton class which serves every Wide Flange section as defined by AISC.
             </summary>
        </member>
        <member name="P:Elements.Geometry.Profiles.WideFlangeProfileServer.Instance">
            <summary>
            The WideFlangeProfileServer singleton.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Quaternion">
            <summary>
            A quaternion.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Quaternion.X">
            <summary>
            The X component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Quaternion.Y">
            <summary>
            The Y component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Quaternion.Z">
            <summary>
            The Z component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Quaternion.W">
            <summary>
            The W component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Quaternion.#ctor(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Construct a Quaternion from an axis and an angle in radians.
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
        </member>
        <member name="T:Elements.Geometry.Solids.Edge">
            <summary>
            A Solid Edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Edge.Id">
            <summary>
            The Id of the Edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Edge.Left">
            <summary>
            The Left edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Edge.Right">
            <summary>
            The Right edge.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Edge.#ctor(System.Int64,Elements.Geometry.Solids.Vertex,Elements.Geometry.Solids.Vertex)">
            <summary>
            Construct an Edge
            </summary>
            <param name="id"></param>
            <param name="from">The start Vertex of the Edge.</param>
            <param name="to">The end Vertex of the Edge.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Edge.ToString">
            <summary>
            Get the string representation of the Edge.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Solids.Face">
            <summary>
            A Solid Face.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Face.Id">
            <summary>
            The Id of the Face.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Face.Outer">
            <summary>
            A CCW wound list of Edges.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Face.Inner">
            <summary>
            A collection of CW wound Edges.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Face.#ctor(System.Int64,Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Loop[])">
            <summary>
            Construct a Face.
            </summary>
            <param name="id"></param>
            <param name="outer">The outer loop of the Face.</param>
            <param name="inner">The inner loops of the Face.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Face.ToString">
            <summary>
            The string representation of the Face.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Solids.HalfEdge">
            <summary>
            One half of the directional components of an Edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.HalfEdge.Edge">
            <summary>
            The Edge of which this is one half.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.HalfEdge.Vertex">
            <summary>
            The Vertex at the start of the edge.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.HalfEdge.Loop">
            <summary>
            The Loop to which this HalfEdge belongs.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.HalfEdge.#ctor(Elements.Geometry.Solids.Edge,Elements.Geometry.Solids.Vertex)">
            <summary>
            Construct a HalfEdge.
            </summary>
            <param name="edge">The Edge associated with this HalfEdge.</param>
            <param name="vertex">The Vertex at the start of the edge.</param>
        </member>
        <member name="T:Elements.Geometry.Solids.Loop">
            <summary>
            A Loop of HalfEdges which bound a Face.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Loop.Face">
            <summary>
            The Face to which this Loop corresponds.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Loop.Edges">
            <summary>
            A collection of HalfEdges which comprise the Loop.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.#ctor">
            <summary>
            Construct a Loop.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.#ctor(Elements.Geometry.Solids.HalfEdge[])">
            <summary>
            Construct a Loop from an array of HalfEdges.
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.AddEdgeToStart(Elements.Geometry.Solids.HalfEdge)">
            <summary>
            Add a HalfEdge ot the start of the Loop.
            </summary>
            <param name="he"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.Loop.AddEdgeToEnd(Elements.Geometry.Solids.HalfEdge)">
            <summary>
            Add a HalfEdge to the end of the Loop.
            </summary>
            <param name="he"></param>
        </member>
        <member name="T:Elements.Geometry.Solids.Solid">
            <summary>
            A boundary representation of a solid.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Solid.Faces">
            <summary>
            The Faces of the Solid.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Solid.Edges">
            <summary>
            The edges of the solid.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Solid.Vertices">
            <summary>
            The vertices of the solid.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Solid.Material">
            <summary>
            The material of the solid.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.#ctor(Elements.Material)">
            <summary>
            Construct a solid.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.CreateLamina(Elements.Geometry.Vector3[],Elements.Material)">
            <summary>
            Construct a lamina solid.
            </summary>
            <param name="perimeter">The perimeter of the lamina's faces.</param>
            <param name="material">The solid's material.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.Double,Elements.Material,System.Boolean)">
            <summary>
            Construct a solid by sweeping a face.
            </summary>
            <param name="outerLoop">The perimeter of the face to sweep.</param>
            <param name="innerLoops">The holes of the face to sweep.</param>
            <param name="distance">The distance to sweep.</param>
            <param name="material">The solid's material.</param>
            <param name="bothSides">Should the sweep start offset by direction distance/2? </param>
            <returns>A solid.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.SweepFaceAlongCurve(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Interfaces.ICurve,Elements.Material,System.Double,System.Double)">
            <summary>
            Construct a solid by sweeping a face along a curve.
            </summary>
            <param name="outer">The perimeter of the face to sweep.</param>
            <param name="inner">The holes of the face to sweep.</param>
            <param name="curve">The curve along which to sweep.</param>
            <param name="material">The solid's material.</param>
            <param name="startSetback">The setback of the sweep from the start of the curve.</param>
            <param name="endSetback">The setback of the sweep from the end of the curve.</param>
            <returns>A solid.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Vector3,System.Double,Elements.Material,System.Boolean)">
            <summary>
            Construct a solid by sweeping a face in a direction.
            </summary>
            <param name="outerLoop">The perimeter of the face to sweep.</param>
            <param name="innerLoops">The holes of the face to sweep.</param>
            <param name="direction">The direction in which to sweep.</param>
            <param name="distance">The distance to sweep.</param>
            <param name="bothSides">Should the sweep start offset by direction distance/2? </param>
            <param name="material">The solid's material.</param>
            <returns>A solid.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddVertex(Elements.Geometry.Vector3)">
            <summary>
            Add a Vertex to the Solid.
            </summary>
            <param name="position"></param>
            <returns>The newly added vertex.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[])">
            <summary>
            Add a Face to the Solid.
            </summary>
            <param name="outer">A polygon representing the perimeter of the face.</param>
            <param name="inner">An array of polygons representing the holes in the face.</param>
            <returns>The newly added face.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddEdge(Elements.Geometry.Solids.Vertex,Elements.Geometry.Solids.Vertex)">
            <summary>
            Add an edge to the solid.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns>The newly added edge.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Loop[])">
            <summary>
            Add a face to the solid.
            Provided edges are expected to be wound CCW for outer,
            and CW for inner. The face will be linked to the edges.
            </summary>
            <param name="outer">The outer Loop of the Face.</param>
            <param name="inner">The inner Loops of the Face.</param>
            <returns>The newly added Face.</returns>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.AddEdges(Elements.Geometry.Polygon)">
            <summary>
            Creates a series of edges from a polygon.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.ToString">
            <summary>
            Get the string representation of the solid.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Solid.Cap(Elements.Geometry.Solids.Edge[][],System.Boolean)">
            <summary>
            Create a face from edges.
            The first edge array is treated as the outer edge.
            Additional edge arrays are treated as holes.
            </summary>
            <param name="edges"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:Elements.Geometry.Solids.SolidExtensions.ToContourVertexArray(Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Face)">
            <summary>
            Convert Loop to an array of ContourVertex.
            </summary>
            <param name="loop"></param>
            <param name="face"></param>
        </member>
        <member name="T:Elements.Geometry.Solids.Vertex">
            <summary>
            A Solid Vertex.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Vertex.Id">
            <summary>
            The Id of the Vertex.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Vertex.HalfEdge">
            <summary>
            The HalfEdge which has this Vertex as its start.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Solids.Vertex.Point">
            <summary>
            The location of the Vertex.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Solids.Vertex.#ctor(System.Int64,Elements.Geometry.Vector3)">
            <summary>
            Construct a Vertex.
            </summary>
            <param name="id"></param>
            <param name="point">The location of the Vertex.</param>
        </member>
        <member name="M:Elements.Geometry.Solids.Vertex.ToString">
            <summary>
            Get the string representation of the Vertex.
            </summary>
        </member>
        <member name="T:Elements.Geometry.Transform">
            <summary>
            A coordinate system defined by an origin, x, y, and z axes.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.Matrix">
            <summary>
            The transform's matrix.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.Origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.XAxis">
            <summary>
            The X axis.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.YAxis">
            <summary>
            The Y axis.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.ZAxis">
            <summary>
            The Z axis.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.XY">
            <summary>
            The XY plane of the transform.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.YZ">
            <summary>
            The YZ plane of the transform.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Transform.XZ">
            <summary>
            The XZ plane of the transform.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor">
            <summary>
            Create the identity transform.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Transform)">
            <summary>
            Create a transform by copying another transform.
            </summary>
            <param name="t">The transform to copy.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3)">
            <summary>
            Create a transform with a translation.
            </summary>
            <param name="origin">The origin of the transform.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a transform with a translation.
            </summary>
            <param name="x">The X component of translation.</param>
            <param name="y">The Y component of translation.</param>
            <param name="z">The Z component of translation.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a transform centered at origin and an up vector.
            </summary>
            <param name="origin">The origin of the transform.</param>
            <param name="up">The vector which will define the Z axis of the transform.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a transform by origin and axes.
            </summary>
            <param name="origin">The origin of the transform.</param>
            <param name="xAxis">The X axis of the transform.</param>
            <param name="zAxis">The Z axis of the transform.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Matrix)">
            <summary>
            Create a transform by a matrix.
            </summary>
            <param name="matrix">The transform's Matrix.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Create a transform with origin at origin,
            whose Z axis points from start to end, and whose
            up direction is up.
            </summary>
            <param name="origin">The origin of the transform.</param>
            <param name="start">The start of the z vector.</param>
            <param name="end">The end of the z vector.</param>
            <param name="up">A vector which can be used to orient the transform.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.ToString">
            <summary>
            Get a string representation of the transform.
            </summary>
            <returns>A string representation of the transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfVector(Elements.Geometry.Vector3)">
            <summary>
            Transform a vector into the coordinate space defined by this transform.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>A new vector transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfPolygon(Elements.Geometry.Polygon)">
            <summary>
            Transform the specified polygon.
            </summary>
            <param name="polygon">The polygon to transform.</param>
            <returns>A new polygon transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfPolygons(Elements.Geometry.Polygon[])">
            <summary>
            Transform the specified polygons.
            </summary>
            <param name="polygons">The polygons to transform.</param>
            <returns>An array of polygons transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfLine(Elements.Geometry.Line)">
            <summary>
            Transform the specified Line.
            </summary>
            <param name="line">The line to transform.</param>
            <returns>A new line transformed by this transforms.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.OfProfile(Elements.Geometry.Profile)">
            <summary>
            Transform the specified profile.
            </summary>
            <param name="profile">The profile to transform.</param>
            <returns>A new profile transformed by this transform.</returns>
        </member>
        <member name="M:Elements.Geometry.Transform.Concatenate(Elements.Geometry.Transform)">
            <summary>
            Concatenate the transform.
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Elements.Geometry.Transform.Move(Elements.Geometry.Vector3)">
            <summary>
            Apply a translation to the transform.
            </summary>
            <param name="translation">The translation to apply.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Rotate(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Apply a rotation to the transform.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in degrees.</param>
        </member>
        <member name="M:Elements.Geometry.Transform.Scale(Elements.Geometry.Vector3)">
            <summary>
            Apply a scale to the transform.
            </summary>
            <param name="amount">The amount to scale.</param>
        </member>
        <member name="T:Elements.Geometry.Vector3">
            <summary>
            A 3D vector.
            </summary>
        </member>
        <member name="F:Elements.Geometry.Vector3.Tolerance">
            <summary>
            A tolerance for comparison operations.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Vector3.Origin">
            <summary>
            Construct a vector at the origin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.Equals(System.Object)">
            <summary>
            Is this vector equal to the provided vector?
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3.GetHashCode">
            <summary>
            Get the hash code for the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Elements.Geometry.Vector3.XAxis">
            <summary>
            Construct a vector along the X axis.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.YAxis">
            <summary>
            Construct a vector along the Y axis.
            </summary>
        </member>
        <member name="P:Elements.Geometry.Vector3.ZAxis">
            <summary>
            Construct a vector along the Z axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.AtNEqualSpacesAlongLine(Elements.Geometry.Line,System.Int32,System.Boolean)">
            <summary>
            Construct vectors at n equal spaces along the provided line.
            </summary>
            <param name="line">The line.</param>
            <param name="n">The number of samples along the line.</param>
            <param name="includeEnds">A flag indicating whether or not to include points for the start and end of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.#ctor">
            <summary>
            Construct a default vector at the origin.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3.#ctor(Elements.Geometry.Vector3)">
            <summary>
            Construct a Vector3 by copying the components of another Vector3.
            </summary>
            <param name="v">The Vector3 to copy.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a vector from x, y, and z coordinates.
            </summary>
            <param name="x">The x coordinate of the vector.</param>
            <param name="y">The y coordinate of the vector.</param>
            <param name="z">The z coordinate of the vector.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.#ctor(System.Double,System.Double)">
            <summary>
            Construct a vector from x, and y coordinates.
            </summary>
            <param name="x">The x coordinate of the vector.</param>
            <param name="y">Thy y coordinate of the vector.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.Length">
            <summary>
            Get the length of this vector.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3.Normalized">
            <summary>
            Return a new vector which is the normalized version of this vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.Cross(Elements.Geometry.Vector3)">
            <summary>
            Compute the cross product of this vector and v.
            </summary>
            <param name="v">The vector with which to compute the cross product.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.Dot(Elements.Geometry.Vector3)">
            <summary>
            Compute the dot product of this vector and v.
            </summary>
            <param name="v">The vector with which to compute the dot product.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.AngleTo(Elements.Geometry.Vector3)">
            <summary>
            The angle in radians from this vector to another vector.
            </summary>
            <param name="v">The vector with which to measure the angle.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.Average(Elements.Geometry.Vector3)">
            <summary>
            Compute the average of this Vector3 and v.
            </summary>
            <param name="v">The vector with which to compute the average.</param>
            <returns>A vector which is the average of this and v.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.ProjectOnto(Elements.Geometry.Vector3)">
            <summary>
            Project vector a onto this vector.
            </summary>
            <param name="a">The vector to project onto this vector.</param>
            <returns>A new vector which is the projection of a onto this vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Multiply(Elements.Geometry.Vector3,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
            <param name="v">The vector to multiply.</param>
            <param name="a">The scalar value to multiply.</param>
            <returns>A vector whose magnitude is multiplied by a.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Multiply(System.Double,Elements.Geometry.Vector3)">
            <summary>
            Multiply a scalar and a vector.
            </summary>
            <param name="a">The scalar value to multiply.</param>
            <param name="v">The vector to multiply.</param>
            <returns>A vector whose magnitude is mutiplied by a.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Subtraction(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Subtract two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector which is the difference between a and b.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_Addition(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Add two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector which is the sum of a and b.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_GreaterThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Compute whether all components of vector a are greater than those of vector b.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if all of a's components are greater than those of b, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.op_LessThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)">
            <summary>
            Compute whether all components of vector a are less than those of vector b.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if all of a's components are less than those of b, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.IsParallelTo(Elements.Geometry.Vector3)">
            <summary>
            Determine whether this vector is parallel to v.
            </summary>
            <param name="v">The vector to compare to this vector.</param>
            <returns>True if the vectors are parallel, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.Negated">
            <summary>
            Construct a new vector which is the inverse of this vector.
            </summary>
            <returns>A new vector which is the inverse of this vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.ToArray">
            <summary>
            Convert a vector's components to an array.
            </summary>
            <returns>An array of comprised of the x, y, and z components of this vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.ToString">
            <summary>
            A string representation of the vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.IsAlmostEqualTo(Elements.Geometry.Vector3)">
            <summary>
            Determine whether this vector's components are equal to those of v, within tolerance.
            </summary>
            <param name="v">The vector to compare.</param>
            <returns>True if the difference of this vector and the supplied vector's components are all within Tolerance, otherwise false.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Vector3)">
            <summary>
            The distance from this point to b.
            </summary>
            <param name="v">The target vector.</param>
            <returns>The distance between this vector and the provided vector.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Plane)">
            <summary>
            The distance from this vector to p.
            The distance will be negative when this vector lies
            "behind" the plane.
            </summary>
            <param name="p">The plane.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.Project(Elements.Geometry.Plane)">
            <summary>
            Project this vector onto the plane.
            </summary>
            <param name="p">The plane on which to project the point.</param>
        </member>
        <member name="M:Elements.Geometry.Vector3.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)">
            <summary>
            Project this vector onto the plane along a vector.
            </summary>
            <param name="v">The vector along which t project.</param>
            <param name="p">The plane on which to project.</param>
            <returns>A point on the plane.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.CompareTo(Elements.Geometry.Vector3)">
            <summary>
            Implement IComparable interface.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3.Equals(Elements.Geometry.Vector3)">
            <summary>
            Implement the IEquatable interface.
            </summary>
            <param name="other"></param>
            <returns>True if all the components of this and the provided vector are equal.</returns>
        </member>
        <member name="T:Elements.Geometry.Vector3Extensions">
            <summary>
            Extension methods for Vector3.
            </summary>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.AreCoplanar(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Are the provided points on the same plane?
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.Average(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Find the average of a collection of Vector3.
            </summary>
            <param name="points">The Vector3 collection to average.</param>
            <returns>A Vector3 representing the average.</returns>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.Shrink(Elements.Geometry.Vector3[],System.Double)">
            <summary>
            Shrink a collection of Vector3 towards their average.
            </summary>
            <param name="points">The collection of Vector3 to shrink.</param>
            <param name="distance">The distance to shrink along the vector to average.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Geometry.Vector3Extensions.ToArray(System.Collections.Generic.IList{Elements.Geometry.Vector3})">
            <summary>
            Convert a collection of Vector3 to a flat array of double.
            </summary>
            <param name="points">The collection of Vector3 to convert.</param>
            <returns>An array containing x,y,z,x1,y1,z1,x2,y2,z2,...</returns>
        </member>
        <member name="T:Elements.Grid">
            <summary>
            A grid comprised of rows and columns with each cell represented by a polyline.
            </summary>
        </member>
        <member name="M:Elements.Grid.Cells">
            <summary>
            Get all cells.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elements.Grid.#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Int32,System.Int32)">
            <summary>
            Construct a grid.
            </summary>
            <param name="bottom"></param>
            <param name="top"></param>
            <param name="uDivisions">The number of grid divisions in the u direction.</param>
            <param name="vDivisions">The number of grid divisions in the v direction.</param>
        </member>
        <member name="M:Elements.Grid.#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Double,System.Double)">
            <summary>
            Construct a grid.
            </summary>
            <param name="bottom">The bottom edge of the Grid.</param>
            <param name="top">The top edge of the Grid.</param>
            <param name="uDistance">The distance along the u parameter at which points will be created.</param>
            <param name="vDistance">The distance along the v parameter at which points will be created.</param>
        </member>
        <member name="T:Elements.IdProvider">
            <summary>
            A singleton which provides integer ids.
            </summary>
        </member>
        <member name="P:Elements.IdProvider.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Elements.IdProvider.GetNextId">
            <summary>
            Get the next valid integer Id.
            </summary>
        </member>
        <member name="P:Elements.Interfaces.IElement.Type">
            <summary>
            A type descriptor for use in deserialization.
            </summary>
        </member>
        <member name="T:Elements.Interfaces.IElementTypeProvider`1">
            <summary>
            Interface implemented by classes which provide and ElementType.
            </summary>
            <typeparam name="TElementType"></typeparam>
        </member>
        <member name="P:Elements.Interfaces.IElementTypeProvider`1.ElementType">
            <summary>
            The ElementType provided by this instance.
            </summary>
        </member>
        <member name="T:Elements.Interfaces.IIdentifiable">
            <summary>
            The interface for all elements which can be identified with a unique identifier.
            </summary>
        </member>
        <member name="P:Elements.Interfaces.IIdentifiable.Id">
            <summary>
            The unique identifier of the Element.
            </summary>
        </member>
        <member name="P:Elements.Interfaces.IIdentifiable.Name">
            <summary>
            A human-readable name for the Element.
            </summary>
        </member>
        <member name="P:Elements.Interfaces.IProperty.Description">
            <summary>
            The description of the property.
            </summary>
        </member>
        <member name="T:Elements.Mass">
            <summary>
            An extruded building mass.
            </summary>
        </member>
        <member name="P:Elements.Mass.Profile">
            <summary>
            The Profile of the mass.
            </summary>
        </member>
        <member name="P:Elements.Mass.ProfileTransformed">
            <summary>
            The transformed Profile of the mass.
            </summary>
        </member>
        <member name="P:Elements.Mass.Height">
            <summary>
            The height of the mass.
            </summary>
        </member>
        <member name="P:Elements.Mass.Thickness">
            <summary>
            The thickness of the mass' extrusion.
            </summary>
        </member>
        <member name="P:Elements.Mass.Geometry">
            <summary>
            The mass' geometry.
            </summary>
        </member>
        <member name="M:Elements.Mass.#ctor(Elements.Geometry.Profile,System.Double,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Construct a Mass.
            </summary>
            <param name="profile">The profile of the mass.</param>
            <param name="height">The height of the mass from the bottom elevation.</param>
            <param name="material">The mass' material. The default is the built in mass material.</param>
            <param name="transform">The mass' transform.</param>
        </member>
        <member name="M:Elements.Mass.#ctor(Elements.Geometry.Polygon,System.Double,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Construct a Mass.
            </summary>
            <param name="profile">The profile of the mass.</param>
            <param name="height">The height of the mass from the bottom elevation.</param>
            <param name="material">The mass' material. The default is the built in mass material.</param>
            <param name="transform">The mass's transform.</param>
        </member>
        <member name="M:Elements.Mass.Volume">
            <summary>
            The volume of the mass.
            </summary>
        </member>
        <member name="T:Elements.Material">
            <summary>
            A material with red, green, blue, alpha, and metallic factor components.
            </summary>
        </member>
        <member name="P:Elements.Material.Id">
            <summary>
            The unique identifier of the material.
            </summary>
        </member>
        <member name="P:Elements.Material.Color">
            <summary>
            The RGBA Color of the material.
            </summary>
        </member>
        <member name="P:Elements.Material.SpecularFactor">
            <summary>
            The specular factor.
            </summary>
        </member>
        <member name="P:Elements.Material.GlossinessFactor">
            <summary>
            The glossiness factor.
            </summary>
        </member>
        <member name="P:Elements.Material.Name">
            <summary>
            The name of the material.
            </summary>
        </member>
        <member name="M:Elements.Material.#ctor(System.String,Elements.Geometry.Color,System.Single,System.Single)">
            <summary>
            Construct a material.
            </summary>
            <param name="name">The identifier of the material. Identifiers should be unique within a model.</param>
            <param name="color">The RGBA color of the material.</param>
            <param name="specularFactor">The specular component of the color. Between 0.0 and 1.0.</param>
            <param name="glossinessFactor">The glossiness component of the color. Between 0.0 and 1.0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specular or glossiness value is less than 0.0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specular or glossiness value is greater than 1.0.</exception>
        </member>
        <member name="M:Elements.Material.Equals(System.Object)">
            <summary>
            Is this material equal to the provided material?
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Elements.Material.GetHashCode">
            <summary>
            Get the hash code for the material.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Elements.Model">
            <summary>
            A container for Elements, Element Types, Materials, and Profiles.
            </summary>
        </member>
        <member name="P:Elements.Model.Version">
            <summary>
            The version of the assembly.
            </summary>
        </member>
        <member name="P:Elements.Model.Origin">
            <summary>
            The origin of the model.
            </summary>
        </member>
        <member name="P:Elements.Model.Elements">
            <summary>
            All Elements in the Model.
            </summary>
        </member>
        <member name="P:Elements.Model.Materials">
            <summary>
            All Materials in the Model.
            </summary>
        </member>
        <member name="P:Elements.Model.ElementTypes">
            <summary>
            All ElementTypes in the Model.
            </summary>
        </member>
        <member name="P:Elements.Model.Profiles">
            <summary>
            All Profiles in the model.
            </summary>
        </member>
        <member name="M:Elements.Model.#ctor">
            <summary>
            Construct an empty model.
            </summary>
        </member>
        <member name="M:Elements.Model.AddElement(Elements.Element)">
            <summary>
            Add an element to the model.
            </summary>
            <param name="element">The element to add to the model.</param>
            <exception cref="T:System.ArgumentException">Thrown when an element with the same Id already exists in the model.</exception>
        </member>
        <member name="M:Elements.Model.AddElements(System.Collections.Generic.IEnumerable{Elements.Element})">
            <summary>
            Add a collection of elements to the model.
            </summary>
            <param name="elements">The elements to add to the model.</param>
        </member>
        <member name="M:Elements.Model.GetElementById(System.Int32)">
            <summary>
            Get an Element by id from the Model.
            </summary>
            <param name="id">The identifier of the Element.</param>
            <returns>An Element or null if no Element can be found with the provided id.</returns>
        </member>
        <member name="M:Elements.Model.GetElementByName(System.String)">
            <summary>
            Get the first Element with the specified name.
            </summary>
            <param name="name"></param>
            <returns>An Element or null if no Element can be found with the provided name.</returns>
        </member>
        <member name="M:Elements.Model.GetMaterialByName(System.String)">
            <summary>
            Get a Material by name.
            </summary>
            <param name="name">The name of the Material.</param>
            <returns>A Material or null if no Material with the specified id can be found.</returns>
        </member>
        <member name="M:Elements.Model.GetElementTypeByName(System.String)">
            <summary>
            Get an ElementType by name.
            </summary>
            <param name="name">The name of the ElementType.</param>
            <returns>An ElementType or null if no ElementType with the specified name can be found.</returns>
        </member>
        <member name="M:Elements.Model.GetProfileByName(System.String)">
            <summary>
            Get a Profile by name.
            </summary>
            <param name="name">The name of the Profile.</param>
            <returns>A Profile or null if no Profile with the specified name can be found.</returns>
        </member>
        <member name="M:Elements.Model.ElementsOfType``1">
            <summary>
            Get all Elements of the specified Type.
            </summary>
            <typeparam name="T">The Type of element to return.</typeparam>
            <returns>A collection of Elements of the specified type.</returns>
        </member>
        <member name="M:Elements.Model.SaveGlb(System.String)">
            <summary>
            Save the Model to a binary glTF file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Elements.Model.SaveGltf(System.String)">
            <summary>
            Save the Model to a glTF file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Elements.Model.ToBase64String">
            <summary>
            Convert the Model to a base64 encoded string.
            </summary>
            <returns>A Base64 string representing the Model.</returns>
        </member>
        <member name="M:Elements.Model.ToJson(System.Boolean)">
            <summary>
            Serialize the model to JSON.
            </summary>
            <returns>A JSON string representing the Model.</returns>
        </member>
        <member name="M:Elements.Model.FromJson(System.String)">
            <summary>
            Deserialize a model from JSON.
            </summary>
            <param name="json">The JSON to deserialize to a Model.</param>
            <returns>A Model.</returns>
        </member>
        <member name="M:Elements.Model.FromIFC(System.String)">
            <summary>
            Construct a Model from an IFC STEP file.
            </summary>
            <param name="ifcPath">The path to the IFC file on disk.</param>
        </member>
        <member name="T:Elements.Opening">
            <summary>
            A rectangular opening in a wall or floor.
            </summary>
        </member>
        <member name="P:Elements.Opening.Name">
            <summary>
            The name of the opening.
            </summary>
        </member>
        <member name="P:Elements.Opening.Perimeter">
            <summary>
            The perimeter of the opening.
            </summary>
            <value>A polygon of Width and Height translated by X and Y.</value>
        </member>
        <member name="M:Elements.Opening.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an opening.
            </summary>
            <param name="x">The distance along the X axis of the transform of the host element to the center of the opening.</param>
            <param name="y">The distance along the Y axis of the transform of the host element to the center of the opening.</param>
            <param name="width">The width of the opening.</param>
            <param name="height">The height of the opening.</param>
        </member>
        <member name="M:Elements.Opening.#ctor(Elements.Geometry.Polygon,System.Double,System.Double)">
            <summary>
            Create an opening.
            </summary>
            <param name="perimeter">A polygon representing the perimeter of the opening.</param>
            <param name="x">The distance along the X axis of the transform of the host element to transform the perimeter.</param>
            <param name="y">The distance along the Y axis of the transform of the host element to transform the perimeter.</param>
        </member>
        <member name="T:Elements.Panel">
            <summary>
            A zero-thickness planar element defined by a perimeter.
            </summary>
        </member>
        <member name="P:Elements.Panel.Perimeter">
            <summary>
            The vertices forming the perimeter of the panel.
            </summary>
        </member>
        <member name="P:Elements.Panel.Geometry">
            <summary>
            The panel's geometry.
            </summary>
        </member>
        <member name="M:Elements.Panel.#ctor(Elements.Geometry.Vector3[],Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Create a panel.
            </summary>
            <param name="perimeter">The perimeter of the panel.</param>
            <param name="material">The panel's material</param>
            <param name="transform">The panel's transform.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided perimeter points are not coplanar.</exception>
        </member>
        <member name="M:Elements.Panel.#ctor(Elements.Geometry.Polygon,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Create a panel.
            </summary>
            <param name="perimeter">A planar polygon defining the perimeter.</param>
            <param name="material">The panel's material.</param>
            <param name="transform">The panel's transform.</param>
        </member>
        <member name="M:Elements.Panel.Normal">
            <summary>
            The normal of the panel, defined using the first 3 vertices in the location.
            </summary>
            <returns>The normal vector of the panel.</returns>
        </member>
        <member name="T:Elements.StringProperty">
            <summary>
            A property with a string value.
            </summary>
        </member>
        <member name="P:Elements.StringProperty.Value">
            <summary>
            The value of the Property.
            </summary>
        </member>
        <member name="P:Elements.StringProperty.UnitType">
            <summary>
            The UnitType of the Property.
            </summary>
        </member>
        <member name="P:Elements.StringProperty.Description">
            <summary>
            The description of the Property.
            </summary>
        </member>
        <member name="M:Elements.StringProperty.#ctor(System.String,Elements.UnitType,System.String)">
            <summary>
            Construct a Property.
            </summary>
            <param name="value">The value of the Property.</param>
            <param name="unitType">The unit type of the Property.</param>
            <param name="description">The description of the Property.</param>
        </member>
        <member name="T:Elements.NumericProperty">
            <summary>
            A property with a numeric value.
            </summary>
        </member>
        <member name="P:Elements.NumericProperty.Value">
            <summary>
            The value of the Property.
            </summary>
        </member>
        <member name="P:Elements.NumericProperty.UnitType">
            <summary>
            The UnitType of the Property.
            </summary>
        </member>
        <member name="P:Elements.NumericProperty.Description">
            <summary>
            The description of the Property.
            </summary>
        </member>
        <member name="M:Elements.NumericProperty.#ctor(System.Double,Elements.UnitType,System.String)">
            <summary>
            Construct a Property.
            </summary>
            <param name="value">The value of the Property.</param>
            <param name="unitType">The unit type of the Property.</param>
            <param name="description">The description of the Property.</param>
        </member>
        <member name="T:Elements.Serialization.ElementConverter">
            <summary>
            The serialization converter for elements.
            </summary>
        </member>
        <member name="M:Elements.Serialization.ElementConverter.#ctor">
            <summary>
            Construct an ElementConverter.
            </summary>
        </member>
        <member name="M:Elements.Serialization.ElementConverter.CanConvert(System.Type)">
            <summary>
            Can this converter converter objects of the provided type?
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="P:Elements.Serialization.ElementConverter.CanRead">
            <summary>
            Can this converter read json?
            </summary>
        </member>
        <member name="P:Elements.Serialization.ElementConverter.CanWrite">
            <summary>
            Can this converter write json?
            </summary>
        </member>
        <member name="M:Elements.Serialization.ElementConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <exception cref="T:System.Exception">Thrown when a type matching the deserialized type name cannot be found.</exception>
        </member>
        <member name="M:Elements.Serialization.ElementConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Elements.Serialization.ElementTypeConverter">
            <summary>
            Converter for objects of type ElementType.
            </summary>
        </member>
        <member name="M:Elements.Serialization.ElementTypeConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert an object of type objectType?
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="P:Elements.Serialization.ElementTypeConverter.CanWrite">
            <summary>
            Can this converter write json?
            </summary>
        </member>
        <member name="M:Elements.Serialization.ElementTypeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.ElementTypeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Elements.Serialization.ElementTypeToIdConverter">
            <summary>
            Converter for objects of ElementType.
            </summary>
        </member>
        <member name="M:Elements.Serialization.ElementTypeToIdConverter.#ctor(System.Collections.Generic.Dictionary{System.Int64,Elements.ElementType})">
            <summary>
            Construct an ElementTypeConverter.
            </summary>
            <param name="elementTypes"></param>
        </member>
        <member name="M:Elements.Serialization.ElementTypeToIdConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert and object of type objectType?
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.ElementTypeToIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.ElementTypeToIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Elements.Serialization.IFCExtensions">
            <summary>
            Extension methods for converting IFC types to Element types.
            </summary>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToFloor(IFC.IfcSlab)">
            <summary>
            Convert an IfcSlab to a Floor.
            </summary>
            <param name="slab">An IfcSlab.</param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToSpace(IFC.IfcSpace)">
            <summary>
            Convert and IfcSpace to a Space.
            </summary>
            <param name="space">An IfcSpace.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToWall(IFC.IfcWallStandardCase)">
            <summary>
            Convert an IfcWallStandardCase to a Wall.
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToBeam(IFC.IfcBeam)">
            <summary>
            Convert an IfcBeam to a beam.
            </summary>
            <param name="beam"></param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToColumn(IFC.IfcColumn)">
            <summary>
            Convert an IfcColumn to a Column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToOpening(IFC.IfcOpeningElement)">
            <summary>
            Convert an IfcOpening to an Opening.
            </summary>
            <param name="opening"></param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToICurve(IFC.IfcProfileDef)">
            <summary>
            Convert an IfcProfileDef to an iCurve.
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToICurve(IFC.IfcParameterizedProfileDef)">
            <summary>
            Convert an IfcParameterizedProfileDef to an ICurve
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToICurve(IFC.IfcArbitraryOpenProfileDef)">
            <summary>
            Convert an IfcArbitraryOpenProfileDef to an ICurve.
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToICurve(IFC.IfcArbitraryClosedProfileDef)">
            <summary>
            Convert an IfcArbitraryClosedProfileDef to an ICurve.
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToICurve(IFC.IfcCurve)">
            <summary>
            Convert an IfcCurve to in ICurve.
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToVector3(IFC.IfcCartesianPoint)">
            <summary>
            Convert an IfcCartesianPoint to a Vector3.
            </summary>
            <param name="cartesianPoint">An IfcCartesianPoint.</param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToVector3(System.Collections.Generic.List{IFC.IfcLengthMeasure})">
            <summary>
            Convert a collection of IfcLengthMeasure to a Vector3.
            </summary>
            <param name="measures">A collection of IfcLengthMeasure.</param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToPolygon(IFC.IfcPolyline,System.Boolean)">
            <summary>
            Convert an IfcPolyline to a Polygon.
            </summary>
            <param name="polyline">An IfcPolyline.</param>
            <param name="dropLastPoint">A flag indicating whether the last point should be included.</param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.IsClosed(IFC.IfcPolyline)">
            <summary>
            Check if an IfcPolyline is closed.
            </summary>
            <param name="pline"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.Equals(IFC.IfcCartesianPoint,IFC.IfcCartesianPoint)">
            <summary>
            Check if two IfcCartesianPoints have the same coordinates.
            </summary>
            <param name="point"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToTransform(IFC.IfcAxis2Placement3D)">
            <summary>
            Convert an IfcAxis2Placement3D to a Transform.
            </summary>
            <param name="cs">An IfcAxis2Placement3D.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToTransform(IFC.IfcAxis2Placement2D)">
            <summary>
            Convert an IfcAxis2Placement2D to a Transform.
            </summary>
            <param name="cs">An IfcAxis2Placement2D.</param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToVector3(IFC.IfcDirection)">
            <summary>
            Convert an IfcDirection to a Vector3.
            </summary>
            <param name="direction">An IfcDirection.</param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToTransform(IFC.IfcAxis2Placement)">
            <summary>
            Convert an IfcAxis2Placement to a Transform.
            </summary>
            <param name="placement">An IfcAxis2Placement.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToTransform(IFC.IfcLocalPlacement)">
            <summary>
            Convert an IfcLocalPlacement to a Transform.
            </summary>
            <param name="placement">An IfcLocalPlacement.</param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToTransform(IFC.IfcObjectPlacement)">
            <summary>
            Convert an IfcObjectPlacement to a Transform.
            </summary>
            <param name="placement">An IfcObjectPlacement.</param>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToPolygon(System.Collections.Generic.List{IFC.IfcCartesianPoint})">
            <summary>
            Convert a collection of IfcCartesianPoint to a Polygon.
            </summary>
            <param name="loop">A collection of IfcCartesianPoint.</param>
            <returns>A Polygon.</returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToLoop(System.Collections.Generic.List{IFC.IfcCartesianPoint},Elements.Geometry.Solids.Solid)">
            <summary>
            Convert a collection of IfcCartesianPoint to a Loop.
            </summary>
            <param name="loop">A collection of IfcCartesianPoint.</param>
            <param name="solid"></param>
            <returns>A Loop.</returns>
        </member>
        <member name="M:Elements.Serialization.IFCExtensions.ToPolygon(IFC.IfcPolyLoop)">
            <summary>
            Convert an IfcPolyloop to a Polygon.
            </summary>
            <param name="loop"></param>
            <returns>A Polygon.</returns>
        </member>
        <member name="T:Elements.Serialization.MaterialToIdConverter">
            <summary>
            Converts a Material to its identifier and back.
            </summary>
        </member>
        <member name="M:Elements.Serialization.MaterialToIdConverter.#ctor(System.Collections.Generic.Dictionary{System.Int64,Elements.Material})">
            <summary>
            Construct a MaterialConverter.
            </summary>
            <param name="materials">A collection of Materials.</param>
        </member>
        <member name="M:Elements.Serialization.MaterialToIdConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert an object of type objectType?
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="M:Elements.Serialization.MaterialToIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Elements.Serialization.MaterialToIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Elements.Serialization.ModelConverter">
            <summary>
            Convert a Model.
            </summary>
        </member>
        <member name="M:Elements.Serialization.ModelConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert and object of type objectType?
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="M:Elements.Serialization.ModelConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Elements.Serialization.ModelConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Elements.Serialization.SolidConverter">
            <summary>
            The SolidConverter is used to serialize and deserialize a Solid.
            Solids have a self-referencing structure which does not serialize
            effectively using the default serialization logic. The SolidConverter
            serializes and deserializes starting at the Solid's Faces, using
            Vertex and Edge ids to reconstruct and link the Edges and Vertices as necessary.
            </summary>
        </member>
        <member name="T:Elements.Space">
            <summary>
            A boundary of an occupiable region.
            </summary>
        </member>
        <member name="P:Elements.Space.Profile">
            <summary>
            The profile of the space.
            </summary>
        </member>
        <member name="P:Elements.Space.ProfileTransformed">
            <summary>
            The transformed profile of the space.
            </summary>
        </member>
        <member name="P:Elements.Space.Geometry">
            <summary>
            The space's geometry.
            </summary>
        </member>
        <member name="M:Elements.Space.#ctor(Elements.Geometry.Solids.Solid,Elements.Geometry.Transform)">
            <summary>
            Construct a space from a solid.
            </summary>
            <param name="geometry">The BRep which will be used to define the space.</param>
            <param name="transform">The Transform of the space.</param>
        </member>
        <member name="M:Elements.Space.#ctor(Elements.Geometry.Profile,System.Double,System.Double,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Construct a space.
            </summary>
            <param name="profile">The profile of the space.</param>
            <param name="height">The height of the space.</param>
            <param name="elevation">The elevation of the space.</param>
            <param name="material">The space's material.</param>
            <param name="transform">The space's transform.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the height is less than or equal to 0.0.</exception>
        </member>
        <member name="M:Elements.Space.#ctor(Elements.Geometry.Polygon,System.Double,System.Double,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Construct a Space.
            </summary>
            <param name="profile">The profile of the space.</param>
            <param name="height">The height of the space above the lower elevation.</param>
            <param name="elevation">The elevation of the space.</param>
            <param name="material">The space's material.</param>
            <param name="transform">The space's transform.</param>
        </member>
        <member name="M:Elements.Space.#ctor(Elements.Geometry.Solids.Solid[],Elements.Geometry.Transform,Elements.Material)">
            <summary>
            Construct a space from an array of solids.
            </summary>
            <param name="geometry">An array of solids which will be used to define the space.</param>
            <param name="transform">The space's Transform.</param>
            <param name="material">The space's Material.</param>
        </member>
        <member name="T:Elements.StructuralFraming">
            <summary>
            A structural element with a Profile swept along a curve or extruded.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.Profile">
            <summary>
            The cross-section profile of the framing element.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.ProfileTransformed">
            <summary>
            The cross-section profile of the framing element transformed by the element's transform.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.Curve">
            <summary>
            The center line of the framing element.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.StartSetback">
            <summary>
            The setback of the beam's extrusion at the start.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.EndSetback">
            <summary>
            The setback of the beam's extrusion at the end.
            </summary>
        </member>
        <member name="P:Elements.StructuralFraming.Geometry">
            <summary>
            The geometry of the StructuralFraming.
            </summary>
        </member>
        <member name="M:Elements.StructuralFraming.#ctor(Elements.Geometry.Interfaces.ICurve,Elements.Geometry.Profile,Elements.Material,System.Double,System.Double,Elements.Geometry.Transform)">
            <summary>
            Construct a beam.
            </summary>
            <param name="curve">The center line of the beam.</param>
            <param name="profile">The structural Profile of the beam.</param>
            <param name="material">The beam's material.</param>
            <param name="startSetback">The setback of the beam's extrusion at its start.</param>
            <param name="endSetback">The setback of the beam's extrusion at its end.</param>
            <param name="transform">The element's Transform.</param>
        </member>
        <member name="M:Elements.StructuralFraming.Volume">
            <summary>
            Calculate the volume of the element.
            </summary>
        </member>
        <member name="T:Elements.Truss">
            <summary>
            An aggregation of structural framing elements.
            </summary>
        </member>
        <member name="P:Elements.Truss.Elements">
            <summary>
            The elements aggregated by this element.
            </summary>
        </member>
        <member name="P:Elements.Truss.Start">
            <summary>
            The start of the truss.
            </summary>
        </member>
        <member name="P:Elements.Truss.End">
            <summary>
            The end of the truss.
            </summary>
        </member>
        <member name="P:Elements.Truss.Depth">
            <summary>
            The depth of the truss.
            </summary>
        </member>
        <member name="P:Elements.Truss.Divisions">
            <summary>
            The number of divisions in the truss.
            </summary>
        </member>
        <member name="P:Elements.Truss.TopChordProfile">
            <summary>
            The Profile used for members in the top chord of the truss.
            </summary>
        </member>
        <member name="P:Elements.Truss.BottomChordProfile">
            <summary>
            The Profile used for members in the bottom chord of the truss.
            </summary>
        </member>
        <member name="P:Elements.Truss.WebProfile">
            <summary>
            The Profile used for members in the web of the truss.
            </summary>
        </member>
        <member name="M:Elements.Truss.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double,System.Int32,Elements.Geometry.Profile,Elements.Geometry.Profile,Elements.Geometry.Profile,Elements.Material,System.Double,System.Double)">
            <summary>
            Construct a truss.
            </summary>
            <param name="start">The start of the truss.</param>
            <param name="end">The end of the truss.</param>
            <param name="depth">The depth of the truss.</param>
            <param name="divisions">The number of panels in the truss.</param>
            <param name="topChordProfile">The Profile to be used for the top chord.</param>
            <param name="bottomChordProfile">The Profile to be used for the bottom chord.</param>
            <param name="webProfile">The Profile to be used for the web.</param>
            <param name="material">The truss' material.</param>
            <param name="startSetback">A setback to apply to the start of all members of the truss.</param>
            <param name="endSetback">A setback to apply to the end of all members of the truss.</param>
        </member>
        <member name="T:Elements.UnitType">
            <summary>
            An enumeration of unit types for a numeric parameter.
            </summary>
        </member>
        <member name="F:Elements.UnitType.None">
            <summary>
            No unit assigned.
            </summary>
        </member>
        <member name="F:Elements.UnitType.Distance">
            <summary>
            A length in meters.
            </summary>
        </member>
        <member name="F:Elements.UnitType.Area">
            <summary>
            An area in square meters.
            </summary>
        </member>
        <member name="F:Elements.UnitType.Volume">
            <summary>
            A volume in cubic meters.
            </summary>
        </member>
        <member name="F:Elements.UnitType.Mass">
            <summary>
            A mass in kilograms.
            </summary>
        </member>
        <member name="F:Elements.UnitType.Force">
            <summary>
            A force in Newtons.
            </summary>
        </member>
        <member name="F:Elements.UnitType.Text">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="T:Elements.Wall">
            <summary>
            A wall is a building element which is used to enclose space.
            </summary>
        </member>
        <member name="P:Elements.Wall.Profile">
            <summary>
            The profile of the wall.
            </summary>
        </member>
        <member name="P:Elements.Wall.ProfileTransformed">
            <summary>
            The transformed profile of the wall.
            </summary>
        </member>
        <member name="P:Elements.Wall.CenterLine">
            <summary>
            The center line of the wall.
            </summary>
        </member>
        <member name="P:Elements.Wall.Height">
            <summary>
            The height of the wall.
            </summary>
        </member>
        <member name="P:Elements.Wall.ElementType">
            <summary>
            The WallType of the Wall.
            </summary>
        </member>
        <member name="P:Elements.Wall.Thickness">
            <summary>
            The thickness of the wall's extrusion.
            </summary>
        </member>
        <member name="P:Elements.Wall.Geometry">
            <summary>
            The wall's geometry.
            </summary>
        </member>
        <member name="P:Elements.Wall.Openings">
            <summary>
            An array of Openings in the wall.
            </summary>
        </member>
        <member name="M:Elements.Wall.#ctor(Elements.Geometry.Profile,System.Double,Elements.Material,Elements.Geometry.Transform)">
            <summary>
            Construct a wall by extruding a profile.
            </summary>
            <param name="profile"></param>
            <param name="height"></param>
            <param name="material"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Elements.Wall.#ctor(Elements.Geometry.Line,Elements.WallType,System.Double,Elements.Material,Elements.Opening[])">
            <summary>
            Construct a wall along a line.
            </summary>
            <param name="center_line">The center line of the wall.</param>
            <param name="element_type">The wall type of the wall.</param>
            <param name="height">The height of the wall.</param>
            <param name="openings">A collection of Openings in the wall.</param>
            <param name="material">The wall's material.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the height of the wall is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the Z components of wall's start and end points are not the same.</exception>
        </member>
        <member name="M:Elements.Wall.#ctor(Elements.Geometry.Solids.Solid[],Elements.WallType,System.Double,Elements.Geometry.Line,Elements.Geometry.Transform)">
            <summary>
            Construct a wall from a collection of geometry.
            </summary>
            <param name="geometry">The geometry of the wall.</param>
            <param name="center_line">The center line of the wall.</param>
            <param name="element_type">The wall type of the wall.</param>
            <param name="height">The height of the wall.</param>
            <param name="transform">The wall's Transform.</param>
        </member>
        <member name="T:Elements.WallType">
            <summary>
            A container for properties common to walls.
            </summary>
        </member>
        <member name="P:Elements.WallType.Thickness">
            <summary>
            The thickness of the Wall.
            </summary>
        </member>
        <member name="P:Elements.WallType.Type">
            <summary>
            The type of the wall type.
            </summary>
        </member>
        <member name="M:Elements.WallType.#ctor(System.String,System.Double,System.String)">
            <summary>
            Construct a wall type.
            </summary>
            <param name="name">The name of the wall type.</param>
            <param name="thickness">The thickness for all walls of this wall type.</param>
            <param name="description">The description of the wall type.</param>
            <returns></returns>
        </member>
        <member name="T:Hypar.Elements.Interfaces.IOpeningsProvider">
            <summary>
            Represents collection of Openings.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Interfaces.IOpeningsProvider.Openings">
            <summary>
            A collection of Openings which are transformed in the coordinate system of their host Element.
            </summary>
        </member>
    </members>
</doc>
