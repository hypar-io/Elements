<div id="model"></div>
</script>
<script type="module-shim">
  import { Scene, PerspectiveCamera, WebGLRenderer, HemisphereLight, AxesHelper, Color, GridHelper, Box3, sRGBEncoding, Vector3, DirectionalLight} from 'three';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';

  var scene = new Scene();
  var div = document.getElementById("model")
  var camera = new PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 );

  var renderer = new WebGLRenderer({ alpha: true, antialias: true });
  renderer.physicallyCorrectLights = true;
  renderer.outputEncoding = sRGBEncoding;
  renderer.setSize( div.clientWidth, div.clientHeight );
  renderer.setClearColor( 0x000000, 0 );

  div.appendChild( renderer.domElement );

  var controls = new OrbitControls( camera, renderer.domElement );

  var light = new HemisphereLight( 0xffffbb, 0x080820, 1 );
  scene.add( light );

  const directionalLight = new DirectionalLight( 0xffffff, 1.0 );
  scene.add( directionalLight );

  var axesHelper = new AxesHelper( 2 );
  scene.add( axesHelper );

  window.addEventListener( 'resize', onWindowResize, false );

  // Instantiate a loader
  var loader = new GLTFLoader();

  // Load a glTF resource
  loader.load(
    // resource URL
    '../models/{{id}}.glb',
    // called when the resource is loaded
    function ( gltf ) {
      scene.add( gltf.scene );
      fitCameraToObject(scene, 2.0, controls);
    },
    // called while loading is progressing
    function ( xhr ) {
      console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );
    },
    // called when loading has errors
    function ( error ) {
      console.log( 'An error happened' );
    }
  );

  var animate = function () {
    requestAnimationFrame( animate );
    renderer.render( scene, camera );
  };

  function onWindowResize(){
    var div = document.getElementById("model");
    camera.aspect = div.clientWidth / div.clientHeight;
    camera.updateProjectionMatrix();
    renderer.setSize( div.clientWidth, div.clientHeight );
  };

  const fitCameraToObject = function ( object, offset, orbitControls ) {

    let boundingBox = new Box3();
    boundingBox.setFromObject( object, true );

    const center = new Vector3();
    boundingBox.getCenter(center);
    const size = new Vector3();
    boundingBox.getSize(size);

    // get the max side of the bounding box
    const maxDim = Math.max( size.x, size.y, size.z ) * 3;
    const fov = camera.fov * ( Math.PI / 180 );
    let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) );
    
    // offset the camera as desired - usually a value of ~ 1.25 is good to prevent
    // object filling the whole canvas
    if( offset !== undefined && offset !== 0 ) {
      cameraZ *= offset;
    } 

    camera.position.set( center.x, center.y, cameraZ );
    
    // set the far plane of the camera so that it easily encompasses the whole object
    const minZ = boundingBox.min.z;
    const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ;

    camera.far = cameraToFarEdge * 3;
    camera.updateProjectionMatrix();

    if ( orbitControls !== undefined ) {

      // set camera to rotate around center of loaded object
      orbitControls.target = center;

      // prevent camera from zooming out far enough to create far plane cutoff
      orbitControls.maxDistance = cameraToFarEdge * 2;
    }
  };

  animate();
</script>