<div id="model"></div>
<script type="text/javascript" src="{{_rel}}js/three.js"></script>
<script type="text/javascript" src="{{_rel}}js/GLTFLoader.js"></script>
<script type="text/javascript" src="{{_rel}}js/OrbitControls.js"></script>
<script>
  var scene = new THREE.Scene();
  var div = document.getElementById("model")
  var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 );

  var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
  renderer.setSize( div.clientWidth, div.clientHeight );
  renderer.setClearColor( 0x000000, 0 );
  div.appendChild( renderer.domElement );

  var controls = new THREE.OrbitControls( camera, renderer.domElement );

  var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );
  scene.add( light );

  var axesHelper = new THREE.AxesHelper( 2 );
  scene.add( axesHelper );

  var size = 100;
  var divisions = 100;
  var colorCenterLine = new THREE.Color( 0xa0a0a0 );
  var colorGrid = new THREE.Color( 0xdbdbdb );
  var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid);
  scene.add( gridHelper );

  window.addEventListener( 'resize', onWindowResize, false );

  camera.position.z = 5;

  // Instantiate a loader
  var loader = new THREE.GLTFLoader();

  // Load a glTF resource
  loader.load(
    // resource URL
    '../models/{{id}}.glb',
    // called when the resource is loaded
    function ( gltf ) {

      scene.add( gltf.scene );

      gltf.animations; // Array<THREE.AnimationClip>
      gltf.scene; // THREE.Scene
      gltf.scenes; // Array<THREE.Scene>
      gltf.cameras; // Array<THREE.Camera>
      gltf.asset; // Object

      fitCameraToObject(gltf.scene, 2.0, controls)
    },
    // called while loading is progressing
    function ( xhr ) {

      console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

    },
    // called when loading has errors
    function ( error ) {

      console.log( 'An error happened' );

    }
  );

  var animate = function () {
    requestAnimationFrame( animate );

    // cube.rotation.x += 0.01;
    // cube.rotation.y += 0.01;

    renderer.render( scene, camera );
  };

  function onWindowResize(){
    var div = document.getElementById("model");
    camera.aspect = div.clientWidth / div.clientHeight;
    camera.updateProjectionMatrix();
    renderer.setSize( div.clientWidth, div.clientHeight );
  };

  const fitCameraToObject = function ( object, offset, orbitControls ) {

    const boundingBox = new THREE.Box3();
    boundingBox.setFromObject( object );

    const center = boundingBox.getCenter();
    const size = boundingBox.getSize();

    // get the max side of the bounding box
    const maxDim = Math.max( size.x, size.y, size.z ) * 3;
    const fov = this.camera.fov * ( Math.PI / 180 );
    let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) );
    
    // offset the camera as desired - usually a value of ~ 1.25 is good to prevent
    // object filling the whole canvas
    if( offset !== undefined && offset !== 0 ) cameraZ *= offset;

    camera.position.set( center.x, center.y, cameraZ );

    // set the far plane of the camera so that it easily encompasses the whole object
    const minZ = boundingBox.min.z;
    const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ;

    this.camera.far = cameraToFarEdge * 3;
    this.camera.updateProjectionMatrix();

    if ( orbitControls !== undefined ) {

      // set camera to rotate around center of loaded object
      orbitControls.target = center;

      // prevent camera from zooming out far enough to create far plane cutoff
      orbitControls.maxDistance = cameraToFarEdge * 2;
    }
  };

  animate();
</script>