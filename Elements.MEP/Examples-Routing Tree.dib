#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["C#","c#"],"languageName":"C#","name":"csharp"},{"aliases":["F#","f#"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"},{"aliases":["frontend"],"name":"vscode"}]}}

#!csharp

#r "nuget: Hypar.Elements.MEP,2.1.0-alpha.8"

#!markdown

Now let's look at a way of creating a Tree that is more automatic and magical. We will begin the process with "Start" points and a single "End" point, with the goal of connecting them all together into a sensible tree.

#!csharp

var startPoints = new Vector3[] {(-3,10), (-2,5) ,
                                    (0,9),(4,9),
                                    (4,6), (8,10)};
var endPoint = new Vector3(-5,-3);

var circlesAtPoints = startPoints.Select(p => new ModelCurve(new Circle(p, 0.1), BuiltInMaterials.XAxis));
return circlesAtPoints;

#!markdown

Now that we have our start point and our end points we want to create a tree that connects them.  To accomplish this we use two classes, `AdaptiveGrid` and `AdaptiveGraphRouting`.  The grid creates a set of vertices and edges that are connected to define all the possible paths a system might want to take.  So we build a 3D grid from some basic operations that has more possible routes than will be in the actual tree, and then we use the `AdaptiveGraphRouting` class to find the best routes between the inlet and outlet nodes.

#!csharp

using Elements.Geometry;
using Elements.Spatial.AdaptiveGrid;

// helper method to visualize the grid
public IEnumerable<Element> GetEdges( AdaptiveGrid grid) {
    var random = new Random();
    return grid.GetEdges().Select(e => new ModelCurve(grid.GetLine(e),random.NextMaterial()));
}

var allPoints = startPoints.Concat(new[] {endPoint}).ToList();

var grid = new AdaptiveGrid();
var boundingBox = new BBox3(allPoints);
var boundary = Polygon.Rectangle(boundingBox.Min, boundingBox.Max);
grid.AddFromPolygon(boundary, allPoints );

var edges = GetEdges(grid);
return edges.ToList();

#!markdown

This grid has been initialized with a boundary that wraps all of the points, and also we have added all of the points as "key points" which will split the grid boundary with all of the necessary intersecting edges to create a grid that is fully connected.  Now let's use this grid to find a route connecting all of these points to the start point.

#!csharp

 // For routing we use a special RoutingVertex object that can contain extra configuration for the routing algorithm.

 var endVertices = new List<RoutingVertex>();
 foreach(var p in startPoints) {
    if(grid.TryGetVertexIndex(p, out var index)) {
        endVertices.Add(new RoutingVertex(index, 0.5));
    }
 }

 grid.TryGetVertexIndex(endPoint, out var startIndex);

 var config = new RoutingConfiguration(turnCost: 1);
AdaptiveGraphRouting alg = new AdaptiveGraphRouting(grid, config);
var treeEdges = alg.BuildSpanningTree(endVertices, startIndex, new RoutingHintLine[] {}, TreeOrder.ClosestToFurthest);

#!markdown

This has given us a list of the edges that should be included in the Tree.  We can use this list to build a tree after we initialize a tree with the inlets and outlet locations.

#!csharp

using Elements.Flow;
var tree= new Tree(new[] {"Routing Tree"});
foreach(var p in startPoints) {
    tree.AddInlet(p);
}
tree.SetOutletPosition(endPoint);

tree.ConnectByAdaptiveGridRoute(grid, treeEdges, out _);
return tree;

#!markdown

Cool!  We basically built a tree supplying only the outlet and inlet points, and then we used the `AdaptiveGraphRouting` class to find the best routes between the inlet and outlet nodes.  This is a very powerful tool for creating trees that are more complex than the simple examples we have been using so far.  Let's take a look at how we might influence this tree too improve our results.

The basic strategy will be to use a RoutingHintLine to indicate that we want there to be a "preferred" route through the middle of the points, and have all of the points connect into that.

#!csharp

var hintLine = new RoutingHintLine(new Polyline(new[] {new Vector3(-4,7), new Vector3(10,7)}), 0.1, 0.1, true, true);
var hintLine2 = new RoutingHintLine(new Polyline(new[] {new Vector3(1,7), new Vector3(1,-5)}), 0.1, 0.1, true, true);

// comment or uncomment the the lines below to see the results
var hintLines = new List<RoutingHintLine>{
                                hintLine, 
                                // hintLine2
};

var newGrid = new AdaptiveGrid();
newGrid.AddFromPolygon(boundary, allPoints);

foreach(var hint in hintLines) {
    newGrid.AddVertices(hint.Polyline.Vertices, AdaptiveGrid.VerticesInsertionMethod.ConnectCutAndExtend);
}

var newAlg = new AdaptiveGraphRouting(newGrid, config);

return newAlg.RenderElements(hintLines, allPoints);

#!markdown

Here we see that this grid has been constructed with an additional line that will be used to influence the routing.  The adaptive grid class itself is not responsible for managing the weights/influence of the edges, that is done by the routing algorithm itself.  This is why we use the routing algorithm `RenderElements` method to show us the state of the grid with the favorable routes highlighted in green.  

Next we use the same steps as above to get a tree that is the result of running the routing with the new hint line included.

#!csharp

treeEdges = newAlg.BuildSpanningTree(endVertices, startIndex, hintLines, TreeOrder.ClosestToFurthest);
var newTree = new Tree(new[] {"Routing Tree"});
foreach(var p in startPoints) {
    newTree.AddInlet(p);
}
newTree.SetOutletPosition(endPoint);

newTree.ConnectByAdaptiveGridRoute(newGrid, treeEdges, out var failed);
Console.WriteLine($"Failed: {failed.Count}");
return newTree;

#!markdown

 It's worth noting that this works well for small/simple cases, but in other cases this simple approach can still yield unexpected results.  The algorithm is always trying to find the minimum spanning tree, and when there are so many options it's possible that there is a better choice that ignored the hint line.  For these cases a different approach may be necessary.  To create a more sparse grid the approach would be to add all of the hint lines first and then add the other vertices with connections to those hint lines.  This is a more "manual" approach to building a tree that still takes advantage of the routing algorithm but may give better results because the grid is more "sparse".
