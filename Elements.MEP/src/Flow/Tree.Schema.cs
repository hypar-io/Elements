//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Spatial;
using Elements.Validators;
using Elements.Serialization.JSON;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Elements.Flow
{
    /// <summary>A many to one tree network.</summary>
    [JsonConverter(typeof(Elements.Serialization.JSON.JsonInheritanceConverter), "discriminator")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Tree : GeometricElement
    {
        /// <summary>
        /// Sets all of the basic properties of the tree during deserialization
        /// runs InitializeTree() to set the tree's internal properties.
        /// </summary>
        /// <param name="internalNodes"></param>
        /// <param name="outlet"></param>
        /// <param name="inlets"></param>
        /// <param name="connections"></param>
        /// <param name="outletFlow"></param>
        /// <param name="regionReferences"></param>
        /// <param name="purpose"></param>
        /// <param name="transform"></param>
        /// <param name="material"></param>
        /// <param name="representation"></param>
        /// <param name="isElementDefinition"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        [JsonConstructor]
        public Tree(IList<Node> @internalNodes,
                    Trunk @outlet,
                    IList<Leaf> @inlets,
                    IList<Connection> @connections,
                    double @outletFlow,
                    IList<string> @regionReferences,
                    string @purpose,
                    Transform @transform = null,
                    Material @material = null,
                    Representation @representation = null,
                    bool @isElementDefinition = false,
                    System.Guid @id = default,
                    string @name = null)
            : base(transform, material, representation, isElementDefinition, id, name)
        {
            this.InternalNodes = @internalNodes;
            this.Outlet = @outlet;
            this.Inlets = @inlets;
            this.Connections = @connections;
            this.OutletFlow = @outletFlow;
            this.RegionReferences = @regionReferences;
            this.Purpose = @purpose;
            InitializeTree();
        }

        /// <summary>
        /// Create an empty tree.  It is not recommended to use this constructor.
        /// </summary>
        public Tree()
            : base()
        {
        }

        /// <summary>The internal nodes of the tree.</summary>
        [JsonProperty("Internal Nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Node> InternalNodes { get; set; }

        /// <summary>The singular trunk port of the tree.</summary>
        [JsonProperty("Outlet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Trunk Outlet { get; set; }

        /// <summary>The many leaf ports of the tree.</summary>
        [JsonProperty("Inlets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Leaf> Inlets { get; set; }

        /// <summary>All of the internal connections.</summary>
        [JsonProperty("Connections", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Connection> Connections { get; set; }

        /// <summary>The total outlet flow.</summary>
        [JsonProperty("Outlet Flow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OutletFlow { get; set; }

        /// <summary>A list of region references served by this flow tree.</summary>
        [JsonProperty("RegionReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<string> RegionReferences { get; set; }

        /// <summary>The purpose of this flow tree.</summary>
        [JsonProperty("Purpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Purpose { get; set; }


    }
}