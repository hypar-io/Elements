{
  "api/Elements.GeoJSON.Position.html": {
    "href": "api/Elements.GeoJSON.Position.html",
    "title": "Class Position | Hypar Docs",
    "keywords": "Class Position A position. Inheritance System.Object Position Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Position : object Constructors Position(Double, Double) Declaration public Position(double latitude, double longitude) Parameters Type Name Description System.Double latitude System.Double longitude Properties Latitude The latitude in decimal degrees. Declaration public double Latitude { get; set; } Property Value Type Description System.Double Longitude The longitude in decimal degrees. Declaration public double Longitude { get; set; } Property Value Type Description System.Double Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 ToVectorMeters() Convert the position to a vector. Declaration public Vector3 ToVectorMeters() Returns Type Description Vector3"
  },
  "api/Elements.Geometry.BBox3.html": {
    "href": "api/Elements.Geometry.BBox3.html",
    "title": "Class BBox3 | Hypar Docs",
    "keywords": "Class BBox3 An axis-aligned bounding box. Inheritance System.Object BBox3 Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class BBox3 : object Constructors BBox3(Profile) Create the BBox3 for a Profile. Declaration public BBox3(Profile profile) Parameters Type Name Description Profile profile The Profile. BBox3(Vector3, Vector3) Create a bounding box specifying minimum and maximum extents. Declaration public BBox3(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min The minimum extent of the bounding box. Vector3 max The maximum extent of the bounding box. BBox3(IList<Polygon>) Create a bounding box for a collection of polygons. Declaration public BBox3(IList<Polygon> polygons) Parameters Type Name Description IList < Polygon > polygons BBox3(IList<Vector3>) Construct a bounding box from an array of points. Declaration public BBox3(IList<Vector3> points) Parameters Type Name Description IList < Vector3 > points The points which are contained within the bounding box. Properties Max The maximum extent of the bounding box. Declaration public Vector3 Max { get; } Property Value Type Description Vector3 Min The minimum extent of the bounding box. Declaration public Vector3 Min { get; } Property Value Type Description Vector3"
  },
  "api/Elements.Geometry.Bezier.html": {
    "href": "api/Elements.Geometry.Bezier.html",
    "title": "Class Bezier | Hypar Docs",
    "keywords": "Class Bezier A Bezier curve. Inheritance System.Object Curve Bezier Implements ICurve Inherited Members Curve.MinimumChordLength Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Bezier : Curve, ICurve Constructors Bezier(List<Vector3>, FrameType) Construct a bezier. Declaration public Bezier(List<Vector3> controlPoints, FrameType frameType = FrameType.Frenet) Parameters Type Name Description List < Vector3 > controlPoints The control points of the curve. FrameType frameType The frame type to use when calculating frames. Properties ControlPoints A collection of points describing the bezier's frame. https://en.wikipedia.org/wiki/B%C3%A9zier_curve Declaration public List<Vector3> ControlPoints { get; set; } Property Value Type Description List < Vector3 > FrameType The frame type to use when calculating transforms along the curve. Declaration public FrameType FrameType { get; set; } Property Value Type Description FrameType Methods AccelerationAt(Double) Get the acceleration of the curve at parameter u. Declaration public Vector3 AccelerationAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0. Returns Type Description Vector3 BinormalAt(Double) Get the binormal to the curve at parameter u. Declaration public Vector3 BinormalAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0. Returns Type Description Vector3 Bounds() Get the bounding box of the curve's control points. Declaration public override BBox3 Bounds() Returns Type Description BBox3 Overrides Curve.Bounds() Frames(Double, Double) Get a collection of transforms along the curve. Declaration public override Transform[] Frames(double startSetback = null, double endSetback = null) Parameters Type Name Description System.Double startSetback System.Double endSetback Returns Type Description Transform [] Overrides Curve.Frames(Double, Double) Length() Get a piecewise linear approximation of the length of the curve. https://en.wikipedia.org/wiki/Arc_length Declaration public override double Length() Returns Type Description System.Double Overrides Curve.Length() NormalAt(Double) Get the normal of the curve at parameter u. Declaration public Vector3 NormalAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0. Returns Type Description Vector3 PointAt(Double) Get the point on the curve at parameter u. Declaration public override Vector3 PointAt(double u) Parameters Type Name Description System.Double u The parameter between 0.0 and 1.0. Returns Type Description Vector3 Overrides Curve.PointAt(Double) TangentAt(Double) Get the tangent to the curve at parameter u. Declaration public Vector3 TangentAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0. Returns Type Description Vector3 TransformAt(Double) Get the transform on the curve at parameter u. The Z axis of the transform will be the inverse of the tangent to the curve. The X axis of the transform will be computed by taking the cross product of the tanget and the +Z axis. Declaration public override Transform TransformAt(double u) Parameters Type Name Description System.Double u The parameter along the curve between 0.0 and 1.0. Returns Type Description Transform Overrides Curve.TransformAt(Double) VelocityAt(Double) Get the velocity to the curve at parameter u. Declaration public Vector3 VelocityAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0. Returns Type Description Vector3 Implements ICurve"
  },
  "api/Elements.Validators.ProfileValidator.html": {
    "href": "api/Elements.Validators.ProfileValidator.html",
    "title": "Class ProfileValidator | Hypar Docs",
    "keywords": "Class ProfileValidator Inheritance System.Object ProfileValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class ProfileValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Validators.Validator.html": {
    "href": "api/Elements.Validators.Validator.html",
    "title": "Class Validator | Hypar Docs",
    "keywords": "Class Validator The supplier of validation logic for for element construction. Inheritance System.Object Validator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class Validator : object Properties Instance The validator singleton. Declaration public static Validator Instance { get; } Property Value Type Description Validator Methods GetFirstValidatorForType<T>() Gets the first validator for the supplied T. Declaration public IValidator GetFirstValidatorForType<T>() Returns Type Description IValidator A validator for T, or null if no validator for T can be found. Type Parameters Name Description T"
  },
  "api/Elements.Validators.Vector3Validator.html": {
    "href": "api/Elements.Validators.Vector3Validator.html",
    "title": "Class Vector3Validator | Hypar Docs",
    "keywords": "Class Vector3Validator Inheritance System.Object Vector3Validator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class Vector3Validator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Brace.html": {
    "href": "api/Elements.Brace.html",
    "title": "Class Brace | Hypar Docs",
    "keywords": "Class Brace A Brace is a structural framing element which is often diagonal. Inheritance System.Object Element GeometricElement StructuralFraming Brace Inherited Members StructuralFraming.Curve StructuralFraming.StartSetback StructuralFraming.EndSetback StructuralFraming.Profile StructuralFraming.Rotation StructuralFraming.Volume() StructuralFraming.ProfileTransformed() StructuralFraming.UpdateRepresentations() GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Brace : StructuralFraming Constructors Brace(Curve, Profile, Material, Double, Double, Double, Transform, Guid, String) Construct a Brace. Declaration public Brace(Curve curve, Profile profile, Material material, double startSetback = 0, double endSetback = 0, double rotation = 0, Transform transform = null, Guid id = null, string name = null) Parameters Type Name Description Curve curve The brace's center line. Profile profile The brace's profile. Material material The brace's material. System.Double startSetback The setback of the brace's geometry at the start. System.Double endSetback The setback of the brace's geometry at the end. System.Double rotation An optional rotation of the beam's profile around its axis. Transform transform The brace's transform. Guid id The brace's id. System.String name The brace's name."
  },
  "api/Elements.Geometry.Plane.html": {
    "href": "api/Elements.Geometry.Plane.html",
    "title": "Class Plane | Hypar Docs",
    "keywords": "Class Plane A plane. Inheritance System.Object Plane Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Plane : IEquatable<Plane> Constructors Plane(Vector3, Vector3) Declaration public Plane(Vector3 origin, Vector3 normal) Parameters Type Name Description Vector3 origin Vector3 normal Plane(Vector3, Vector3, Vector3) Construct a plane by three points. The plane is constructed as a->b * b->c. Declaration public Plane(Vector3 a, Vector3 b, Vector3 c) Parameters Type Name Description Vector3 a Vector3 b Vector3 c Plane(Vector3, IList<Vector3>) Construct a plane. Only the first three points of the points array will be used. Declaration public Plane(Vector3 origin, IList<Vector3> points) Parameters Type Name Description Vector3 origin The origin of the plane. IList < Vector3 > points An array of vectors to be used to determine the normal of the plane. Properties Normal The normal of the plane. Declaration public Vector3 Normal { get; set; } Property Value Type Description Vector3 Origin The origin of the plane. Declaration public Vector3 Origin { get; set; } Property Value Type Description Vector3 Methods Equals(Plane) Is this plane equal to the provided plane? Declaration public bool Equals(Plane other) Parameters Type Name Description Plane other The plane to test. Returns Type Description System.Boolean Returns true if the two planes are equal, otherwise false."
  },
  "api/Elements.Geometry.Polygon.html": {
    "href": "api/Elements.Geometry.Polygon.html",
    "title": "Class Polygon | Hypar Docs",
    "keywords": "Class Polygon A closed planar polygon. Inheritance System.Object Curve Polyline Polygon Implements ICurve Inherited Members Polyline.Vertices Polyline.Start Polyline.End Polyline.PointAt(Double) Polyline.TransformAt(Double) Polyline.Bounds() Polyline.Plane() Polyline.CheckCoincidenceAndThrow(IList<Vector3>) Curve.MinimumChordLength Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Polygon : Polyline, ICurve Constructors Polygon(IList<Vector3>) Declaration public Polygon(IList<Vector3> vertices) Parameters Type Name Description IList < Vector3 > vertices Methods Area() Calculate the polygon's area. Declaration public double Area() Returns Type Description System.Double Centroid() Calculate the centroid of the polygon. Declaration public Vector3 Centroid() Returns Type Description Vector3 Circle(Double, Int32) Create a circle. Declaration public static Polygon Circle(double radius = 1, int divisions = 10) Parameters Type Name Description System.Double radius The radius of the circle. System.Int32 divisions The number of divisions of the circle. Returns Type Description Polygon A circle as a Polygon tessellated into the specified number of divisions. Contains(Polygon) Tests if the supplied Polygon is within this Polygon without coincident edges when compared on a shared plane. Declaration public bool Contains(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare to this Polygon. Returns Type Description System.Boolean Returns true if every vertex of the supplied Polygon is within this Polygon when compared on a shared plane. Returns false if the supplied Polygon is not entirely within this Polygon, or if the supplied Polygon is null. Contains(Vector3) Tests if the supplied Vector3 is within this Polygon without coincidence with an edge when compared on a shared plane. Declaration public bool Contains(Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Vector3 is within this Polygon when compared on a shared plane. Returns false if the Vector3 is outside this Polygon or if the supplied Vector3 is null. Covers(Polygon) Tests if the supplied Polygon is within this Polygon with or without edge coincident vertices when compared on a shared plane. Declaration public bool Covers(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare to this Polygon. Returns Type Description System.Boolean Returns true if every vertex of the supplied Polygon is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if any vertex of the supplied Polygon is outside this Polygon, or if the supplied Polygon is null. Covers(Vector3) Tests if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane. Declaration public bool Covers(Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if the supplied Vector3 is outside this Polygon, or if the supplied Vector3 is null. Difference(Polygon) Constructs the geometric difference between this Polygon and the supplied Polygon. Declaration public IList<Polygon> Difference(Polygon polygon) Parameters Type Name Description Polygon polygon The intersecting Polygon. Returns Type Description IList < Polygon > Returns a list of Polygons representing the subtraction of the supplied Polygon from this Polygon. Returns null if the area of this Polygon is entirely subtracted. Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect. Difference(IList<Polygon>) Constructs the geometric difference between this Polygon and the supplied Polygons. Declaration public IList<Polygon> Difference(IList<Polygon> difPolys) Parameters Type Name Description IList < Polygon > difPolys The list of intersecting Polygons. Returns Type Description IList < Polygon > Returns a list of Polygons representing the subtraction of the supplied Polygons from this Polygon. Returns null if the area of this Polygon is entirely subtracted. Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect. Disjoint(Polygon) Tests if the supplied Polygon and this Polygon are coincident in any way when compared on a shared plane. Declaration public bool Disjoint(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Polygon do not intersect or touch this Polygon when compared on a shared plane or if the supplied Polygon is null. Disjoint(Vector3) Tests if the supplied Vector3 is outside this Polygon when compared on a shared plane. Declaration public bool Disjoint(Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Vector3 is outside this Polygon when compared on a shared plane or if the supplied Vector3 is null. Equals(Object) Is this polygon equal to the provided polygon? Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Frames(Double, Double) Get the transforms used to transform a Profile extruded along this Polyline. Declaration public override Transform[] Frames(double startSetback, double endSetback) Parameters Type Name Description System.Double startSetback System.Double endSetback Returns Type Description Transform [] Overrides Polyline.Frames(Double, Double) GetHashCode() Get the hash code for the polygon. Declaration public override int GetHashCode() Returns Type Description System.Int32 Intersection(Polygon) Constructs the Polygon intersections between this Polygon and the supplied Polygon. Declaration public IList<Polygon> Intersection(Polygon polygon) Parameters Type Name Description Polygon polygon The intersecting Polygon. Returns Type Description IList < Polygon > Returns a list of Polygons representing the intersection of this Polygon with the supplied Polygon. Returns null if the two Polygons do not intersect. Intersects(Polygon) Tests if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane. Declaration public bool Intersects(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare with this Polygon. Returns Type Description System.Boolean Returns true if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane. Returns false if the supplied Polygon does not share an area with this Polygon or if the supplied Polygon is null. L(Double, Double, Double) Create an L. Declaration public static Polygon L(double width, double length, double thickness) Parameters Type Name Description System.Double width The width of the L. System.Double length The length of the L. System.Double thickness The thickness of the L. Returns Type Description Polygon Length() Calculate the length of the polygon. Declaration public override double Length() Returns Type Description System.Double Overrides Polyline.Length() Ngon(Int32, Double) Create an ngon. Declaration public static Polygon Ngon(int sides, double radius = 0.5) Parameters Type Name Description System.Int32 sides The number of side of the Polygon. System.Double radius The radius of the circle in which the Ngon is inscribed. Returns Type Description Polygon A Polygon with the specified number of sides. Offset(Double) Offset this polygon by the specified amount. Declaration public Polygon[] Offset(double offset) Parameters Type Name Description System.Double offset The amount to offset. Returns Type Description Polygon [] A new Polygon offset by offset. Project(Plane) Project the specified vector onto the plane. Declaration public Polygon Project(Plane p) Parameters Type Name Description Plane p Returns Type Description Polygon ProjectAlong(Vector3, Plane) Project this Polygon onto a Plane along a vector. Declaration public Polygon ProjectAlong(Vector3 direction, Plane p) Parameters Type Name Description Vector3 direction The projection vector. Plane p The Plane onto which to project the Polygon. Returns Type Description Polygon A Polygon projected onto the Plane. Rectangle(Vector3, Vector3) Create a rectangle. Declaration public static Polygon Rectangle(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min The minimum coordinate. Vector3 max The maximum coordinate. Returns Type Description Polygon A rectangular Polygon with its lower left corner at min and its upper right corner at max. Rectangle(Double, Double) Create a rectangle. Declaration public static Polygon Rectangle(double width, double height) Parameters Type Name Description System.Double width The width of the rectangle. System.Double height The height of the rectangle. Returns Type Description Polygon A rectangular Polygon centered around origin. Reversed() Reverse the direction of a polygon. Declaration public Polygon Reversed() Returns Type Description Polygon Returns a new Polygon whose vertices are reversed. Segments() Get a collection a lines representing each segment of this polyline. Declaration public override Line[] Segments() Returns Type Description Line [] A collection of Lines. Overrides Polyline.Segments() ToString() The string representation of the Polygon. Declaration public override string ToString() Returns Type Description System.String A string containing the string representations of this Polygon's vertices. Overrides Polyline.ToString() Touches(Polygon) Tests if at least one point of an edge of the supplied Polygon is shared with an edge of this Polygon without the Polygons interesecting when compared on a shared plane. Declaration public bool Touches(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Polygon shares at least one edge point with this Polygon without the Polygons intersecting when compared on a shared plane. Returns false if the Polygons intersect, are disjoint, or if the supplied Polygon is null. Touches(Vector3) Tests if the supplied Vector3 is coincident with an edge of this Polygon when compared on a shared plane. Declaration public bool Touches(Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Vector3 coincides with an edge of this Polygon when compared on a shared plane. Returns false if the supplied Vector3 is not coincident with an edge of this Polygon, or if the supplied Vector3 is null. Transform(Transform) Transform this polygon in place. Declaration public void Transform(Transform t) Parameters Type Name Description Transform t The transform. Union(Polygon) Constructs the geometric union between this Polygon and the supplied Polygon. Declaration public Polygon Union(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to be combined with this Polygon. Returns Type Description Polygon Returns a single Polygon from a successful union. Returns null if a union cannot be performed on the two Polygons. Union(IList<Polygon>) Constructs the geometric union between this Polygon and the supplied list of Polygons. Declaration public Polygon Union(IList<Polygon> polygons) Parameters Type Name Description IList < Polygon > polygons The list of Polygons to be combined with this Polygon. Returns Type Description Polygon Returns a single Polygon from a successful union. Returns null if a union cannot be performed on the complete list of Polygons. XOR(Polygon) Returns Polygons representing the symmetric difference between this Polygon and the supplied Polygon. Declaration public IList<Polygon> XOR(Polygon polygon) Parameters Type Name Description Polygon polygon The intersecting polygon. Returns Type Description IList < Polygon > Returns a list of Polygons representing the symmetric difference of this Polygon and the supplied Polygon. Returns a representation of this Polygon and the supplied Polygon if the Polygons do not intersect. Operators Implicit(Polygon to Profile) Implicitly convert a polygon to a profile. Declaration public static implicit operator Profile(Polygon p) Parameters Type Name Description Polygon p The polygon to convert. Returns Type Description Profile Implements ICurve"
  },
  "api/Elements.Geometry.Profiles.HSSPipeProfile.html": {
    "href": "api/Elements.Geometry.Profiles.HSSPipeProfile.html",
    "title": "Class HSSPipeProfile | Hypar Docs",
    "keywords": "Class HSSPipeProfile Inheritance System.Object Element Profile HSSPipeProfile Inherited Members Profile.Perimeter Profile.Voids Profile.Reversed() Profile.Area() Profile.Transform(Transform) Element.Id Element.Name Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public class HSSPipeProfile : Profile Constructors HSSPipeProfile(String, Guid, Double, Double, Double) Declaration public HSSPipeProfile(string name, Guid id, double outerDiam, double innerDiam, double t) Parameters Type Name Description System.String name Guid id System.Double outerDiam System.Double innerDiam System.Double t Properties A Declaration public double A { get; } Property Value Type Description System.Double I Declaration public double I { get; } Property Value Type Description System.Double InnerDiam Declaration public double InnerDiam { get; } Property Value Type Description System.Double J Declaration public double J { get; } Property Value Type Description System.Double OuterDiam Declaration public double OuterDiam { get; } Property Value Type Description System.Double r Declaration public double r { get; } Property Value Type Description System.Double S Declaration public double S { get; } Property Value Type Description System.Double t Declaration public double t { get; } Property Value Type Description System.Double wt Declaration public double wt { get; } Property Value Type Description System.Double"
  },
  "api/Elements.BuiltInMaterials.html": {
    "href": "api/Elements.BuiltInMaterials.html",
    "title": "Class BuiltInMaterials | Hypar Docs",
    "keywords": "Class BuiltInMaterials Built in materials. Inheritance System.Object BuiltInMaterials Namespace : Elements Assembly : Hypar.Elements.dll Syntax public static class BuiltInMaterials : object Fields Concrete Concrete. Declaration public static Material Concrete Field Value Type Description Material Properties Black Black Declaration public static Material Black { get; } Property Value Type Description Material Default The default material. Declaration public static Material Default { get; } Property Value Type Description Material Edges Edges Declaration public static Material Edges { get; } Property Value Type Description Material EdgesHighlighted Edges Highlighted Declaration public static Material EdgesHighlighted { get; } Property Value Type Description Material Glass Glass. Declaration public static Material Glass { get; } Property Value Type Description Material Mass Default material used to represent masses. Declaration public static Material Mass { get; } Property Value Type Description Material Points Points Declaration public static Material Points { get; } Property Value Type Description Material Steel Steel. Declaration public static Material Steel { get; } Property Value Type Description Material Topography Topography Declaration public static Material Topography { get; } Property Value Type Description Material Trans Fully transparent material. Declaration public static Material Trans { get; } Property Value Type Description Material Void Void Declaration public static Material Void { get; } Property Value Type Description Material Wood Wood. Declaration public static Material Wood { get; } Property Value Type Description Material XAxis X Axis Declaration public static Material XAxis { get; } Property Value Type Description Material YAxis Y Axis Declaration public static Material YAxis { get; } Property Value Type Description Material ZAxis Z Axis Declaration public static Material ZAxis { get; } Property Value Type Description Material"
  },
  "api/Elements.Geometry.Colors.html": {
    "href": "api/Elements.Geometry.Colors.html",
    "title": "Class Colors | Hypar Docs",
    "keywords": "Class Colors Commonly used colors. Inheritance System.Object Colors Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public static class Colors : object Properties Aqua Aqua Declaration public static Color Aqua { get; } Property Value Type Description Color Beige Beige Declaration public static Color Beige { get; } Property Value Type Description Color Black Black Declaration public static Color Black { get; } Property Value Type Description Color Blue Blue Declaration public static Color Blue { get; } Property Value Type Description Color Brown Brown Declaration public static Color Brown { get; } Property Value Type Description Color Cobalt Cobalt Declaration public static Color Cobalt { get; } Property Value Type Description Color Coral Coral Declaration public static Color Coral { get; } Property Value Type Description Color Crimson Crimson Declaration public static Color Crimson { get; } Property Value Type Description Color Cyan Cyan Declaration public static Color Cyan { get; } Property Value Type Description Color Darkgray Dark Gray Declaration public static Color Darkgray { get; } Property Value Type Description Color Emerald Emerald Declaration public static Color Emerald { get; } Property Value Type Description Color Granite Granite Declaration public static Color Granite { get; } Property Value Type Description Color Gray Gray Declaration public static Color Gray { get; } Property Value Type Description Color Green Green Declaration public static Color Green { get; } Property Value Type Description Color Lavender Lavender Declaration public static Color Lavender { get; } Property Value Type Description Color Lime Lime Declaration public static Color Lime { get; } Property Value Type Description Color Magenta Magenta Declaration public static Color Magenta { get; } Property Value Type Description Color Maroon Maroon Declaration public static Color Maroon { get; } Property Value Type Description Color Mint Mint Declaration public static Color Mint { get; } Property Value Type Description Color Navy Navy Declaration public static Color Navy { get; } Property Value Type Description Color Olive Olive Declaration public static Color Olive { get; } Property Value Type Description Color Orange Orange Declaration public static Color Orange { get; } Property Value Type Description Color Pink Pink Declaration public static Color Pink { get; } Property Value Type Description Color Purple Purple Declaration public static Color Purple { get; } Property Value Type Description Color Red Red Declaration public static Color Red { get; } Property Value Type Description Color Sand Sand Declaration public static Color Sand { get; } Property Value Type Description Color Stone Stone Declaration public static Color Stone { get; } Property Value Type Description Color Teal Teal Declaration public static Color Teal { get; } Property Value Type Description Color White White Declaration public static Color White { get; } Property Value Type Description Color Yellow Yellow Declaration public static Color Yellow { get; } Property Value Type Description Color"
  },
  "api/Elements.Geometry.Interfaces.ICurve.html": {
    "href": "api/Elements.Geometry.Interfaces.ICurve.html",
    "title": "Interface ICurve | Hypar Docs",
    "keywords": "Interface ICurve ICurve is implemented by all curve types. Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ICurve Methods Bounds() Get the bounding box of this curve. Declaration BBox3 Bounds() Returns Type Description BBox3 Frames(Double, Double) Get a collection of Transforms which represent frames along this ICurve. Declaration Transform[] Frames(double startSetback = 0, double endSetback = 0) Parameters Type Name Description System.Double startSetback The offset from the start of the ICurve. System.Double endSetback The offset from the end of the ICurve. Returns Type Description Transform [] A collection of Transforms. Length() Calculate the length of the curve. Declaration double Length() Returns Type Description System.Double PointAt(Double) Get a point along the curve at parameter u. Declaration Vector3 PointAt(double u) Parameters Type Name Description System.Double u A parameter on the curve between 0.0 and 1.0. Returns Type Description Vector3 The point on the curve. TransformAt(Double) Get the frame from the curve at parameter u. Declaration Transform TransformAt(double u) Parameters Type Name Description System.Double u A parameter on the curve between 0.0 and 1.0. Returns Type Description Transform The transform of the curve at parameter u, with the transform's Z axis tangent to the curve."
  },
  "api/Elements.Geometry.Polyline.html": {
    "href": "api/Elements.Geometry.Polyline.html",
    "title": "Class Polyline | Hypar Docs",
    "keywords": "Class Polyline A planar continuous set of lines. Inheritance System.Object Curve Polyline Polygon Implements ICurve Inherited Members Curve.MinimumChordLength Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Polyline : Curve, ICurve Constructors Polyline(IList<Vector3>) Declaration public Polyline(IList<Vector3> vertices) Parameters Type Name Description IList < Vector3 > vertices Properties End The end of the polyline. Declaration public Vector3 End { get; } Property Value Type Description Vector3 Start The start of the polyline. Declaration public Vector3 Start { get; } Property Value Type Description Vector3 Vertices The vertices of the polygon. Declaration public IList<Vector3> Vertices { get; set; } Property Value Type Description IList < Vector3 > Methods Bounds() Get the bounding box for this curve. Declaration public override BBox3 Bounds() Returns Type Description BBox3 Overrides Curve.Bounds() CheckCoincidenceAndThrow(IList<Vector3>) Check for coincident vertices in the supplied vertex collection. Declaration protected void CheckCoincidenceAndThrow(IList<Vector3> vertices) Parameters Type Name Description IList < Vector3 > vertices Frames(Double, Double) Get the transforms used to transform a Profile extruded along this Polyline. Declaration public override Transform[] Frames(double startSetback, double endSetback) Parameters Type Name Description System.Double startSetback System.Double endSetback Returns Type Description Transform [] Overrides Curve.Frames(Double, Double) Length() Calculate the length of the polygon. Declaration public override double Length() Returns Type Description System.Double Overrides Curve.Length() Plane() Compute the Plane defined by the first three vertices of the Polygon. Declaration public Plane Plane() Returns Type Description Plane A Plane. PointAt(Double) Get a point on the polygon at parameter u. Declaration public override Vector3 PointAt(double u) Parameters Type Name Description System.Double u A value between 0.0 and 1.0. Returns Type Description Vector3 Returns a Vector3 indicating a point along the Polygon length from its start vertex. Overrides Curve.PointAt(Double) Reversed() Reverse the direction of a polyline. Declaration public Polyline Reversed() Returns Type Description Polyline Returns a new polyline with opposite winding. Segments() Get a collection a lines representing each segment of this polyline. Declaration public virtual Line[] Segments() Returns Type Description Line [] A collection of Lines. ToString() Get a string representation of this polyline. Declaration public override string ToString() Returns Type Description System.String TransformAt(Double) Get the Transform at the specified parameter along the Polygon. Declaration public override Transform TransformAt(double u) Parameters Type Name Description System.Double u The parameter on the Polygon between 0.0 and 1.0. Returns Type Description Transform A Transform with its Z axis aligned trangent to the Polygon. Overrides Curve.TransformAt(Double) Implements ICurve"
  },
  "api/Elements.Geometry.Profile.html": {
    "href": "api/Elements.Geometry.Profile.html",
    "title": "Class Profile | Hypar Docs",
    "keywords": "Class Profile A profile comprised of an external boundary and one or several holes. Inheritance System.Object Element Profile HSSPipeProfile WideFlangeProfile Inherited Members Element.Id Element.Name Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Profile : Element Constructors Profile(Polygon) Construct a profile. Declaration public Profile(Polygon perimeter) Parameters Type Name Description Polygon perimeter The perimeter of the profile. Profile(Polygon, Polygon) Construct a profile. Declaration public Profile(Polygon perimeter, Polygon singleVoid) Parameters Type Name Description Polygon perimeter The perimeter of the profile. Polygon singleVoid A void in the profile. Profile(Polygon, IList<Polygon>, System.Guid, String) Declaration public Profile(Polygon perimeter, IList<Polygon> voids, System.Guid id, string name) Parameters Type Name Description Polygon perimeter IList < Polygon > voids System.Guid id System.String name Profile(String) Default constructor for profile. Declaration protected Profile(string name) Parameters Type Name Description System.String name Properties Perimeter The perimeter of the profile. Declaration public Polygon Perimeter { get; set; } Property Value Type Description Polygon Voids A collection of Polygons representing voids in the profile. Declaration public IList<Polygon> Voids { get; set; } Property Value Type Description IList < Polygon > Methods Area() The area of the profile. Declaration public double Area() Returns Type Description System.Double Reversed() Get a new profile which is the reverse of this profile. Declaration public Profile Reversed() Returns Type Description Profile Transform(Transform) Transform this profile in place. Declaration public void Transform(Transform t) Parameters Type Name Description Transform t The transform."
  },
  "api/Elements.Geometry.Profiles.HSSPipeProfileServer.html": {
    "href": "api/Elements.Geometry.Profiles.HSSPipeProfileServer.html",
    "title": "Class HSSPipeProfileServer | Hypar Docs",
    "keywords": "Class HSSPipeProfileServer A singleton class which serves every HSS pipe section as defined by AISC. Inheritance System.Object ProfileServer < HSSPipeProfileType > HSSPipeProfileServer Inherited Members ProfileServer<HSSPipeProfileType>.InchesToMeters ProfileServer<HSSPipeProfileType>._profiles ProfileServer<HSSPipeProfileType>.GetProfileByName(String) ProfileServer<HSSPipeProfileType>.GetProfileByType(HSSPipeProfileType) ProfileServer<HSSPipeProfileType>.AllProfiles() Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public sealed class HSSPipeProfileServer : ProfileServer<HSSPipeProfileType> Properties Instance The HSSPipeProfileServer singleton. Declaration public static HSSPipeProfileServer Instance { get; } Property Value Type Description HSSPipeProfileServer"
  },
  "api/Elements.Generate.TypeGenerator.html": {
    "href": "api/Elements.Generate.TypeGenerator.html",
    "title": "Class TypeGenerator | Hypar Docs",
    "keywords": "Class TypeGenerator TypeGenerator contains logic for generating element types from JSON schemas. Inheritance System.Object TypeGenerator Namespace : Elements.Generate Assembly : Hypar.Elements.dll Syntax public static class TypeGenerator : object Methods GenerateElementTypes(String) Generate the core element types as .cs files to the specified output directory. Declaration public static void GenerateElementTypes(string outputBaseDir) Parameters Type Name Description System.String outputBaseDir The root directory into which generated files will be written. GenerateInMemoryAssemblyFromUrisAndLoad(String[]) Generate an in-memory assembly containing all the types generated from the supplied uris. Declaration public static Assembly GenerateInMemoryAssemblyFromUrisAndLoad(string[] uris) Parameters Type Name Description System.String [] uris A collection of uris to JSON schema. These can be public urls or relative file paths. Returns Type Description Assembly An assembly containing the generated types or null if no Assembly could be generated. GenerateUserElementTypeFromUri(String, String, Boolean) Generate a user-defined type in a .cs file from a schema. Declaration public static void GenerateUserElementTypeFromUri(string uri, string outputBaseDir, bool isUserElement = false) Parameters Type Name Description System.String uri The uri to the schema which defines the type. This can be a url or a relative file path. System.String outputBaseDir The base output directory. System.Boolean isUserElement Is the type a user-defined element?"
  },
  "api/Elements.GeoJSON.GeometryCollection.html": {
    "href": "api/Elements.GeoJSON.GeometryCollection.html",
    "title": "Class GeometryCollection | Hypar Docs",
    "keywords": "Class GeometryCollection A GeoJSON geometry collection. Inheritance System.Object GeometryCollection Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class GeometryCollection : object Constructors GeometryCollection(Geometry[]) Construct a geometry collection. Declaration public GeometryCollection(Geometry[] geometries) Parameters Type Name Description Geometry [] geometries An array of geometries."
  },
  "api/Elements.GeoJSON.LineString.html": {
    "href": "api/Elements.GeoJSON.LineString.html",
    "title": "Class LineString | Hypar Docs",
    "keywords": "Class LineString A GeoJSON linestring. Inheritance System.Object Geometry LineString Inherited Members Geometry.Type Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class LineString : Geometry Constructors LineString(Position[]) Construct a LineString. Declaration public LineString(Position[] coordinates) Parameters Type Name Description Position [] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[] Coordinates { get; } Property Value Type Description Position []"
  },
  "api/Elements.GeoJSON.MultiPoint.html": {
    "href": "api/Elements.GeoJSON.MultiPoint.html",
    "title": "Class MultiPoint | Hypar Docs",
    "keywords": "Class MultiPoint A GeoJSON multipoint. Inheritance System.Object Geometry MultiPoint Inherited Members Geometry.Type Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class MultiPoint : Geometry Constructors MultiPoint(Position[]) Construct a MultiPoint. Declaration public MultiPoint(Position[] coordinates) Parameters Type Name Description Position [] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[] Coordinates { get; } Property Value Type Description Position []"
  },
  "api/Elements.GeoJSON.Polygon.html": {
    "href": "api/Elements.GeoJSON.Polygon.html",
    "title": "Class Polygon | Hypar Docs",
    "keywords": "Class Polygon A GeoJSON polygon. Inheritance System.Object Geometry Polygon Inherited Members Geometry.Type Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Polygon : Geometry Constructors Polygon(Position[][]) Construct a Polygon. Declaration public Polygon(Position[][] coordinates) Parameters Type Name Description Position [][] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[][] Coordinates { get; } Property Value Type Description Position [][] Methods ToPolygons() Convert the coordinate array to a collection of polylines. The last position of the polygon is dropped. Declaration public Polygon[] ToPolygons() Returns Type Description Polygon []"
  },
  "api/Elements.GeometricElement.html": {
    "href": "api/Elements.GeometricElement.html",
    "title": "Class GeometricElement | Hypar Docs",
    "keywords": "Class GeometricElement An element with a geometric representation. Inheritance System.Object Element GeometricElement Floor Frame Mass ModelCurve ModelPoints Opening Panel Space StructuralFraming Topography Wall Inherited Members Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public abstract class GeometricElement : Element Constructors GeometricElement(Transform, Material, Representation, System.Guid, String) Declaration public GeometricElement(Transform transform, Material material, Representation representation, System.Guid id, string name) Parameters Type Name Description Transform transform Material material Representation representation System.Guid id System.String name Properties Material The element's material. Declaration public Material Material { get; set; } Property Value Type Description Material Representation The element's representation. Declaration public Representation Representation { get; set; } Property Value Type Description Representation Transform The element's transform. Declaration public Transform Transform { get; set; } Property Value Type Description Transform Methods UpdateRepresentations() This method provides an opportunity for geometric elements to adjust their solid operations before tesselation. As an example, a floor might want to clip its opening profiles out of the profile of the floor. Declaration public virtual void UpdateRepresentations()"
  },
  "api/Elements.Geometry.Arc.html": {
    "href": "api/Elements.Geometry.Arc.html",
    "title": "Class Arc | Hypar Docs",
    "keywords": "Class Arc An arc defined by a CCW rotation around a center between a start angle and an end angle. Inheritance System.Object Curve Arc Circle Implements ICurve IEquatable < Arc > Inherited Members Curve.MinimumChordLength Curve.Frames(Double, Double) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Arc : Curve, ICurve, IEquatable<Arc> Constructors Arc(Vector3, Double, Double, Double) Declaration public Arc(Vector3 center, double radius, double startAngle, double endAngle) Parameters Type Name Description Vector3 center System.Double radius System.Double startAngle System.Double endAngle Properties Center The center of the arc. Declaration public Vector3 Center { get; set; } Property Value Type Description Vector3 End The end point of the arc. Declaration public Vector3 End { get; } Property Value Type Description Vector3 EndAngle The angle from 0.0, in degrees, at which the arc will end with respect to the positive X axis. Declaration public double EndAngle { get; set; } Property Value Type Description System.Double Radius The radius of the arc. Declaration public double Radius { get; set; } Property Value Type Description System.Double Start The start point of the arc. Declaration public Vector3 Start { get; } Property Value Type Description Vector3 StartAngle The angle from 0.0, in degrees, at which the arc will start with respect to the positive X axis. Declaration public double StartAngle { get; set; } Property Value Type Description System.Double Methods Bounds() Get a bounding box for this arc. Declaration public override BBox3 Bounds() Returns Type Description BBox3 A bounding box for this arc. Overrides Curve.Bounds() Equals(Arc) Is this arc equal to the provided arc? Declaration public bool Equals(Arc other) Parameters Type Name Description Arc other The arc to test. Returns Type Description System.Boolean Returns true if the two arcs are equal, otherwise false. Length() Calculate the length of the arc. Declaration public override double Length() Returns Type Description System.Double Overrides Curve.Length() Plane() Compute the plane of the arc. Declaration public Plane Plane() Returns Type Description Plane The plane in which the arc lies. PointAt(Double) Return the point at parameter u on the arc. Declaration public override Vector3 PointAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0. Returns Type Description Vector3 A Vector3 representing the point along the arc. Overrides Curve.PointAt(Double) Reversed() Get an arc which is the reverse of this Arc. Declaration public Arc Reversed() Returns Type Description Arc TransformAt(Double) Return transform on the arc at parameter u. Declaration public override Transform TransformAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0 on the arc. Returns Type Description Transform A transform with its origin at u along the curve and its Z axis tangent to the curve. Overrides Curve.TransformAt(Double) Implements ICurve IEquatable<>"
  },
  "api/Elements.Geometry.Solids.Sweep.html": {
    "href": "api/Elements.Geometry.Solids.Sweep.html",
    "title": "Class Sweep | Hypar Docs",
    "keywords": "Class Sweep A sweep of a profile along a curve. Inheritance System.Object SolidOperation Sweep Inherited Members SolidOperation.IsVoid Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class Sweep : SolidOperation Constructors Sweep(Profile, Curve, Double, Double, Boolean) Declaration public Sweep(Profile profile, Curve curve, double startSetback, double endSetback, bool isVoid) Parameters Type Name Description Profile profile Curve curve System.Double startSetback System.Double endSetback System.Boolean isVoid Properties Curve The curve along which the profile will be swept. Declaration public Curve Curve { get; set; } Property Value Type Description Curve EndSetback The amount to set back the resulting solid from the end of the curve. Declaration public double EndSetback { get; set; } Property Value Type Description System.Double Profile The id of the profile to be swept along the curve. Declaration public Profile Profile { get; set; } Property Value Type Description Profile StartSetback The amount to set back the resulting solid from the start of the curve. Declaration public double StartSetback { get; set; } Property Value Type Description System.Double"
  },
  "api/Elements.Geometry.Vector3Extensions.html": {
    "href": "api/Elements.Geometry.Vector3Extensions.html",
    "title": "Class Vector3Extensions | Hypar Docs",
    "keywords": "Class Vector3Extensions Extension methods for Vector3. Inheritance System.Object Vector3Extensions Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public static class Vector3Extensions : object Methods AreCoplanar(IList<Vector3>) Are the provided points on the same plane? Declaration public static bool AreCoplanar(this IList<Vector3> points) Parameters Type Name Description IList < Vector3 > points Returns Type Description System.Boolean Average(IList<Vector3>) Find the average of a collection of Vector3. Declaration public static Vector3 Average(this IList<Vector3> points) Parameters Type Name Description IList < Vector3 > points The Vector3 collection to average. Returns Type Description Vector3 A Vector3 representing the average. Shrink(Vector3[], Double) Shrink a collection of Vector3 towards their average. Declaration public static Vector3[] Shrink(this Vector3[] points, double distance) Parameters Type Name Description Vector3 [] points The collection of Vector3 to shrink. System.Double distance The distance to shrink along the vector to average. Returns Type Description Vector3 [] ToArray(IList<Vector3>) Convert a collection of Vector3 to a flat array of double. Declaration public static double[] ToArray(this IList<Vector3> points) Parameters Type Name Description IList < Vector3 > points The collection of Vector3 to convert. Returns Type Description System.Double [] An array containing x,y,z,x1,y1,z1,x2,y2,z2,... ToTransform(IList<Vector3>) Compute a transform with the origin at points[0], with an X axis along points[1]->points[0], and a normal computed using the vectors points[2]->points[1] and points[1]->points[0]. Declaration public static Transform ToTransform(this IList<Vector3> points) Parameters Type Name Description IList < Vector3 > points Returns Type Description Transform"
  },
  "api/Elements.Geometry.Vertex.html": {
    "href": "api/Elements.Geometry.Vertex.html",
    "title": "Class Vertex | Hypar Docs",
    "keywords": "Class Vertex A mesh vertex. Inheritance System.Object Vertex Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Vertex : object Constructors Vertex(Vector3, Nullable<Vector3>, Color) Create a vertex. Declaration public Vertex(Vector3 position, Vector3? normal = null, Color color = default(Color)) Parameters Type Name Description Vector3 position The position of the vertex. System.Nullable < Vector3 > normal The vertex's normal. Color color The vertex's color. Properties Color The vertex's color. Declaration public Color Color { get; } Property Value Type Description Color Index The index of the vertex within a mesh. Declaration public int Index { get; } Property Value Type Description System.Int32 Normal The vertex's normal. Declaration public Vector3 Normal { get; } Property Value Type Description Vector3 Position The position of the vertex. Declaration public Vector3 Position { get; } Property Value Type Description Vector3 UV The texture coordinate of the vertex. Declaration public UV UV { get; set; } Property Value Type Description UV"
  },
  "api/Elements.html": {
    "href": "api/Elements.html",
    "title": "Namespace Elements | Hypar Docs",
    "keywords": "Namespace Elements Classes Beam A structural framing element defined by a center line curve and a profile. Brace A Brace is a structural framing element which is often diagonal. BuiltInMaterials Built in materials. Column A vertical structural framing element. Element An object which is identified with a unique identifier and a name. Floor A floor is a horizontal element defined by a profile. Frame An element defined by a perimeter and a cross section swept along that perimeter. GeometricElement An element with a geometric representation. Mass An extruded volume. Material A material. Model A container of elements. ModelCurve A curve which is visible in 3D. ModelCurveExtensions Extension methods for model curves. ModelPoints A collection of points which are visible in 3D. Opening A polygonal opening. An opening's placement is defined by the x and y coordinates. The direction of the opening corresponds to the +Z axis of the transform. Panel A zero-thickness planar element defined by a perimeter. Space An extruded region of occupiable space. StandardWall A wall defined by a planar curve, a height, and a thickness. StructuralFraming A structural element with a profile swept along a curve. Topography A topographic mesh defined by an array of elevation values. UserElement An attribute which defines an element as a user-defined element type. Wall A wall defined by a planar profile extruded to a height."
  },
  "api/Elements.Validators.html": {
    "href": "api/Elements.Validators.html",
    "title": "Namespace Elements.Validators | Hypar Docs",
    "keywords": "Namespace Elements.Validators Classes ArcValidator ColorValidator ExtrudeValidator LineValidator MaterialValidator MatrixValidator PlaneValidator PolygonValidator PolylineValidator ProfileValidator Validator The supplier of validation logic for for element construction. Vector3Validator Interfaces IValidator Implement this interface to act as a validator."
  },
  "api/Elements.Serialization.glTF.html": {
    "href": "api/Elements.Serialization.glTF.html",
    "title": "Namespace Elements.Serialization.glTF | Hypar Docs",
    "keywords": "Namespace Elements.Serialization.glTF Classes GltfExtensions Extensions for glTF serialization."
  },
  "api/Elements.Geometry.UV.html": {
    "href": "api/Elements.Geometry.UV.html",
    "title": "Struct UV | Hypar Docs",
    "keywords": "Struct UV A UV texture coordinate. Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public struct UV Constructors UV(Double, Double) Construct a UV. Declaration public UV(double u, double v) Parameters Type Name Description System.Double u The u parameter. System.Double v The v parameter. Properties U The U coordinate. Declaration public double U { get; set; } Property Value Type Description System.Double V The v coordinate. Declaration public double V { get; set; } Property Value Type Description System.Double"
  },
  "api/Elements.Geometry.Interfaces.ITessellate.html": {
    "href": "api/Elements.Geometry.Interfaces.ITessellate.html",
    "title": "Interface ITessellate | Hypar Docs",
    "keywords": "Interface ITessellate Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ITessellate Methods Tessellate(ref Mesh) Add the tessellated representation of this object to the provided Mesh. Declaration void Tessellate(ref Mesh mesh) Parameters Type Name Description Mesh mesh The mesh to which this object's representation will be added."
  },
  "api/Elements.Geometry.Solids.html": {
    "href": "api/Elements.Geometry.Solids.html",
    "title": "Namespace Elements.Geometry.Solids | Hypar Docs",
    "keywords": "Namespace Elements.Geometry.Solids Classes Extrude An extrusion of a profile, in a direction, to a height. Lamina A zero-thickness solid defined by a profile. SolidOperation A solid operation. Sweep A sweep of a profile along a curve."
  },
  "api/Elements.Geometry.Profiles.VerticalAlignment.html": {
    "href": "api/Elements.Geometry.Profiles.VerticalAlignment.html",
    "title": "Enum VerticalAlignment | Hypar Docs",
    "keywords": "Enum VerticalAlignment The vertical alignment of a profile. Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public enum VerticalAlignment : int Fields Name Description Bottom Align the profile along its bottom. Center Align the profile along its center. Top Align the profile along its top."
  },
  "api/Elements.Geometry.Profiles.HorizontalAlignment.html": {
    "href": "api/Elements.Geometry.Profiles.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment | Hypar Docs",
    "keywords": "Enum HorizontalAlignment The horizontal alignment of a profile. Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public enum HorizontalAlignment : int Fields Name Description Center Align the profile along its center. Left Align the profile along its left edge. Right Align the profile along its right edge."
  },
  "api/Elements.Serialization.JSON.html": {
    "href": "api/Elements.Serialization.JSON.html",
    "title": "Namespace Elements.Serialization.JSON | Hypar Docs",
    "keywords": "Namespace Elements.Serialization.JSON Classes JsonInheritanceConverter"
  },
  "api/Elements.Properties.html": {
    "href": "api/Elements.Properties.html",
    "title": "Namespace Elements.Properties | Hypar Docs",
    "keywords": "Namespace Elements.Properties Classes NumericProperty A property with a numeric value. Enums NumericPropertyUnitType"
  },
  "api/Elements.Geometry.Interfaces.html": {
    "href": "api/Elements.Geometry.Interfaces.html",
    "title": "Namespace Elements.Geometry.Interfaces | Hypar Docs",
    "keywords": "Namespace Elements.Geometry.Interfaces Interfaces ICurve ICurve is implemented by all curve types. ITessellate"
  },
  "api/Elements.Generate.html": {
    "href": "api/Elements.Generate.html",
    "title": "Namespace Elements.Generate | Hypar Docs",
    "keywords": "Namespace Elements.Generate Classes TypeGenerator TypeGenerator contains logic for generating element types from JSON schemas."
  },
  "api/Elements.GeoJSON.html": {
    "href": "api/Elements.GeoJSON.html",
    "title": "Namespace Elements.GeoJSON | Hypar Docs",
    "keywords": "Namespace Elements.GeoJSON Classes Feature A GeoJSON feature. FeatureCollection A GeoJSON feature collection. Geometry The base class for all GeoJSON geometry types. GeometryCollection A GeoJSON geometry collection. Line A GeoJSON line. LineString A GeoJSON linestring. MercatorProjection Methods for computing geographic coordinates using the Mercator projection. MultiLineString A GeoJSON multi line string. MultiPoint A GeoJSON multipoint. MultiPolygon A GeoJSON multi polygon. Point A GeoJSON point. Polygon A GeoJSON polygon. Position A position."
  },
  "api/Elements.GeoJSON.Feature.html": {
    "href": "api/Elements.GeoJSON.Feature.html",
    "title": "Class Feature | Hypar Docs",
    "keywords": "Class Feature A GeoJSON feature. Inheritance System.Object Feature Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Feature : object Constructors Feature(Geometry, Dictionary<String, Object>) Construct a feature. Declaration public Feature(Geometry geometry, Dictionary<string, object> properties) Parameters Type Name Description Geometry geometry Dictionary < System.String , System.Object > properties Properties BBox The bounding box of the feature. Declaration public IEnumerable<double> BBox { get; } Property Value Type Description IEnumerable < System.Double > Geometry The geometry of the feature. Declaration public Geometry Geometry { get; set; } Property Value Type Description Geometry Properties All properties of the feature. Declaration public Dictionary<string, object> Properties { get; set; } Property Value Type Description Dictionary < System.String , System.Object > Type The type of the feature. Declaration public string Type { get; } Property Value Type Description System.String"
  },
  "api/Elements.Properties.NumericProperty.html": {
    "href": "api/Elements.Properties.NumericProperty.html",
    "title": "Class NumericProperty | Hypar Docs",
    "keywords": "Class NumericProperty A property with a numeric value. Inheritance System.Object NumericProperty Namespace : Elements.Properties Assembly : Hypar.Elements.dll Syntax public class NumericProperty : object Constructors NumericProperty(Double, NumericPropertyUnitType) Declaration public NumericProperty(double value, NumericPropertyUnitType unitType) Parameters Type Name Description System.Double value NumericPropertyUnitType unitType Properties UnitType The property's unit type. Declaration public NumericPropertyUnitType UnitType { get; set; } Property Value Type Description NumericPropertyUnitType Value The property's value Declaration public double Value { get; set; } Property Value Type Description System.Double"
  },
  "api/Elements.Column.html": {
    "href": "api/Elements.Column.html",
    "title": "Class Column | Hypar Docs",
    "keywords": "Class Column A vertical structural framing element. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Column.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a framing type. var profile = WideFlangeProfileServer.Instance.GetProfileByType(WideFlangeProfileType.W10x100); // Create a column. var column = new Column(Vector3.Origin, 3.0, profile, BuiltInMaterials.Steel); Inheritance System.Object Element GeometricElement StructuralFraming Column Inherited Members StructuralFraming.Curve StructuralFraming.StartSetback StructuralFraming.EndSetback StructuralFraming.Profile StructuralFraming.Rotation StructuralFraming.Volume() StructuralFraming.ProfileTransformed() StructuralFraming.UpdateRepresentations() GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Column : StructuralFraming Constructors Column(Vector3, Double, Profile, Material, Transform, Double, Double, Double, Guid, String) Construct a Column. Declaration public Column(Vector3 location, double height, Profile profile, Material material = null, Transform transform = null, double startSetback = 0, double endSetback = 0, double rotation = 0, Guid id = null, string name = null) Parameters Type Name Description Vector3 location The location of the base of the column. System.Double height The column's height. Profile profile The column's profile. Material material The column's material. Transform transform The column's transform. System.Double startSetback The setback of the column's extrusion from the base of the column. System.Double endSetback The setback of the column's extrusion from the top of the column. System.Double rotation An optional rotation of the column's profile around its axis. Guid id The column's id. System.String name The column's name. Properties Height The height of the column. Declaration public double Height { get; set; } Property Value Type Description System.Double Location The location of the base of the column. Declaration public Vector3 Location { get; set; } Property Value Type Description Vector3"
  },
  "api/Elements.GeoJSON.Geometry.html": {
    "href": "api/Elements.GeoJSON.Geometry.html",
    "title": "Class Geometry | Hypar Docs",
    "keywords": "Class Geometry The base class for all GeoJSON geometry types. Inheritance System.Object Geometry Line LineString MultiLineString MultiPoint MultiPolygon Point Polygon Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public abstract class Geometry : object Properties Type The type of the geometry. Declaration public virtual string Type { get; } Property Value Type Description System.String"
  },
  "api/Elements.GeoJSON.MercatorProjection.html": {
    "href": "api/Elements.GeoJSON.MercatorProjection.html",
    "title": "Class MercatorProjection | Hypar Docs",
    "keywords": "Class MercatorProjection Methods for computing geographic coordinates using the Mercator projection. Inheritance System.Object MercatorProjection Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public static class MercatorProjection : object Methods latToY(Double) Get the y coordinate, in meters, of the specified latitude. Declaration public static double latToY(double lat) Parameters Type Name Description System.Double lat Returns Type Description System.Double lonToX(Double) Get the x coordinate, in meters, of the specified longitude. Declaration public static double lonToX(double lon) Parameters Type Name Description System.Double lon Returns Type Description System.Double toGeoCoord(Double, Double) Get the latitude and longitude of the specified x and y coordinates. Declaration public static double[] toGeoCoord(double x, double y) Parameters Type Name Description System.Double x System.Double y Returns Type Description System.Double [] An array of doubles containing the longitude and latitude in degrees. toPixel(Double, Double) Get the coordinates of the longitude and latitude. Declaration public static double[] toPixel(double lon, double lat) Parameters Type Name Description System.Double lon System.Double lat Returns Type Description System.Double [] An array of doubles containing the x, and y coordintes, in meters. xToLon(Double) Get the longitude of the specified x coordinate. Declaration public static double xToLon(double x) Parameters Type Name Description System.Double x The x coordinate. Returns Type Description System.Double The longitude in degrees. yToLat(Double) Get the latitude of the specified y coordinate. Declaration public static double yToLat(double y) Parameters Type Name Description System.Double y The y coordinate. Returns Type Description System.Double The latitude in degrees."
  },
  "api/Elements.Validators.LineValidator.html": {
    "href": "api/Elements.Validators.LineValidator.html",
    "title": "Class LineValidator | Hypar Docs",
    "keywords": "Class LineValidator Inheritance System.Object LineValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class LineValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Validators.PolylineValidator.html": {
    "href": "api/Elements.Validators.PolylineValidator.html",
    "title": "Class PolylineValidator | Hypar Docs",
    "keywords": "Class PolylineValidator Inheritance System.Object PolylineValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class PolylineValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Geometry.Curve.html": {
    "href": "api/Elements.Geometry.Curve.html",
    "title": "Class Curve | Hypar Docs",
    "keywords": "Class Curve The abstract base class for all curves. Inheritance System.Object Curve Arc Bezier Line Polyline Implements ICurve Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public abstract class Curve : object, ICurve Constructors Curve() Declaration public Curve() Fields MinimumChordLength The minimum chord length allowed for subdivision of the curve. A lower MinimumChordLength results in smoother curves. Declaration public static double MinimumChordLength Field Value Type Description System.Double Methods Bounds() Get the bounding box for this curve. Declaration public abstract BBox3 Bounds() Returns Type Description BBox3 A bounding box for this curve. Frames(Double, Double) Get a collection of transforms which represent frames along this curve. Declaration public virtual Transform[] Frames(double startSetback = 0, double endSetback = 0) Parameters Type Name Description System.Double startSetback The offset parameter from the start of the curve. System.Double endSetback The offset parameter from the end of the curve. Returns Type Description Transform [] A collection of transforms. Length() Calculate the length of the curve. Declaration public abstract double Length() Returns Type Description System.Double PointAt(Double) Get a point along the curve at parameter u. Declaration public abstract Vector3 PointAt(double u) Parameters Type Name Description System.Double u Returns Type Description Vector3 A point on the curve at parameter u. TransformAt(Double) Get a transform whose XY plane is perpendicular to the curve, and whose positive Z axis points along the curve. Declaration public abstract Transform TransformAt(double u) Parameters Type Name Description System.Double u The parameter along the Line, between 0.0 and 1.0, at which to calculate the Transform. Returns Type Description Transform A transform. Implements ICurve"
  },
  "api/Elements.Geometry.FrameType.html": {
    "href": "api/Elements.Geometry.FrameType.html",
    "title": "Enum FrameType | Hypar Docs",
    "keywords": "Enum FrameType The frame type to be used for operations requiring a moving frame around the curve. Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public enum FrameType : int Fields Name Description Frenet A Frenet frame. RoadLike A frame with the up axis aligned with +Z."
  },
  "api/Elements.Geometry.Profiles.WideFlangeProfile.html": {
    "href": "api/Elements.Geometry.Profiles.WideFlangeProfile.html",
    "title": "Class WideFlangeProfile | Hypar Docs",
    "keywords": "Class WideFlangeProfile Inheritance System.Object Element Profile WideFlangeProfile Inherited Members Profile.Perimeter Profile.Voids Profile.Reversed() Profile.Area() Profile.Transform(Transform) Element.Id Element.Name Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public class WideFlangeProfile : Profile Constructors WideFlangeProfile(String) Declaration public WideFlangeProfile(string name) Parameters Type Name Description System.String name WideFlangeProfile(String, Guid, Double, Double, Double, Double, VerticalAlignment, HorizontalAlignment, Double, Double) Declaration public WideFlangeProfile(string name, Guid id, double bf = 0.1, double d = 0.05, double tf = 0.005, double tw = 0.005, VerticalAlignment verticalAlignment = VerticalAlignment.Center, HorizontalAlignment horizontalAlignment = HorizontalAlignment.Center, double verticalOffset = 0, double horizontalOffset = 0) Parameters Type Name Description System.String name Guid id System.Double bf System.Double d System.Double tf System.Double tw VerticalAlignment verticalAlignment HorizontalAlignment horizontalAlignment System.Double verticalOffset System.Double horizontalOffset Properties A Declaration public double A { get; } Property Value Type Description System.Double bf Declaration public double bf { get; } Property Value Type Description System.Double Cw Declaration public double Cw { get; } Property Value Type Description System.Double d Declaration public double d { get; } Property Value Type Description System.Double dAf Declaration public double dAf { get; } Property Value Type Description System.Double gage Declaration public string gage { get; } Property Value Type Description System.String Ix Declaration public double Ix { get; } Property Value Type Description System.Double Iy Declaration public double Iy { get; } Property Value Type Description System.Double J Declaration public double J { get; } Property Value Type Description System.Double k Declaration public double k { get; } Property Value Type Description System.Double k1 Declaration public double k1 { get; } Property Value Type Description System.Double Qf Declaration public double Qf { get; } Property Value Type Description System.Double Qw Declaration public double Qw { get; } Property Value Type Description System.Double rt Declaration public double rt { get; } Property Value Type Description System.Double rx Declaration public double rx { get; } Property Value Type Description System.Double ry Declaration public double ry { get; } Property Value Type Description System.Double Sw Declaration public double Sw { get; } Property Value Type Description System.Double Sx Declaration public double Sx { get; } Property Value Type Description System.Double Sy Declaration public double Sy { get; } Property Value Type Description System.Double T Declaration public string T { get; } Property Value Type Description System.String tf Declaration public double tf { get; } Property Value Type Description System.Double tw Declaration public double tw { get; } Property Value Type Description System.Double Wno Declaration public double Wno { get; } Property Value Type Description System.Double Zx Declaration public double Zx { get; } Property Value Type Description System.Double Zy Declaration public double Zy { get; } Property Value Type Description System.Double"
  },
  "api/Elements.Geometry.Representation.html": {
    "href": "api/Elements.Geometry.Representation.html",
    "title": "Class Representation | Hypar Docs",
    "keywords": "Class Representation The representation of an element. Inheritance System.Object Representation Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Representation : object Constructors Representation(IList<SolidOperation>) Declaration public Representation(IList<SolidOperation> solidOperations) Parameters Type Name Description IList < SolidOperation > solidOperations Properties SolidOperations A collection of solid operations. Declaration public IList<SolidOperation> SolidOperations { get; set; } Property Value Type Description IList < SolidOperation >"
  },
  "api/Elements.Geometry.Solids.Extrude.html": {
    "href": "api/Elements.Geometry.Solids.Extrude.html",
    "title": "Class Extrude | Hypar Docs",
    "keywords": "Class Extrude An extrusion of a profile, in a direction, to a height. Inheritance System.Object SolidOperation Extrude Inherited Members SolidOperation.IsVoid Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class Extrude : SolidOperation Constructors Extrude(Profile, Double, Vector3, Double, Boolean) Declaration public Extrude(Profile profile, double height, Vector3 direction, double rotation, bool isVoid) Parameters Type Name Description Profile profile System.Double height Vector3 direction System.Double rotation System.Boolean isVoid Properties Direction The direction in which to extrude. Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 Height The height of the extrusion. Declaration public double Height { get; set; } Property Value Type Description System.Double Profile The id of the profile to extrude. Declaration public Profile Profile { get; set; } Property Value Type Description Profile"
  },
  "api/Elements.Validators.MaterialValidator.html": {
    "href": "api/Elements.Validators.MaterialValidator.html",
    "title": "Class MaterialValidator | Hypar Docs",
    "keywords": "Class MaterialValidator Inheritance System.Object MaterialValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class MaterialValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Validators.MatrixValidator.html": {
    "href": "api/Elements.Validators.MatrixValidator.html",
    "title": "Class MatrixValidator | Hypar Docs",
    "keywords": "Class MatrixValidator Inheritance System.Object MatrixValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class MatrixValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Validators.PlaneValidator.html": {
    "href": "api/Elements.Validators.PlaneValidator.html",
    "title": "Class PlaneValidator | Hypar Docs",
    "keywords": "Class PlaneValidator Inheritance System.Object PlaneValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class PlaneValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Validators.PolygonValidator.html": {
    "href": "api/Elements.Validators.PolygonValidator.html",
    "title": "Class PolygonValidator | Hypar Docs",
    "keywords": "Class PolygonValidator Inheritance System.Object PolygonValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class PolygonValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Geometry.Profiles.ProfileServer-1.html": {
    "href": "api/Elements.Geometry.Profiles.ProfileServer-1.html",
    "title": "Class ProfileServer<T> | Hypar Docs",
    "keywords": "Class ProfileServer<T> Base class for all types which serve profiles. Inheritance System.Object ProfileServer<T> HSSPipeProfileServer WideFlangeProfileServer Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public abstract class ProfileServer<T> : object where T : struct Type Parameters Name Description T Fields _profiles The map of Profiles. Declaration protected Dictionary<T, Profile> _profiles Field Value Type Description Dictionary <T, Profile > InchesToMeters A conversion factor from inches to meters. Declaration protected const double InchesToMeters = null Field Value Type Description System.Double Methods AllProfiles() Get all Profiles available in the WideFlangeProfileServer. Declaration public IEnumerable<Profile> AllProfiles() Returns Type Description IEnumerable < Profile > GetProfileByName(String) Get a profile by name from the server. Declaration public Profile GetProfileByName(string name) Parameters Type Name Description System.String name Returns Type Description Profile A profile. Throws an exception if a profile with the specified name cannot be found. GetProfileByType(T) Get a profile by type enumeration from the server. Declaration public Profile GetProfileByType(T type) Parameters Type Name Description T type The enumerated type of the profile. Returns Type Description Profile A profile. Throws an exception if a profile with the specified name cannot be found."
  },
  "api/Elements.Geometry.Profiles.html": {
    "href": "api/Elements.Geometry.Profiles.html",
    "title": "Namespace Elements.Geometry.Profiles | Hypar Docs",
    "keywords": "Namespace Elements.Geometry.Profiles Classes HSSPipeProfile HSSPipeProfileServer A singleton class which serves every HSS pipe section as defined by AISC. ProfileServer<T> Base class for all types which serve profiles. WideFlangeProfile WideFlangeProfileServer A singleton class which serves every Wide Flange section as defined by AISC. Enums HorizontalAlignment The horizontal alignment of a profile. HSSPipeProfileType VerticalAlignment The vertical alignment of a profile. WideFlangeProfileType"
  },
  "api/Elements.Geometry.Ray.html": {
    "href": "api/Elements.Geometry.Ray.html",
    "title": "Class Ray | Hypar Docs",
    "keywords": "Class Ray An infinite ray starting at origin and pointing towards direction. Inheritance System.Object Ray Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Ray : IEquatable<Ray> Constructors Ray(Vector3, Vector3) Construct a ray. Declaration public Ray(Vector3 origin, Vector3 direction) Parameters Type Name Description Vector3 origin The origin of the ray. Vector3 direction The direction of the ray. Properties Direction The direction of the ray. Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 Origin The origin of the ray. Declaration public Vector3 Origin { get; set; } Property Value Type Description Vector3 Methods Equals(Ray) Is this ray equal to the provided ray? Declaration public bool Equals(Ray other) Parameters Type Name Description Ray other The ray to test. Returns Type Description System.Boolean Returns true if the two rays are equal, otherwise false. Intersects(Triangle, out Vector3) https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm Declaration public bool Intersects(Triangle tri, out Vector3 result) Parameters Type Name Description Triangle tri The triangle to intersect. Vector3 result The intersection result. Returns Type Description System.Boolean True if an intersection occurs, otherwise false. If true, check the intersection result for the type and location of intersection. Intersects(Topography, out Vector3) Does this ray intersect the provided topography? Declaration public bool Intersects(Topography topo, out Vector3 result) Parameters Type Name Description Topography topo The topography. Vector3 result The location of intersection. Returns Type Description System.Boolean True if an intersection result occurs. The type of intersection should be checked in the intersection result. False if no intersection occurs."
  },
  "api/Elements.Geometry.Solids.Lamina.html": {
    "href": "api/Elements.Geometry.Solids.Lamina.html",
    "title": "Class Lamina | Hypar Docs",
    "keywords": "Class Lamina A zero-thickness solid defined by a profile. Inheritance System.Object SolidOperation Lamina Inherited Members SolidOperation.IsVoid Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class Lamina : SolidOperation Constructors Lamina(Polygon) Create a lamina. Declaration public Lamina(Polygon perimeter) Parameters Type Name Description Polygon perimeter The polygon to convert into a lamina. Lamina(Polygon, Boolean) Declaration public Lamina(Polygon perimeter, bool isVoid) Parameters Type Name Description Polygon perimeter System.Boolean isVoid Properties Perimeter The perimeter. Declaration public Polygon Perimeter { get; set; } Property Value Type Description Polygon"
  },
  "api/Elements.Opening.html": {
    "href": "api/Elements.Opening.html",
    "title": "Class Opening | Hypar Docs",
    "keywords": "Class Opening A polygonal opening. An opening's placement is defined by the x and y coordinates. The direction of the opening corresponds to the +Z axis of the transform. Inheritance System.Object Element GeometricElement Opening Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Opening : GeometricElement Constructors Opening(Polygon, Double, Double, Transform) Create a polygonal opening. Declaration public Opening(Polygon perimeter, double x = 0, double y = 0, Transform transform = null) Parameters Type Name Description Polygon perimeter A polygon representing the perimeter of the opening. System.Double x The distance along the x to transform the profile. System.Double y The distance along the y to transform the profile. Transform transform The opening's transform. Opening(Profile, Double, Transform, Representation, Guid, String) Create an opening. Declaration public Opening(Profile profile, double depth, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Profile profile A polygon representing the perimeter of the opening. System.Double depth The depth of the opening's extrusion. Transform transform The opening's transform. Representation representation The opening's representation. Guid id The id of the opening. System.String name The name of the opening. Opening(Double, Double, Double, Double, Transform) Create a rectangular opening. Declaration public Opening(double x, double y, double width, double height, Transform transform = null) Parameters Type Name Description System.Double x The distance along the x axis to the center of the opening. System.Double y The distance along the y axis to the center of the opening. System.Double width The width of the opening. System.Double height The height of the opening. Transform transform The opening's transform. Properties Profile The profile of the opening. Declaration public Profile Profile { get; set; } Property Value Type Description Profile Methods UpdateRepresentations() Update representations Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations()"
  },
  "api/Elements.Material.html": {
    "href": "api/Elements.Material.html",
    "title": "Class Material | Hypar Docs",
    "keywords": "Class Material A material. Inheritance System.Object Element Material Inherited Members Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Material : Element Constructors Material(Color, Double, Double, System.Guid, String) Declaration public Material(Color color, double specularFactor, double glossinessFactor, System.Guid id, string name) Parameters Type Name Description Color color System.Double specularFactor System.Double glossinessFactor System.Guid id System.String name Material(String, Color, Single, Single, String, Guid) Construct a material. Declaration public Material(string name, Color color, float specularFactor = 0.1F, float glossinessFactor = 0.1F, string texture = null, Guid id = null) Parameters Type Name Description System.String name The identifier of the material. Identifiers should be unique within a model. Color color The RGBA color of the material. System.Single specularFactor The specular component of the color. Between 0.0 and 1.0. System.Single glossinessFactor The glossiness component of the color. Between 0.0 and 1.0. System.String texture A relative path to a jpg or png image file to be used as a texture. Guid id The id of the material. Material(String, Guid) Construct a material. Declaration public Material(string name, Guid id = null) Parameters Type Name Description System.String name The name of the material. Guid id The id of the material. Properties Color The material's color. Declaration public Color Color { get; set; } Property Value Type Description Color GlossinessFactor The glossiness factor between 0.0 and 1.0. Declaration public double GlossinessFactor { get; set; } Property Value Type Description System.Double SpecularFactor The specular factor between 0.0 and 1.0. Declaration public double SpecularFactor { get; set; } Property Value Type Description System.Double Texture A relative file path to an image file to be used as a texture. The image data will be packed into the glTF's buffer. Declaration public string Texture { get; } Property Value Type Description System.String Methods Equals(Object) Is this material equal to the provided material? Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Get the hash code for the material. Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/Elements.Model.html": {
    "href": "api/Elements.Model.html",
    "title": "Class Model | Hypar Docs",
    "keywords": "Class Model A container of elements. Inheritance System.Object Model Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Model : object Constructors Model() Construct an empty model. Declaration public Model() Model(Position, System.Collections.Generic.IDictionary<Guid, Element>) Declaration public Model(Position origin, System.Collections.Generic.IDictionary<Guid, Element> elements) Parameters Type Name Description Position origin System.Collections.Generic.IDictionary < Guid , Element > elements Properties Elements A collection of Elements keyed by their identifiers. Declaration public System.Collections.Generic.IDictionary<Guid, Element> Elements { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < Guid , Element > Origin The origin of the model. Declaration public Position Origin { get; set; } Property Value Type Description Position Methods AddElement(Element, Boolean) Add an element to the model. This operation recursively searches the element's properties for element sub-properties and adds those elements to the elements dictionary before adding the element itself. Declaration public void AddElement(Element element, bool gatherSubElements = true) Parameters Type Name Description Element element The element to add to the model. System.Boolean gatherSubElements Should sub-elements in properties be added to the model's elements collection? AddElements(IEnumerable<Element>, Boolean) Add a collection of elements to the model. Declaration public void AddElements(IEnumerable<Element> elements, bool gatherSubElements = true) Parameters Type Name Description IEnumerable < Element > elements The elements to add to the model. System.Boolean gatherSubElements Should sub-elements in properties be added to the model's elements collection? AllElementsOfType<T>() Get all entities of the specified Type. Declaration public IEnumerable<T> AllElementsOfType<T>() Returns Type Description IEnumerable <T> A collection of elements of the specified type. Type Parameters Name Description T The Type of element to return. FromIFC(String, String[]) Deserialize a model from IFC. Declaration public static Model FromIFC(string path, string[] idsToConvert = null) Parameters Type Name Description System.String path The path to the IFC file. System.String [] idsToConvert An optional collection of IFC identifiers to convert. Returns Type Description Model FromJson(String, List<String>) Deserialize a model from JSON. Declaration public static Model FromJson(string json, List<string> errors = null) Parameters Type Name Description System.String json The JSON representing the model. List < System.String > errors A collection of deserialization errors. Returns Type Description Model GetElementByName<T>(String) Get the first entity with the specified name. Declaration public T GetElementByName<T>(string name) where T : Element Parameters Type Name Description System.String name Returns Type Description T An entity or null if no entity can be found with the provided name. Type Parameters Name Description T GetElementOfType<T>(Guid) Get an entity by id from the Model. Declaration public T GetElementOfType<T>(Guid id) where T : Element Parameters Type Name Description Guid id The identifier of the element. Returns Type Description T An entity or null if no entity can be found with the provided id. Type Parameters Name Description T ToIFC(String) Serialize the model to IFC. Declaration public void ToIFC(string path) Parameters Type Name Description System.String path The output path for the IFC file. ToJson() Serialize the model to JSON. Declaration public string ToJson() Returns Type Description System.String Extension Methods GltfExtensions.ToGlTF(Model, String, Boolean) GltfExtensions.ToBase64String(Model)"
  },
  "api/Elements.ModelCurve.html": {
    "href": "api/Elements.ModelCurve.html",
    "title": "Class ModelCurve | Hypar Docs",
    "keywords": "Class ModelCurve A curve which is visible in 3D. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_ModelCurve.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create some curves for your model curves. var line = new Line(Vector3.Origin, new Vector3(5,5,5)); var arc = new Arc(Vector3.Origin, 2.0, 45.0, 135.0); var pline = Polygon.L(2, 2, 0.5); // Create model curves from the curves. var lineModelCurve = new ModelCurve(line, new Material(\"Red\", Colors.Red)); var arcModelCurve = new ModelCurve(arc, new Material(\"Orange\", Colors.Orange), new Transform(5, 0, 0)); var plineModelCurve = new ModelCurve(pline, new Material(\"Purple\", Colors.Purple), new Transform(10, 0, 0)); Inheritance System.Object Element GeometricElement ModelCurve Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation GeometricElement.UpdateRepresentations() Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class ModelCurve : GeometricElement Constructors ModelCurve(Curve, Material, Transform, Representation, Guid, String) Create a model curve. Declaration public ModelCurve(Curve curve, Material material = null, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Curve curve The curve. Material material The material. Specular and glossiness components will be ignored. Transform transform The model curve's transform. Representation representation The curve's representation. Guid id The id of the model curve. System.String name The name of the model curve. Properties Curve The curve. Declaration public Curve Curve { get; set; } Property Value Type Description Curve"
  },
  "api/Elements.ModelCurveExtensions.html": {
    "href": "api/Elements.ModelCurveExtensions.html",
    "title": "Class ModelCurveExtensions | Hypar Docs",
    "keywords": "Class ModelCurveExtensions Extension methods for model curves. Inheritance System.Object ModelCurveExtensions Namespace : Elements Assembly : Hypar.Elements.dll Syntax public static class ModelCurveExtensions : object Methods ToModelCurves(Transform, Transform) Convert a transform to a set of model curves. Declaration public static IList<ModelCurve> ToModelCurves(this Transform t, Transform context = null) Parameters Type Name Description Transform t The transform to convert. Transform context An optional transform in which these curves should be drawn. Returns Type Description IList < ModelCurve >"
  },
  "api/Elements.Validators.ExtrudeValidator.html": {
    "href": "api/Elements.Validators.ExtrudeValidator.html",
    "title": "Class ExtrudeValidator | Hypar Docs",
    "keywords": "Class ExtrudeValidator Inheritance System.Object ExtrudeValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class ExtrudeValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Wall.html": {
    "href": "api/Elements.Wall.html",
    "title": "Class Wall | Hypar Docs",
    "keywords": "Class Wall A wall defined by a planar profile extruded to a height. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Wall.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a wall. var line = new Line(new Vector3(0, 0, 0), new Vector3(10, 10, 0)); var wall = new StandardWall(line, 0.1, 3.0); // Create some openings. var openings = new List<Opening>(){ new Opening(1.0, 2.0, 1.0, 1.0), new Opening(3.0, 1.0, 1.0, 2.0) }; wall.Openings.AddRange(openings); Inheritance System.Object Element GeometricElement Wall StandardWall Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Wall : GeometricElement Constructors Wall(Profile, Double, Material, Transform, Representation, Guid, String) Construct a wall by extruding a profile. Declaration public Wall(Profile profile, double height, Material material = null, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Profile profile The plan profile of the wall. System.Double height The height of the wall. Material material The material of the wall. Transform transform An option transform for the wall. Representation representation The wall's representation. Guid id The id of the wall. System.String name The name of the wall. Wall(Transform, Material, Representation, Guid, String) A pass-through constructor to set the id, name, and transform. Declaration protected Wall(Transform transform, Material material, Representation representation, Guid id, string name) Parameters Type Name Description Transform transform Material material Representation representation Guid id System.String name Properties Height The height of the wall. Declaration public double Height { get; protected set; } Property Value Type Description System.Double Profile The profile of the wall. Declaration public Profile Profile { get; protected set; } Property Value Type Description Profile Methods UpdateRepresentations() Update the representations. Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations()"
  },
  "api/Elements.GeoJSON.FeatureCollection.html": {
    "href": "api/Elements.GeoJSON.FeatureCollection.html",
    "title": "Class FeatureCollection | Hypar Docs",
    "keywords": "Class FeatureCollection A GeoJSON feature collection. Inheritance System.Object FeatureCollection Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class FeatureCollection : object Constructors FeatureCollection(IEnumerable<Feature>) Construct a feature collection. Declaration public FeatureCollection(IEnumerable<Feature> features) Parameters Type Name Description IEnumerable < Feature > features A collection of features. Properties Features A collection of features. Declaration public IEnumerable<Feature> Features { get; set; } Property Value Type Description IEnumerable < Feature > Type The type of the feature. Declaration public string Type { get; } Property Value Type Description System.String"
  },
  "api/Elements.GeoJSON.MultiLineString.html": {
    "href": "api/Elements.GeoJSON.MultiLineString.html",
    "title": "Class MultiLineString | Hypar Docs",
    "keywords": "Class MultiLineString A GeoJSON multi line string. Inheritance System.Object Geometry MultiLineString Inherited Members Geometry.Type Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class MultiLineString : Geometry Constructors MultiLineString(Position[][]) Construct a MultiLineString. Declaration public MultiLineString(Position[][] coordinates) Parameters Type Name Description Position [][] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[][] Coordinates { get; } Property Value Type Description Position [][]"
  },
  "api/Elements.Geometry.Circle.html": {
    "href": "api/Elements.Geometry.Circle.html",
    "title": "Class Circle | Hypar Docs",
    "keywords": "Class Circle An arc with a start angle of 0 (+X) and an end angle of 360.0. Inheritance System.Object Curve Arc Circle Implements ICurve IEquatable < Arc > Inherited Members Arc.Center Arc.Radius Arc.StartAngle Arc.EndAngle Arc.Length() Arc.Start Arc.End Arc.PointAt(Double) Arc.TransformAt(Double) Arc.Reversed() Arc.Bounds() Arc.Plane() Arc.Equals(Arc) Curve.MinimumChordLength Curve.Frames(Double, Double) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Circle : Arc, ICurve, IEquatable<Arc> Constructors Circle(Vector3, Double) Construct a circle. Declaration public Circle(Vector3 center, double radius = 1) Parameters Type Name Description Vector3 center The center of the circle. System.Double radius The radius of the circle. Implements ICurve IEquatable<>"
  },
  "api/Elements.Geometry.Color.html": {
    "href": "api/Elements.Geometry.Color.html",
    "title": "Struct Color | Hypar Docs",
    "keywords": "Struct Color A color with red, green, blue, and alpha components. Implements IEquatable < Color > Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public struct Color : IEquatable<Color> Constructors Color(Double, Double, Double, Double) Declaration public Color(double red, double green, double blue, double alpha) Parameters Type Name Description System.Double red System.Double green System.Double blue System.Double alpha Properties Alpha The alpha component of the color between 0.0 and 1.0. Declaration public double Alpha { get; set; } Property Value Type Description System.Double Blue The blue component of the color between 0.0 and 1.0. Declaration public double Blue { get; set; } Property Value Type Description System.Double Green The green component of the color between 0.0 and 1.0. Declaration public double Green { get; set; } Property Value Type Description System.Double Red The red component of the color between 0.0 and 1.0. Declaration public double Red { get; set; } Property Value Type Description System.Double Methods Equals(Color) Is this color equal to the provided color? Declaration public bool Equals(Color other) Parameters Type Name Description Color other The color to test. Returns Type Description System.Boolean Returns true if the two colors are equal, otherwise false. Equals(Object) Is this color equal to the provided color? Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Get the hash code for this color. Declaration public override int GetHashCode() Returns Type Description System.Int32 ToArray() Get the color's components as an array. Declaration public float[] ToArray() Returns Type Description System.Single [] An array containing the color's components. Implements IEquatable<>"
  },
  "api/Elements.Geometry.Triangle.html": {
    "href": "api/Elements.Geometry.Triangle.html",
    "title": "Class Triangle | Hypar Docs",
    "keywords": "Class Triangle A mesh triangle. Inheritance System.Object Triangle Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Triangle : object Constructors Triangle(Vertex, Vertex, Vertex) Create a triangle. Declaration public Triangle(Vertex a, Vertex b, Vertex c) Parameters Type Name Description Vertex a The index of the first vertex of the triangle. Vertex b The index of the second vertex of the triangle. Vertex c The index of the third vertex of the triangle. Properties Normal The triangle's normal. Declaration public Vector3 Normal { get; } Property Value Type Description Vector3 Vertices The triangle's vertices. Declaration public Vertex[] Vertices { get; } Property Value Type Description Vertex [] Methods Area() The area of the triangle. Declaration public double Area() Returns Type Description System.Double"
  },
  "api/Elements.Panel.html": {
    "href": "api/Elements.Panel.html",
    "title": "Class Panel | Hypar Docs",
    "keywords": "Class Panel A zero-thickness planar element defined by a perimeter. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Panel.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples var a = new Vector3(0,0,0); var b = new Vector3(1,0,0); var c = new Vector3(1,0,1); var d = new Vector3(0,0,1); // Create a panel. var panel = new Panel(new Polygon(new []{a,b,c,d}), BuiltInMaterials.Glass); Inheritance System.Object Element GeometricElement Panel Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Panel : GeometricElement Constructors Panel(Polygon, Material, Transform, Representation, Guid, String) Create a panel. Declaration public Panel(Polygon perimeter, Material material = null, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Polygon perimeter The perimeter of the panel. Material material The panel's material Transform transform The panel's transform. Representation representation The panel's representation. Guid id The id of the panel. System.String name The name of the panel. Properties Perimeter The perimeter of the panel. Declaration public Polygon Perimeter { get; } Property Value Type Description Polygon Methods Area() The panel's area. Declaration public double Area() Returns Type Description System.Double Normal() The normal of the panel, defined using the first 3 vertices in the location. Declaration public Vector3 Normal() Returns Type Description Vector3 The normal vector of the panel. UpdateRepresentations() Update representations. Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations()"
  },
  "api/Elements.Frame.html": {
    "href": "api/Elements.Frame.html",
    "title": "Class Frame | Hypar Docs",
    "keywords": "Class Frame An element defined by a perimeter and a cross section swept along that perimeter. Inheritance System.Object Element GeometricElement Frame Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Frame : GeometricElement Constructors Frame(Polygon, Profile, Double, Material, Transform, Representation, Guid, String) Create a frame. Declaration public Frame(Polygon curve, Profile profile, double offset = 0, Material material = null, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Polygon curve The frame's perimeter. Profile profile The frame's profile. System.Double offset The amount which the perimeter will be offset internally. Material material The frame's material. Transform transform The frame's transform. Representation representation The frame's representation. Guid id The id of the frame. System.String name The name of the frame. Properties Curve The perimeter of the frame. Declaration public Curve Curve { get; set; } Property Value Type Description Curve Profile The frame's profile. Declaration public Profile Profile { get; set; } Property Value Type Description Profile Methods UpdateRepresentations() Update representations. Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations()"
  },
  "api/Elements.GeoJSON.MultiPolygon.html": {
    "href": "api/Elements.GeoJSON.MultiPolygon.html",
    "title": "Class MultiPolygon | Hypar Docs",
    "keywords": "Class MultiPolygon A GeoJSON multi polygon. Inheritance System.Object Geometry MultiPolygon Inherited Members Geometry.Type Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class MultiPolygon : Geometry Constructors MultiPolygon(Position[][]) Construct a MultiPolygon. Declaration public MultiPolygon(Position[][] coordinates) Parameters Type Name Description Position [][] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[][] Coordinates { get; } Property Value Type Description Position [][]"
  },
  "api/Elements.Geometry.Profiles.HSSPipeProfileType.html": {
    "href": "api/Elements.Geometry.Profiles.HSSPipeProfileType.html",
    "title": "Enum HSSPipeProfileType | Hypar Docs",
    "keywords": "Enum HSSPipeProfileType Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public enum HSSPipeProfileType : int Fields Name Description HSS1_660x0_140 HSS1_900x0_145 HSS10_000x0_188 HSS10_000x0_250 HSS10_000x0_312 HSS10_000x0_375 HSS10_000x0_500 HSS10_000x0_625 HSS10_750x0_250 HSS10_750x0_500 HSS11_250x0_188 HSS11_250x0_250 HSS11_250x0_312 HSS11_250x0_375 HSS11_250x0_500 HSS11_250x0_625 HSS12_500x0_188 HSS12_500x0_250 HSS12_500x0_312 HSS12_500x0_375 HSS12_500x0_500 HSS12_500x0_625 HSS12_750x0_250 HSS12_750x0_375 HSS12_750x0_500 HSS14_000x0_312 HSS14_000x0_375 HSS14_000x0_500 HSS16_000x0_312 HSS16_000x0_375 HSS16_000x0_438 HSS16_000x0_500 HSS18_000x0_375 HSS18_000x0_500 HSS2_375x0_125 HSS2_375x0_154 HSS2_375x0_188 HSS2_375x0_218 HSS2_375x0_250 HSS2_500x0_125 HSS2_500x0_188 HSS2_500x0_250 HSS2_875x0_125 HSS2_875x0_188 HSS2_875x0_203 HSS2_875x0_250 HSS20_000x0_375 HSS20_000x0_500 HSS3_000x0_120 HSS3_000x0_134 HSS3_000x0_152 HSS3_000x0_188 HSS3_000x0_203 HSS3_000x0_216 HSS3_000x0_250 HSS3_000x0_300 HSS3_500x0_125 HSS3_500x0_188 HSS3_500x0_203 HSS3_500x0_216 HSS3_500x0_250 HSS3_500x0_300 HSS3_500x0_313 HSS4_000x0_125 HSS4_000x0_188 HSS4_000x0_220 HSS4_000x0_226 HSS4_000x0_237 HSS4_000x0_250 HSS4_000x0_313 HSS4_000x0_337 HSS4_500x0_125 HSS4_500x0_188 HSS4_500x0_237 HSS4_500x0_337 HSS5_000x0_125 HSS5_000x0_188 HSS5_000x0_250 HSS5_000x0_258 HSS5_000x0_312 HSS5_000x0_375 HSS5_000x0_500 HSS5_500x0_258 HSS5_500x0_375 HSS5_500x0_500 HSS5_563x0_134 HSS5_563x0_188 HSS5_563x0_258 HSS5_563x0_375 HSS6_000x0_125 HSS6_000x0_188 HSS6_000x0_250 HSS6_000x0_280 HSS6_000x0_312 HSS6_000x0_375 HSS6_000x0_500 HSS6_125x0_188 HSS6_125x0_250 HSS6_125x0_312 HSS6_125x0_375 HSS6_125x0_500 HSS6_625x0_125 HSS6_625x0_188 HSS6_625x0_250 HSS6_625x0_280 HSS6_625x0_312 HSS6_625x0_375 HSS6_625x0_432 HSS6_625x0_500 HSS6_875x0_188 HSS6_875x0_250 HSS6_875x0_312 HSS6_875x0_375 HSS6_875x0_500 HSS7_000x0_125 HSS7_000x0_188 HSS7_000x0_250 HSS7_000x0_312 HSS7_000x0_375 HSS7_000x0_500 HSS7_500x0_188 HSS7_500x0_250 HSS7_500x0_312 HSS7_500x0_375 HSS7_500x0_500 HSS7_625x0_125 HSS8_625x0_188 HSS8_625x0_250 HSS8_625x0_322 HSS8_625x0_375 HSS8_625x0_500 HSS8_750x0_188 HSS8_750x0_250 HSS8_750x0_312 HSS8_750x0_375 HSS8_750x0_500 HSS9_625x0_188 HSS9_625x0_250 HSS9_625x0_312 HSS9_625x0_375 HSS9_625x0_500"
  },
  "api/Elements.Geometry.Profiles.WideFlangeProfileType.html": {
    "href": "api/Elements.Geometry.Profiles.WideFlangeProfileType.html",
    "title": "Enum WideFlangeProfileType | Hypar Docs",
    "keywords": "Enum WideFlangeProfileType Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public enum WideFlangeProfileType : int Fields Name Description W10x100 W10x112 W10x12 W10x15 W10x17 W10x19 W10x22 W10x26 W10x30 W10x33 W10x39 W10x45 W10x49 W10x54 W10x60 W10x68 W10x77 W10x88 W12x106 W12x120 W12x136 W12x14 W12x152 W12x16 W12x170 W12x19 W12x190 W12x210 W12x22 W12x230 W12x252 W12x26 W12x279 W12x30 W12x305 W12x336 W12x35 W12x40 W12x45 W12x50 W12x53 W12x58 W12x65 W12x72 W12x79 W12x87 W12x96 W14x109 W14x120 W14x132 W14x145 W14x159 W14x176 W14x193 W14x211 W14x22 W14x233 W14x257 W14x26 W14x283 W14x30 W14x311 W14x34 W14x342 W14x370 W14x38 W14x398 W14x426 W14x43 W14x455 W14x48 W14x500 W14x53 W14x550 W14x605 W14x61 W14x665 W14x68 W14x730 W14x74 W14x808 W14x82 W14x90 W14x99 W16x100 W16x26 W16x31 W16x36 W16x40 W16x45 W16x50 W16x57 W16x67 W16x77 W16x89 W18x106 W18x119 W18x130 W18x143 W18x158 W18x175 W18x192 W18x211 W18x234 W18x258 W18x283 W18x311 W18x35 W18x40 W18x46 W18x50 W18x55 W18x60 W18x65 W18x71 W18x76 W18x86 W18x97 W21x101 W21x111 W21x122 W21x132 W21x147 W21x166 W21x182 W21x201 W21x223 W21x248 W21x275 W21x300 W21x333 W21x364 W21x402 W21x44 W21x48 W21x50 W21x55 W21x57 W21x62 W21x68 W21x73 W21x83 W21x93 W24x103 W24x104 W24x117 W24x131 W24x146 W24x162 W24x176 W24x192 W24x207 W24x229 W24x250 W24x279 W24x306 W24x335 W24x370 W24x408 W24x450 W24x492 W24x55 W24x62 W24x68 W24x76 W24x84 W24x94 W27x102 W27x114 W27x129 W27x146 W27x161 W27x178 W27x194 W27x217 W27x235 W27x258 W27x281 W27x307 W27x336 W27x368 W27x407 W27x448 W27x494 W27x539 W27x84 W27x94 W30x108 W30x116 W30x124 W30x132 W30x148 W30x173 W30x191 W30x211 W30x235 W30x261 W30x292 W30x326 W30x357 W30x391 W30x433 W30x477 W30x526 W30x581 W30x90 W30x99 W33x118 W33x130 W33x141 W33x152 W33x169 W33x201 W33x221 W33x241 W33x263 W33x291 W33x318 W33x354 W33x387 W33x424 W33x468 W33x515 W33x567 W33x619 W36x135 W36x150 W36x160 W36x170 W36x182 W36x194 W36x210 W36x230 W36x232 W36x245 W36x256 W36x260 W36x280 W36x300 W36x328 W36x359 W36x393 W36x439 W36x485 W36x527 W36x588 W36x650 W36x720 W36x798 W36x848 W40x149 W40x167 W40x174 W40x183 W40x192 W40x199 W40x211 W40x215 W40x221 W40x235 W40x244 W40x249 W40x264 W40x268 W40x277 W40x278 W40x297 W40x298 W40x321 W40x324 W40x327 W40x328 W40x331 W40x362 W40x372 W40x392 W40x397 W40x431 W40x436 W40x466 W40x480 W40x503 W40x531 W40x593 W40x655 W44x198 W44X224 W44x230 W44x248 W44x262 W44x285 W44x290 W44x335 W4x13 W5x16 W5x19 W6x12 W6x15 W6x16 W6x20 W6x25 W6x8_5 W6x9 W8x10 W8x13 W8x15 W8x18 W8x21 W8x24 W8x28 W8x31 W8x35 W8x40 W8x48 W8x58 W8x67"
  },
  "api/Elements.Geometry.html": {
    "href": "api/Elements.Geometry.html",
    "title": "Namespace Elements.Geometry | Hypar Docs",
    "keywords": "Namespace Elements.Geometry Classes Arc An arc defined by a CCW rotation around a center between a start angle and an end angle. BBox3 An axis-aligned bounding box. Bezier A Bezier curve. Circle An arc with a start angle of 0 (+X) and an end angle of 360.0. Colors Commonly used colors. Curve The abstract base class for all curves. Line A line between two points. The line is parameterized from 0.0(start) to 1.0(end) Matrix A column-ordered 4x3 matrix. Mesh An indexed mesh. Plane A plane. Polygon A closed planar polygon. Polyline A planar continuous set of lines. Profile A profile comprised of an external boundary and one or several holes. Ray An infinite ray starting at origin and pointing towards direction. Representation The representation of an element. Transform A right-handed coordinate system with +Z up. Triangle A mesh triangle. Vector3Extensions Extension methods for Vector3. Vertex A mesh vertex. Structs Color A color with red, green, blue, and alpha components. UV A UV texture coordinate. Vector3 A 3D vector. Enums FrameType The frame type to be used for operations requiring a moving frame around the curve."
  },
  "api/Elements.Geometry.Solids.SolidOperation.html": {
    "href": "api/Elements.Geometry.Solids.SolidOperation.html",
    "title": "Class SolidOperation | Hypar Docs",
    "keywords": "Class SolidOperation A solid operation. Inheritance System.Object SolidOperation Extrude Lamina Sweep Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public abstract class SolidOperation : object Constructors SolidOperation(Boolean) Declaration public SolidOperation(bool isVoid) Parameters Type Name Description System.Boolean isVoid Properties IsVoid Is the solid operation a void operation? Declaration public bool IsVoid { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Elements.Geometry.Vector3.html": {
    "href": "api/Elements.Geometry.Vector3.html",
    "title": "Struct Vector3 | Hypar Docs",
    "keywords": "Struct Vector3 A 3D vector. Implements IComparable < Vector3 > IEquatable < Vector3 > Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public struct Vector3 : IComparable<Vector3>, IEquatable<Vector3> Constructors Vector3(Vector3) Create a Vector3 by copying the components of another Vector3. Declaration public Vector3(Vector3 v) Parameters Type Name Description Vector3 v The Vector3 to copy. Vector3(Double, Double) Create a vector from x, and y coordinates. Declaration public Vector3(double x, double y) Parameters Type Name Description System.Double x The x coordinate of the vector. System.Double y Thy y coordinate of the vector. Vector3(Double, Double, Double) Declaration public Vector3(double x, double y, double z) Parameters Type Name Description System.Double x System.Double y System.Double z Fields Epsilon A tolerance for comparison operations of 1e-9. Declaration public static double Epsilon Field Value Type Description System.Double Properties Origin Create a vector at the origin. Declaration public static Vector3 Origin { get; } Property Value Type Description Vector3 X The X component of the vector. Declaration public double X { get; set; } Property Value Type Description System.Double XAxis Create a vector along the X axis. Declaration public static Vector3 XAxis { get; } Property Value Type Description Vector3 Y The Y component of the vector. Declaration public double Y { get; set; } Property Value Type Description System.Double YAxis Create a vector along the Y axis. Declaration public static Vector3 YAxis { get; } Property Value Type Description Vector3 Z The Z component of the vector. Declaration public double Z { get; set; } Property Value Type Description System.Double ZAxis Create a vector along the Z axis. Declaration public static Vector3 ZAxis { get; } Property Value Type Description Vector3 Methods AngleTo(Vector3) The angle in degrees from this vector to the provided vector. Declaration public double AngleTo(Vector3 v) Parameters Type Name Description Vector3 v The vector with which to measure the angle. Returns Type Description System.Double AtNEqualSpacesAlongLine(Line, Int32, Boolean) Create vectors at n equal spaces along the provided line. Declaration public static IList<Vector3> AtNEqualSpacesAlongLine(Line line, int n, bool includeEnds = false) Parameters Type Name Description Line line The line. System.Int32 n The number of samples along the line. System.Boolean includeEnds A flag indicating whether or not to include points for the start and end of the line. Returns Type Description IList < Vector3 > Average(Vector3) Compute the average of this Vector3 and v. Declaration public Vector3 Average(Vector3 v) Parameters Type Name Description Vector3 v The vector with which to compute the average. Returns Type Description Vector3 A vector which is the average of this and v. CCW(Vector3, Vector3, Vector3) Check whether three points are wound CCW in two dimensions. Declaration public static double CCW(Vector3 a, Vector3 b, Vector3 c) Parameters Type Name Description Vector3 a The first point. Vector3 b The second point. Vector3 c The third point. Returns Type Description System.Double Greater than 0 if the points are CCW, less than 0 if they are CW, and 0 if they are colinear. CompareTo(Vector3) Implement IComparable interface. Declaration public int CompareTo(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description System.Int32 Cross(Vector3) Compute the cross product of this vector and v. Declaration public Vector3 Cross(Vector3 v) Parameters Type Name Description Vector3 v The vector with which to compute the cross product. Returns Type Description Vector3 DistanceTo(Plane) The distance from this vector to p. The distance will be negative when this vector lies \"behind\" the plane. Declaration public double DistanceTo(Plane p) Parameters Type Name Description Plane p The plane. Returns Type Description System.Double DistanceTo(Vector3) The distance from this point to b. Declaration public double DistanceTo(Vector3 v) Parameters Type Name Description Vector3 v The target vector. Returns Type Description System.Double The distance between this vector and the provided vector. Dot(Vector3) Compute the dot product of this vector and v. Declaration public double Dot(Vector3 v) Parameters Type Name Description Vector3 v The vector with which to compute the dot product. Returns Type Description System.Double The dot product. Equals(Vector3) Is this vector equal to the provided vector? Declaration public bool Equals(Vector3 other) Parameters Type Name Description Vector3 other The vector to test. Returns Type Description System.Boolean Returns true if all components of the two vectors are within Epsilon, otherwise false. GetHashCode() Get the hash code for the vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 IsAlmostEqualTo(Vector3) Determine whether this vector's components are equal to those of v, within tolerance. Declaration public bool IsAlmostEqualTo(Vector3 v) Parameters Type Name Description Vector3 v The vector to compare. Returns Type Description System.Boolean True if the difference of this vector and the supplied vector's components are all within Tolerance, otherwise false. IsNaN() Are any components of this vector NaN? Declaration public bool IsNaN() Returns Type Description System.Boolean True if any components are NaN otherwise false. IsParallelTo(Vector3) Determine whether this vector is parallel to v. Declaration public bool IsParallelTo(Vector3 v) Parameters Type Name Description Vector3 v The vector to compare to this vector. Returns Type Description System.Boolean True if the vectors are parallel, otherwise false. IsZero() Is this vector zero length? Declaration public bool IsZero() Returns Type Description System.Boolean True if this vector's components are all less than Epsilon. Length() Get the length of this vector. Declaration public double Length() Returns Type Description System.Double Negate() Construct a new vector which is the inverse of this vector. Declaration public Vector3 Negate() Returns Type Description Vector3 A new vector which is the inverse of this vector. Normalized() Return a new vector which is the unitized version of this vector. Declaration public Vector3 Normalized() Returns Type Description Vector3 Project(Plane) Project this vector onto the plane. Declaration public Vector3 Project(Plane p) Parameters Type Name Description Plane p The plane on which to project the point. Returns Type Description Vector3 ProjectAlong(Vector3, Plane) Project this vector onto the plane along a vector. Declaration public Vector3 ProjectAlong(Vector3 v, Plane p) Parameters Type Name Description Vector3 v The vector along which t project. Plane p The plane on which to project. Returns Type Description Vector3 A point on the plane. ProjectOnto(Vector3) Project vector a onto this vector. Declaration public Vector3 ProjectOnto(Vector3 a) Parameters Type Name Description Vector3 a The vector to project onto this vector. Returns Type Description Vector3 A new vector which is the projection of a onto this vector. ToArray() Convert a vector's components to an array. Declaration public double[] ToArray() Returns Type Description System.Double [] An array of comprised of the x, y, and z components of this vector. ToString() A string representation of the vector. Declaration public override string ToString() Returns Type Description System.String The string representation of this vector. Operators Addition(Vector3, Vector3) Add two vectors. Declaration public static Vector3 operator +(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a The first vector. Vector3 b The second vector. Returns Type Description Vector3 A vector which is the sum of a and b. Division(Vector3, Double) Divide a vector by a scalar. Declaration public static Vector3 operator /(Vector3 v, double a) Parameters Type Name Description Vector3 v The vector to divide. System.Double a The scalar divisor. Returns Type Description Vector3 A vector whose magnitude is mutiplied by a. GreaterThan(Vector3, Vector3) Compute whether all components of vector a are greater than those of vector b. Declaration public static bool operator>(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a The first vector. Vector3 b The second vector. Returns Type Description System.Boolean True if all of a's components are greater than those of b, otherwise false. LessThan(Vector3, Vector3) Compute whether all components of vector a are less than those of vector b. Declaration public static bool operator <(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a The first vector. Vector3 b The second vector. Returns Type Description System.Boolean True if all of a's components are less than those of b, otherwise false. Multiply(Vector3, Double) Multiply a vector and a scalar. Declaration public static Vector3 operator *(Vector3 v, double a) Parameters Type Name Description Vector3 v The vector to multiply. System.Double a The scalar value to multiply. Returns Type Description Vector3 A vector whose magnitude is multiplied by a. Multiply(Double, Vector3) Multiply a scalar and a vector. Declaration public static Vector3 operator *(double a, Vector3 v) Parameters Type Name Description System.Double a The scalar value to multiply. Vector3 v The vector to multiply. Returns Type Description Vector3 A vector whose magnitude is mutiplied by a. Subtraction(Vector3, Vector3) Subtract two vectors. Declaration public static Vector3 operator -(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a The first vector. Vector3 b The second vector. Returns Type Description Vector3 A vector which is the difference between a and b. Implements IComparable<> IEquatable<>"
  },
  "api/Elements.Mass.html": {
    "href": "api/Elements.Mass.html",
    "title": "Class Mass | Hypar Docs",
    "keywords": "Class Mass An extruded volume. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Mass.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples var a = new Vector3(); var b = new Vector3(30, 10); var c = new Vector3(20, 50); var d = new Vector3(-10, 5); var poly = new Polygon(new[] { a, b, c, d }); // Create a mass. var mass = new Mass(poly, 5.0); Inheritance System.Object Element GeometricElement Mass Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Mass : GeometricElement Constructors Mass(Profile, Double, Material, Transform, Representation, Guid, String) Construct a Mass. Declaration public Mass(Profile profile, double height = 1, Material material = null, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Profile profile The profile of the mass. System.Double height The height of the mass from the bottom elevation. Material material The mass' material. The default is the built in mass material. Transform transform The mass' transform. Representation representation The mass' representation. Guid id The id of the mass. System.String name The name of the mass. Properties Height The height of the mass. Declaration public double Height { get; set; } Property Value Type Description System.Double Profile The profile of the mass. Declaration public Profile Profile { get; set; } Property Value Type Description Profile Thickness The thickness of the mass' extrusion. Declaration public double Thickness { get; } Property Value Type Description System.Double Methods ProfileTransformed() Get the profile of the mass transformed by the mass' transform. Declaration public Profile ProfileTransformed() Returns Type Description Profile UpdateRepresentations() Update the representations. Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations() Volume() The volume of the mass. Declaration public double Volume() Returns Type Description System.Double"
  },
  "api/Elements.ModelPoints.html": {
    "href": "api/Elements.ModelPoints.html",
    "title": "Class ModelPoints | Hypar Docs",
    "keywords": "Class ModelPoints A collection of points which are visible in 3D. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_ModelPoints.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create some point locations. var pts = new List<Vector3>(); for(var x=0; x<25; x++) { for(var y=0; y<25; y++) { for(var z=0; z<25; z++) { // Add points to the object. pts.Add(new Vector3(x,y,z)); } } } // Create a model points object. var pink = new Material(\"pink\", Colors.Pink); var modelPoints = new ModelPoints(pts, pink); Inheritance System.Object Element GeometricElement ModelPoints Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation GeometricElement.UpdateRepresentations() Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class ModelPoints : GeometricElement Constructors ModelPoints(IList<Vector3>, Material, Transform, Guid, String) Create a collection of points. Declaration public ModelPoints(IList<Vector3> locations = null, Material material = null, Transform transform = null, Guid id = null, string name = null) Parameters Type Name Description IList < Vector3 > locations The locations of the points. Material material The material. Specular and glossiness components will be ignored. Transform transform The model curve's transform. Guid id The id of the model curve. System.String name The name of the model curve. Properties Locations The locations of the points. Declaration public IList<Vector3> Locations { get; set; } Property Value Type Description IList < Vector3 >"
  },
  "api/Elements.Floor.html": {
    "href": "api/Elements.Floor.html",
    "title": "Class Floor | Hypar Docs",
    "keywords": "Class Floor A floor is a horizontal element defined by a profile. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Floor.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a floor with no elevation. var p = Polygon.L(10, 20, 5); var floor1 = new Floor(p, 0.1); // Create a floor with an elevation. var floor2 = new Floor(p, 0.1, new Transform(0,0,3)); // Create some openings. var openings = new List<Opening>(){ new Opening(1, 1, 1, 1), new Opening(3, 3, 1, 3), }; // Add the openings to the floor's // openings collection. floor1.Openings.AddRange(openings); Inheritance System.Object Element GeometricElement Floor Implements IHasOpenings Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Floor : GeometricElement, IHasOpenings Constructors Floor(Profile, Double, Transform, Material, Representation, Guid, String) Create a floor. Declaration public Floor(Profile profile, double thickness, Transform transform = null, Material material = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Profile profile The perimeter of the floor. System.Double thickness The thickness of the floor. Transform transform The floor's transform. Create a transform with a Z coordinate for the origin, to define the elevation of the floor. Material material The floor's material. Representation representation The floor's representation. Guid id The floor's id. System.String name The floor's name. Properties Elevation The elevation from which the floor is extruded. Declaration public double Elevation { get; } Property Value Type Description System.Double Openings A collection of openings in the floor. Declaration public List<Opening> Openings { get; } Property Value Type Description List < Opening > Profile The untransformed profile of the floor. Declaration public Profile Profile { get; set; } Property Value Type Description Profile Thickness The thickness of the floor. Declaration public double Thickness { get; set; } Property Value Type Description System.Double Methods Area() The area of the floor. Declaration public double Area() Returns Type Description System.Double The area of the floor, not including the area of openings. ProfileTransformed() Get the profile of the floor transformed by the floor's transform. Declaration public Profile ProfileTransformed() Returns Type Description Profile UpdateRepresentations() Update the representations. Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations() Volume() The area of the floor. Declaration public double Volume() Returns Type Description System.Double The area of the floor, not including the area of openings. Implements IHasOpenings"
  },
  "api/Elements.Geometry.Transform.html": {
    "href": "api/Elements.Geometry.Transform.html",
    "title": "Class Transform | Hypar Docs",
    "keywords": "Class Transform A right-handed coordinate system with +Z up. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Geometry_Transform.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples var m1 = new Mass(Polygon.Rectangle(1.0, 1.0),1.0, new Material(\"yellow\", Colors.Yellow)); this.Model.AddElement(m1); Profile prof = Polygon.Rectangle(1.0, 1.0); var j = 1.0; var count = 10; for(var i=0.0; i<360.0; i+= 360.0/(double)count) { var m2 = new Mass(prof, 1.0, new Material($\"color_{j}\", new Color((float)j - 1.0f, 0.0f, 0.0f, 1.0f)), new Transform()); // Scale the mass. m2.Transform.Scale(new Vector3(j,j,j)); // Move the mass. m2.Transform.Move(new Vector3(3, 0, 0)); // Rotate the mass. m2.Transform.Rotate(Vector3.ZAxis, i); this.Model.AddElement(m2); j += 1.0/(double)count; } Inheritance System.Object Transform Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Transform : IEquatable<Transform> Constructors Transform() Create the identity transform. Declaration public Transform() Transform(Matrix) Declaration public Transform(Matrix matrix) Parameters Type Name Description Matrix matrix Transform(Transform) Create a transform by copying another transform. Declaration public Transform(Transform t) Parameters Type Name Description Transform t The transform to copy. Transform(Vector3, Vector3, Vector3, Vector3) Create a transform by origin, X, Y, and Z axes. Declaration public Transform(Vector3 origin, Vector3 xAxis, Vector3 yAxis, Vector3 zAxis) Parameters Type Name Description Vector3 origin The origin of the transform. Vector3 xAxis The X axis of the transform. Vector3 yAxis The Y axis of the transform. Vector3 zAxis The Z axis of the transform. Transform(Vector3, Vector3, Vector3, Double) Create a transform by origin and X and Z axes. Declaration public Transform(Vector3 origin, Vector3 xAxis, Vector3 zAxis, double rotation = 0) Parameters Type Name Description Vector3 origin The origin of the transform. Vector3 xAxis The X axis of the transform. Vector3 zAxis The Z axis of the transform. System.Double rotation An optional rotation in degrees around the transform's z axis. Transform(Vector3, Vector3, Double) Create a transform centered at origin with its Z axis pointing along up. Declaration public Transform(Vector3 origin, Vector3 z, double rotation = 0) Parameters Type Name Description Vector3 origin The origin of the transform. Vector3 z The vector which will define the Z axis of the transform. System.Double rotation An optional rotation around the z axis. Transform(Vector3, Double) Create a transform with a translation. Declaration public Transform(Vector3 origin, double rotation = 0) Parameters Type Name Description Vector3 origin The origin of the transform. System.Double rotation An optional rotation in degrees around the transform's z axis. Transform(Double, Double, Double, Double) Create a transform with a translation. Declaration public Transform(double x, double y, double z, double rotation = 0) Parameters Type Name Description System.Double x The X component of translation. System.Double y The Y component of translation. System.Double z The Z component of translation. System.Double rotation An optional rotation in degrees around the transform's z axis. Properties Matrix The transform's matrix. Declaration public Matrix Matrix { get; set; } Property Value Type Description Matrix Origin The origin of the transform. Declaration public Vector3 Origin { get; } Property Value Type Description Vector3 XAxis The x axis of the transform. Declaration public Vector3 XAxis { get; } Property Value Type Description Vector3 YAxis The y axis of the transform. Declaration public Vector3 YAxis { get; } Property Value Type Description Vector3 ZAxis The z axis of the transform. Declaration public Vector3 ZAxis { get; } Property Value Type Description Vector3 Methods Concatenate(Transform) Concatenate the transform. Declaration public void Concatenate(Transform transform) Parameters Type Name Description Transform transform CreateOrientedAlongCurve(Curve, Double, Vector3) Create a transform that is oriented along a curve at parameter t. The transform's +z axis will align with the +z world axis, and the +x axis will align with the tangent of the curve. Declaration public static Transform CreateOrientedAlongCurve(Curve curve, double t, Vector3 up = default(Vector3)) Parameters Type Name Description Curve curve The curve along which to orient the transform. System.Double t A parameter value between 0.0 and 1.0. Vector3 up Returns Type Description Transform Equals(Transform) Is this transform equal to the provided transform? Declaration public bool Equals(Transform other) Parameters Type Name Description Transform other The transform to test. Returns Type Description System.Boolean True if the two transforms are equal, otherwise false. Invert() Invert this transform. Declaration public void Invert() Move(Vector3) Apply a translation to the transform. Declaration public void Move(Vector3 translation) Parameters Type Name Description Vector3 translation The translation to apply. OfLine(Line) Transform the specified line. Declaration public Line OfLine(Line line) Parameters Type Name Description Line line The line to transform. Returns Type Description Line A new line transformed by this transform. OfPlane(Plane) Transform the specified plane. Declaration public Plane OfPlane(Plane plane) Parameters Type Name Description Plane plane The plane to transform. Returns Type Description Plane A new plane transformed by this transform. OfPoint(Vector3) Transform a vector into the coordinate space defined by this transform ignoring the translation. Declaration public Vector3 OfPoint(Vector3 vector) Parameters Type Name Description Vector3 vector The vector to transform. Returns Type Description Vector3 A new vector transformed by this transform. OfPolygon(Polygon) Transform the specified polygon. Declaration public Polygon OfPolygon(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to transform. Returns Type Description Polygon A new polygon transformed by this transform. OfPolygons(IList<Polygon>) Transform the specified polygons. Declaration public Polygon[] OfPolygons(IList<Polygon> polygons) Parameters Type Name Description IList < Polygon > polygons The polygons to transform. Returns Type Description Polygon [] An array of polygons transformed by this transform. OfProfile(Profile) Transform the specified profile. Declaration public Profile OfProfile(Profile profile) Parameters Type Name Description Profile profile The profile to transform. Returns Type Description Profile A new profile transformed by this transform. OfVector(Vector3) Transform a vector into the coordinate space defined by this transform. Declaration public Vector3 OfVector(Vector3 vector) Parameters Type Name Description Vector3 vector The vector to transform. Returns Type Description Vector3 A new vector transformed by this transform. Rotate(Vector3, Double) Apply a rotation to the transform. Declaration public void Rotate(Vector3 axis, double angle) Parameters Type Name Description Vector3 axis The axis of rotation. System.Double angle The angle of rotation in degrees. Scale(Vector3) Apply a scale to the transform. Declaration public void Scale(Vector3 amount) Parameters Type Name Description Vector3 amount The amount to scale. ToString() Get a string representation of the transform. Declaration public override string ToString() Returns Type Description System.String A string representation of the transform. XY() Calculate XY plane of the transform. Declaration public Plane XY() Returns Type Description Plane XZ() Calculate the XZ plane of the transform. Declaration public Plane XZ() Returns Type Description Plane YZ() Calculate the YZ plane of the transform. Declaration public Plane YZ() Returns Type Description Plane Extension Methods ModelCurveExtensions.ToModelCurves(Transform, Transform)"
  },
  "api/Elements.Geometry.Line.html": {
    "href": "api/Elements.Geometry.Line.html",
    "title": "Class Line | Hypar Docs",
    "keywords": "Class Line A line between two points. The line is parameterized from 0.0(start) to 1.0(end) Inheritance System.Object Curve Line Implements ICurve IEquatable < Line > Inherited Members Curve.MinimumChordLength Curve.Frames(Double, Double) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Line : Curve, ICurve, IEquatable<Line> Constructors Line(Vector3, Vector3) Declaration public Line(Vector3 start, Vector3 end) Parameters Type Name Description Vector3 start Vector3 end Line(Vector3, Vector3, Double) Construct a line of length from a start along direction. Declaration public Line(Vector3 start, Vector3 direction, double length) Parameters Type Name Description Vector3 start Vector3 direction System.Double length Properties End The end of the line. Declaration public Vector3 End { get; set; } Property Value Type Description Vector3 Start The start of the line. Declaration public Vector3 Start { get; set; } Property Value Type Description Vector3 Methods Bounds() Get the bounding box for this line. Declaration public override BBox3 Bounds() Returns Type Description BBox3 A bounding box for this line. Overrides Curve.Bounds() Direction() A normalized vector representing the direction of the line. Declaration public Vector3 Direction() Returns Type Description Vector3 DivideByCount(Int32) Divide the line into n+1 equal segments. Declaration public List<Line> DivideByCount(int n) Parameters Type Name Description System.Int32 n The number of segments. Returns Type Description List < Line > DivideByLength(Double, Boolean) Divide the line into as many segments of length l as possible. Declaration public List<Line> DivideByLength(double l, bool removeShortSegments = false) Parameters Type Name Description System.Double l The length. System.Boolean removeShortSegments A flag indicating whether segments shorter than l should be removed. Returns Type Description List < Line > Equals(Line) Is this line equal to the provided line? Declaration public bool Equals(Line other) Parameters Type Name Description Line other The target line. Returns Type Description System.Boolean True if the start and end points of the lines are equal, otherwise false. GetHashCode() Get the hash code for the line. Declaration public override int GetHashCode() Returns Type Description System.Int32 Intersects(Plane, out Vector3) Intersect this line with the specified plane Declaration public bool Intersects(Plane p, out Vector3 result) Parameters Type Name Description Plane p The plane. Vector3 result The location of intersection. Returns Type Description System.Boolean True if the line intersects the plane, false if no intersection occurs. Intersects2D(Line) Does this line intersect the provided line in 2D? Declaration public bool Intersects2D(Line l) Parameters Type Name Description Line l Returns Type Description System.Boolean Return true if the lines intersect, false if the lines have coincident vertices or do not intersect. Length() Calculate the length of the line. Declaration public override double Length() Returns Type Description System.Double Overrides Curve.Length() PointAt(Double) Get a point along the line at parameter u. Declaration public override Vector3 PointAt(double u) Parameters Type Name Description System.Double u Returns Type Description Vector3 A point on the curve at parameter u. Overrides Curve.PointAt(Double) Reversed() Get a new line that is the reverse of the original line. Declaration public Line Reversed() Returns Type Description Line Thicken(Double) Thicken a line by the specified amount. Declaration public Polygon Thicken(double amount) Parameters Type Name Description System.Double amount The amount to thicken the line. Returns Type Description Polygon TransformAt(Double) Get a transform whose XY plane is perpendicular to the curve, and whose positive Z axis points along the curve. Declaration public override Transform TransformAt(double u) Parameters Type Name Description System.Double u The parameter along the Line, between 0.0 and 1.0, at which to calculate the Transform. Returns Type Description Transform A transform. Overrides Curve.TransformAt(Double) Implements ICurve IEquatable<>"
  },
  "api/Elements.Geometry.Profiles.WideFlangeProfileServer.html": {
    "href": "api/Elements.Geometry.Profiles.WideFlangeProfileServer.html",
    "title": "Class WideFlangeProfileServer | Hypar Docs",
    "keywords": "Class WideFlangeProfileServer A singleton class which serves every Wide Flange section as defined by AISC. Inheritance System.Object ProfileServer < WideFlangeProfileType > WideFlangeProfileServer Inherited Members ProfileServer<WideFlangeProfileType>.InchesToMeters ProfileServer<WideFlangeProfileType>._profiles ProfileServer<WideFlangeProfileType>.GetProfileByName(String) ProfileServer<WideFlangeProfileType>.GetProfileByType(WideFlangeProfileType) ProfileServer<WideFlangeProfileType>.AllProfiles() Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public sealed class WideFlangeProfileServer : ProfileServer<WideFlangeProfileType> Properties Instance The WideFlangeProfileServer singleton. Declaration public static WideFlangeProfileServer Instance { get; } Property Value Type Description WideFlangeProfileServer"
  },
  "api/Elements.Serialization.glTF.GltfExtensions.html": {
    "href": "api/Elements.Serialization.glTF.GltfExtensions.html",
    "title": "Class GltfExtensions | Hypar Docs",
    "keywords": "Class GltfExtensions Extensions for glTF serialization. Inheritance System.Object GltfExtensions Namespace : Elements.Serialization.glTF Assembly : Hypar.Elements.dll Syntax public static class GltfExtensions : object Methods ToBase64String(Model) Convert the Model to a base64 encoded string. Declaration public static string ToBase64String(this Model model) Parameters Type Name Description Model model Returns Type Description System.String A Base64 string representing the Model. ToGlTF(Model, String, Boolean) Save a model to gltf. If there is no geometry, an empty GLTF will still be produced. Declaration public static void ToGlTF(this Model model, string path, bool useBinarySerialization = true) Parameters Type Name Description Model model The model to serialize. System.String path The output path. System.Boolean useBinarySerialization Should binary serialization be used?"
  },
  "api/Elements.Space.html": {
    "href": "api/Elements.Space.html",
    "title": "Class Space | Hypar Docs",
    "keywords": "Class Space An extruded region of occupiable space. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Space.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a space. var a = new Vector3(); var b = new Vector3(30, 10); var c = new Vector3(20, 50); var d = new Vector3(-10, 5); var profile = new Profile(new Polygon(new[]{a,b,c,d})); var space = new Space(profile, 10); Inheritance System.Object Element GeometricElement Space Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Space : GeometricElement Constructors Space(Profile, Double, Material, Transform, Representation, Guid, String) Construct a space. Declaration public Space(Profile profile, double height, Material material = null, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Profile profile The profile of the space. System.Double height The height of the space. Material material The space's material. Transform transform The space's transform. Representation representation The space's represenation. Guid id The id of the space. System.String name The name of the space. Properties Height The space's height. Declaration public double Height { get; set; } Property Value Type Description System.Double Profile The profile of the space. Declaration public Profile Profile { get; set; } Property Value Type Description Profile Methods Area() The spaces's area. Declaration public double Area() Returns Type Description System.Double ProfileTransformed() Get the profile of the space transformed by the space's transform. Declaration public Profile ProfileTransformed() Returns Type Description Profile UpdateRepresentations() Update representations. Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations() Volume() The spaces's volume. Declaration public double Volume() Returns Type Description System.Double"
  },
  "api/Elements.StandardWall.html": {
    "href": "api/Elements.StandardWall.html",
    "title": "Class StandardWall | Hypar Docs",
    "keywords": "Class StandardWall A wall defined by a planar curve, a height, and a thickness. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_StandardWall.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a wall. var line = new Line(new Vector3(0, 0, 0), new Vector3(10, 10, 0)); var wall = new StandardWall(line, 0.1, 3.0); // Create some openings. var openings = new List<Opening>(){ new Opening(1.0, 2.0, 1.0, 1.0), new Opening(3.0, 1.0, 1.0, 2.0) }; wall.Openings.AddRange(openings); Inheritance System.Object Element GeometricElement Wall StandardWall Implements IHasOpenings Inherited Members Wall.Height Wall.Profile GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class StandardWall : Wall, IHasOpenings Constructors StandardWall(Line, Double, Double, Material, Transform, Representation, Guid, String) Construct a wall along a line. Declaration public StandardWall(Line centerLine, double thickness, double height, Material material = null, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Line centerLine The center line of the wall. System.Double thickness The thickness of the wall. System.Double height The height of the wall. Material material The wall's material. Transform transform The transform of the wall. This transform will be concatenated to the transform created to describe the wall in 2D. Representation representation The wall's representation. Guid id The id of the wall. System.String name The name of the wall. Properties CenterLine The center line of the wall. Declaration public Line CenterLine { get; } Property Value Type Description Line Openings A collection of openings in the floor. Declaration public List<Opening> Openings { get; } Property Value Type Description List < Opening > Thickness The thickness of the wall. Declaration public double Thickness { get; set; } Property Value Type Description System.Double Methods UpdateRepresentations() Update solid operations. Declaration public override void UpdateRepresentations() Overrides Wall.UpdateRepresentations() Implements IHasOpenings"
  },
  "api/Elements.UserElement.html": {
    "href": "api/Elements.UserElement.html",
    "title": "Class UserElement | Hypar Docs",
    "keywords": "Class UserElement An attribute which defines an element as a user-defined element type. Inheritance System.Object UserElement Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class UserElement : Attribute"
  },
  "api/Elements.Validators.ArcValidator.html": {
    "href": "api/Elements.Validators.ArcValidator.html",
    "title": "Class ArcValidator | Hypar Docs",
    "keywords": "Class ArcValidator Inheritance System.Object ArcValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class ArcValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Validators.ColorValidator.html": {
    "href": "api/Elements.Validators.ColorValidator.html",
    "title": "Class ColorValidator | Hypar Docs",
    "keywords": "Class ColorValidator Inheritance System.Object ColorValidator Implements IValidator Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public class ColorValidator : object, IValidator Properties ValidatesType Declaration public Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Declaration public void Validate(object[] args) Parameters Type Name Description System.Object [] args Implements IValidator"
  },
  "api/Elements.Beam.html": {
    "href": "api/Elements.Beam.html",
    "title": "Class Beam | Hypar Docs",
    "keywords": "Class Beam A structural framing element defined by a center line curve and a profile. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Beam.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a framing type. var profile = WideFlangeProfileServer.Instance.GetProfileByType(WideFlangeProfileType.W10x100); // Create a straight beam. var line = new Line(Vector3.Origin, new Vector3(5,0,5)); var linearBeam = new Beam(line, profile, BuiltInMaterials.Wood, 0, 0, 15); var lineT = line.TransformAt(0).ToModelCurves(linearBeam.Transform); // Create a polygon beam. var polygon = Polygon.Ngon(5, 2); var polygonBeam = new Beam(polygon, profile, BuiltInMaterials.Steel, 0, 0, 45.0, new Transform(6,0,0)); var polyT = polygon.TransformAt(0).ToModelCurves(polygonBeam.Transform); // Create a curved beam. var arc = new Arc(Vector3.Origin, 5.0, 45.0, 135.0); var arcBeam = new Beam(arc, profile, BuiltInMaterials.Steel, 0, 0, 45.0, new Transform(12,0,0)); var arcT = arc.TransformAt(0).ToModelCurves(arcBeam.Transform); Inheritance System.Object Element GeometricElement StructuralFraming Beam Inherited Members StructuralFraming.Curve StructuralFraming.StartSetback StructuralFraming.EndSetback StructuralFraming.Profile StructuralFraming.Rotation StructuralFraming.Volume() StructuralFraming.ProfileTransformed() StructuralFraming.UpdateRepresentations() GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Beam : StructuralFraming Constructors Beam(Curve, Profile, Material, Double, Double, Double, Transform, Guid, String) Construct a beam. Declaration public Beam(Curve curve, Profile profile, Material material = null, double startSetback = 0, double endSetback = 0, double rotation = 0, Transform transform = null, Guid id = null, string name = null) Parameters Type Name Description Curve curve The beam's center line. Profile profile The beam's profile. Material material The beam's material. System.Double startSetback The setback of the beam's geometry at the start. System.Double endSetback The setback of the beam's geometry at the end. System.Double rotation An optional rotation of the beam's cross section around it's axis. Transform transform The beam's transform. Guid id The id of the transform. System.String name The name of the transform."
  },
  "api/Elements.GeoJSON.Line.html": {
    "href": "api/Elements.GeoJSON.Line.html",
    "title": "Class Line | Hypar Docs",
    "keywords": "Class Line A GeoJSON line. Inheritance System.Object Geometry Line Inherited Members Geometry.Type Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Line : Geometry Constructors Line(Position[]) Construct a Line. Declaration public Line(Position[] coordinates) Parameters Type Name Description Position [] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[] Coordinates { get; } Property Value Type Description Position []"
  },
  "api/Elements.GeoJSON.Point.html": {
    "href": "api/Elements.GeoJSON.Point.html",
    "title": "Class Point | Hypar Docs",
    "keywords": "Class Point A GeoJSON point. Inheritance System.Object Geometry Point Inherited Members Geometry.Type Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Point : Geometry Constructors Point(Position) Construct a Point. Declaration public Point(Position coordinates) Parameters Type Name Description Position coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position Coordinates { get; } Property Value Type Description Position"
  },
  "api/Elements.Geometry.Matrix.html": {
    "href": "api/Elements.Geometry.Matrix.html",
    "title": "Class Matrix | Hypar Docs",
    "keywords": "Class Matrix A column-ordered 4x3 matrix. Inheritance System.Object Matrix Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Matrix : IEquatable<Matrix> Constructors Matrix() Construct a 4X3 matrix. Declaration public Matrix() Matrix(Vector3, Vector3, Vector3, Vector3) Construct a matrix from axes. Declaration public Matrix(Vector3 xAxis, Vector3 yAxis, Vector3 zAxis, Vector3 translation) Parameters Type Name Description Vector3 xAxis The X axis. Vector3 yAxis The Y axis. Vector3 zAxis The Z axis. Vector3 translation The translation. Matrix(IList<Double>) Declaration public Matrix(IList<double> components) Parameters Type Name Description IList < System.Double > components Properties Components The components of the matrix. Declaration public IList<double> Components { get; set; } Property Value Type Description IList < System.Double > m11 m11 Declaration public double m11 { get; set; } Property Value Type Description System.Double m12 m12 Declaration public double m12 { get; set; } Property Value Type Description System.Double m13 m13 Declaration public double m13 { get; set; } Property Value Type Description System.Double m21 m21 Declaration public double m21 { get; set; } Property Value Type Description System.Double m22 m22 Declaration public double m22 { get; set; } Property Value Type Description System.Double m23 m23 Declaration public double m23 { get; set; } Property Value Type Description System.Double m31 m31 Declaration public double m31 { get; set; } Property Value Type Description System.Double m32 m32 Declaration public double m32 { get; set; } Property Value Type Description System.Double m33 m33 Declaration public double m33 { get; set; } Property Value Type Description System.Double Translation The translation component of the Matrix. Declaration public Vector3 Translation { get; } Property Value Type Description Vector3 tx tx Declaration public double tx { get; set; } Property Value Type Description System.Double ty ty Declaration public double ty { get; set; } Property Value Type Description System.Double tz tz Declaration public double tz { get; set; } Property Value Type Description System.Double XAxis The X axis of the Matrix. Declaration public Vector3 XAxis { get; } Property Value Type Description Vector3 YAxis The Y axis of the Matrix. Declaration public Vector3 YAxis { get; } Property Value Type Description Vector3 ZAxis The Z axis of the Matrix. Declaration public Vector3 ZAxis { get; } Property Value Type Description Vector3 Methods Determinant() Compute the determinant of the 3x3 portion of the matrix. Declaration public double Determinant() Returns Type Description System.Double Equals(Matrix) Is this matrix equal to other? Declaration public bool Equals(Matrix other) Parameters Type Name Description Matrix other The transform to test. Returns Type Description System.Boolean True if the two transforms are equal, otherwise false. Inverse() Compute the inverse of the matrix. Declaration public Matrix Inverse() Returns Type Description Matrix SetIdentity() Set the matrix to identity. Declaration public void SetIdentity() SetTranslation(Vector3) Set the translation of the matrix. Declaration public void SetTranslation(Vector3 v) Parameters Type Name Description Vector3 v The translation vector. SetupProject(Plane) Setup the matrix to project. Declaration public void SetupProject(Plane p) Parameters Type Name Description Plane p The plane on which to project. SetupRotate(Vector3, Double) Setup the matrix to perform rotation. Declaration public void SetupRotate(Vector3 axis, double theta) Parameters Type Name Description Vector3 axis The axis of rotation. System.Double theta The angle of rotation in radians. SetupRotate(Int32, Double) Setup the matrix to rotate. Declaration public void SetupRotate(int axis, double theta) Parameters Type Name Description System.Int32 axis The axis of rotation. 1-x, 2-y, 3-z System.Double theta The angle of rotation in radians. SetupScale(Vector3) Setup the matrix to scale. Declaration public void SetupScale(Vector3 s) Parameters Type Name Description Vector3 s The scale value. SetupTranslation(Vector3) Setup the matrix to translate. Declaration public void SetupTranslation(Vector3 v) Parameters Type Name Description Vector3 v The translation. ToString() Return the string representation of the matrix. Declaration public override string ToString() Returns Type Description System.String Transpose() Transpose the matrix. Declaration public Matrix Transpose() Returns Type Description Matrix ZeroTranslation() Set the translation of the matrix to zero. Declaration public void ZeroTranslation() Operators Multiply(Matrix, Matrix) Multiply two matrices. Declaration public static Matrix operator *(Matrix a, Matrix b) Parameters Type Name Description Matrix a Matrix b Returns Type Description Matrix Multiply(Vector3, Matrix) Transform the specified vector. Declaration public static Vector3 operator *(Vector3 p, Matrix m) Parameters Type Name Description Vector3 p The vector to transform. Matrix m The transformation matrix. Returns Type Description Vector3"
  },
  "api/Elements.Geometry.Mesh.html": {
    "href": "api/Elements.Geometry.Mesh.html",
    "title": "Class Mesh | Hypar Docs",
    "keywords": "Class Mesh An indexed mesh. Inheritance System.Object Mesh Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Mesh : object Constructors Mesh() Construct an empty mesh. Declaration public Mesh() Properties Triangles The mesh's triangles. Declaration public List<Triangle> Triangles { get; } Property Value Type Description List < Triangle > Vertices The mesh's vertices. Declaration public List<Vertex> Vertices { get; } Property Value Type Description List < Vertex > Methods GetBuffers(out Byte[], out Byte[], out Byte[], out Byte[], out Byte[], out Double[], out Double[], out Double[], out Double[], out Single[], out Single[], out UInt16, out UInt16, out Double[], out Double[]) Get all buffers required for rendering. Declaration public void GetBuffers(out byte[] vertexBuffer, out byte[] indexBuffer, out byte[] normalBuffer, out byte[] colorBuffer, out byte[] uvBuffer, out double[] v_max, out double[] v_min, out double[] n_min, out double[] n_max, out float[] c_min, out float[] c_max, out ushort index_min, out ushort index_max, out double[] uv_min, out double[] uv_max) Parameters Type Name Description System.Byte [] vertexBuffer System.Byte [] indexBuffer System.Byte [] normalBuffer System.Byte [] colorBuffer System.Byte [] uvBuffer System.Double [] v_max System.Double [] v_min System.Double [] n_min System.Double [] n_max System.Single [] c_min System.Single [] c_max System.UInt16 index_min System.UInt16 index_max System.Double [] uv_min System.Double [] uv_max ToString() Get a string representation of the mesh. Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Elements.Serialization.JSON.JsonInheritanceConverter.html": {
    "href": "api/Elements.Serialization.JSON.JsonInheritanceConverter.html",
    "title": "Class JsonInheritanceConverter | Hypar Docs",
    "keywords": "Class JsonInheritanceConverter Inheritance System.Object JsonInheritanceConverter Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter Constructors JsonInheritanceConverter() Declaration public JsonInheritanceConverter() JsonInheritanceConverter(String) Declaration public JsonInheritanceConverter(string discriminator) Parameters Type Name Description System.String discriminator Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Elements Declaration public static Dictionary<Guid, Element> Elements { get; } Property Value Type Description Dictionary < Guid , Element > Methods CanConvert(System.Type) Declaration public override bool CanConvert(System.Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean ReadJson(Newtonsoft.Json.JsonReader, System.Type, Object, Newtonsoft.Json.JsonSerializer) Declaration public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object WriteJson(Newtonsoft.Json.JsonWriter, Object, Newtonsoft.Json.JsonSerializer) Declaration public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer"
  },
  "api/Elements.StructuralFraming.html": {
    "href": "api/Elements.StructuralFraming.html",
    "title": "Class StructuralFraming | Hypar Docs",
    "keywords": "Class StructuralFraming A structural element with a profile swept along a curve. Inheritance System.Object Element GeometricElement StructuralFraming Beam Brace Column Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public abstract class StructuralFraming : GeometricElement Constructors StructuralFraming(Curve, Profile, Material, Double, Double, Double, Transform, Representation, Guid, String) Construct a beam. Declaration public StructuralFraming(Curve curve, Profile profile, Material material = null, double startSetback = 0, double endSetback = 0, double rotation = 0, Transform transform = null, Representation representation = null, Guid id = null, string name = null) Parameters Type Name Description Curve curve The center line of the beam. Profile profile The structural framing's profile. Material material The structural framing's material. System.Double startSetback The setback distance of the beam's extrusion at its start. System.Double endSetback The setback distance of the beam's extrusion at its end. System.Double rotation An optional rotation in degrees of the transform around its z axis. Transform transform The element's Transform. Representation representation The structural framing's representation. Guid id The structural framing's id. System.String name The structural framing's name. Properties Curve The center line of the framing element. Declaration public Curve Curve { get; set; } Property Value Type Description Curve EndSetback The setback of the framing's extrusion at the end. Declaration public double EndSetback { get; set; } Property Value Type Description System.Double Profile The structural framing's profile. Declaration public Profile Profile { get; set; } Property Value Type Description Profile Rotation The profile rotation around the center curve of the beam in degrees. Declaration public double Rotation { get; set; } Property Value Type Description System.Double StartSetback The setback of the framing's extrusion at the start. Declaration public double StartSetback { get; set; } Property Value Type Description System.Double Methods ProfileTransformed() Get the cross-section profile of the framing element transformed by the element's transform. Declaration public Profile ProfileTransformed() Returns Type Description Profile UpdateRepresentations() Update the representations. Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations() Volume() Calculate the volume of the element. Declaration public double Volume() Returns Type Description System.Double"
  },
  "api/Elements.Topography.html": {
    "href": "api/Elements.Topography.html",
    "title": "Class Topography | Hypar Docs",
    "keywords": "Class Topography A topographic mesh defined by an array of elevation values. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Topography.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Read topo elevations from a file. var w = 512/8 - 1; var data = JsonConvert.DeserializeObject<Dictionary<string,double[]>>(File.ReadAllText(\"./elevations.json\")); var elevations = data[\"points\"]; // Compute the mapbox tile size. var cellSize = (40075016.685578 / Math.Pow(2, 15))/w; // Create a topography. var topo = new Topography(Vector3.Origin, cellSize, cellSize, elevations, w); Inheritance System.Object Element GeometricElement Topography Implements ITessellate Inherited Members GeometricElement.Transform GeometricElement.Material GeometricElement.Representation Element.Id Element.Name Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Topography : GeometricElement, ITessellate Constructors Topography(Vector3, Double, Double, Double[], Int32, Material) Create a topography. Declaration public Topography(Vector3 origin, double cellWidth, double cellHeight, double[] elevations, int rowWidth, Material material = null) Parameters Type Name Description Vector3 origin The origin of the topography. System.Double cellWidth The width of each square \"cell\" of the topography. System.Double cellHeight The height of each square \"cell\" of the topography. System.Double [] elevations An array of elevation samples which will be converted to a square array of width. System.Int32 rowWidth Material material The topography's material. Properties CellHeight The height of a cell. Declaration public double CellHeight { get; } Property Value Type Description System.Double CellWidth The width of a cell. Declaration public double CellWidth { get; } Property Value Type Description System.Double Elevations A flat list of elevation data which is used to generate the topographic mesh's vertices. The elevations will be used with the RowWidth property to convert the flat list into a square grid. Declaration public double[] Elevations { get; } Property Value Type Description System.Double [] MaxElevation The maximum elevation of the topography. Declaration public double MaxElevation { get; } Property Value Type Description System.Double Mesh The topography's mesh. Declaration public Mesh Mesh { get; } Property Value Type Description Mesh MinElevation The minimum elevation of the topography. Declaration public double MinElevation { get; } Property Value Type Description System.Double Origin The origin of the topography. Declaration public Vector3 Origin { get; } Property Value Type Description Vector3 RowWidth The number of cells 'across' the topography. Declaration public int RowWidth { get; } Property Value Type Description System.Int32 Methods Tessellate(ref Mesh) Tessellate the topography. Declaration public void Tessellate(ref Mesh mesh) Parameters Type Name Description Mesh mesh The mesh into which the topography's facets will be added. UpdateRepresentations() Update the representations. Declaration public override void UpdateRepresentations() Overrides GeometricElement.UpdateRepresentations() Implements ITessellate"
  },
  "api/Elements.Element.html": {
    "href": "api/Elements.Element.html",
    "title": "Class Element | Hypar Docs",
    "keywords": "Class Element An object which is identified with a unique identifier and a name. Inheritance System.Object Element GeometricElement Profile Material Namespace : Elements Assembly : Hypar.Elements.dll Syntax public abstract class Element : object Constructors Element(System.Guid, String) Declaration public Element(System.Guid id, string name) Parameters Type Name Description System.Guid id System.String name Properties Id A unique id. Declaration public System.Guid Id { get; set; } Property Value Type Description System.Guid Name A name. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/Elements.Properties.NumericPropertyUnitType.html": {
    "href": "api/Elements.Properties.NumericPropertyUnitType.html",
    "title": "Enum NumericPropertyUnitType | Hypar Docs",
    "keywords": "Enum NumericPropertyUnitType Namespace : Elements.Properties Assembly : Hypar.Elements.dll Syntax public enum NumericPropertyUnitType : int Fields Name Description Area Currency Force Length Mass Number Pressure Time Volume"
  },
  "api/Elements.Validators.IValidator.html": {
    "href": "api/Elements.Validators.IValidator.html",
    "title": "Interface IValidator | Hypar Docs",
    "keywords": "Interface IValidator Implement this interface to act as a validator. Namespace : Elements.Validators Assembly : Hypar.Elements.dll Syntax public interface IValidator Properties ValidatesType The type to be validated. Declaration Type ValidatesType { get; } Property Value Type Description Type Methods Validate(Object[]) Validate the type with the provided arguments. Declaration void Validate(object[] args) Parameters Type Name Description System.Object [] args"
  },
  "api/Elements.Interfaces.IHasOpenings.html": {
    "href": "api/Elements.Interfaces.IHasOpenings.html",
    "title": "Interface IHasOpenings | Hypar Docs",
    "keywords": "Interface IHasOpenings Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IHasOpenings Properties Openings A collection of openings. Declaration List<Opening> Openings { get; } Property Value Type Description List < Opening >"
  },
  "api/Elements.Interfaces.html": {
    "href": "api/Elements.Interfaces.html",
    "title": "Namespace Elements.Interfaces | Hypar Docs",
    "keywords": "Namespace Elements.Interfaces Interfaces IHasOpenings"
  },
  "Elements/WhatIsElements.html": {
    "href": "Elements/WhatIsElements.html",
    "title": "What is Elements? | Hypar Docs",
    "keywords": "What is Elements? Elements is a cross-platform library for creating building elements. It's meant to be used by architects, engineers, and other building professionals who want to write code that generates buildings. When we started Hypar we needed a library that would generate building elements and run at the core of each function on the platform. Because we don't like rebuilding the wheel, we looked around for existing libraries that fulfilled the following requirements: The library must be small and fast. Elements is currently ~300kb and we're working every day to make it smaller. The library must be cross-platform. The library must have great visual documentation. If we're going to pass this library on as a recommendation to developers on Hypar, we want great docs. The library must be free of dependencies on host applications like Rhino or Revit or geometry kernels like Open Cascade which, while really cool, become a black box in your system. The library must be able to serialize data to formats like JSON, IFC ,and glTF , that are useful to architects, engineers, contractors, and people building real-time visualization applications for AEC. The library must be written in a language that supports developer productivity through things like type safety, and which supports code re-use in other popular AEC applications like Dynamo, Grasshopper, Revit, and Unity. Serialization and deserialization of types that extend Element should be possible provided that those types are made up of primitives defined in this library. We couldn't find anything quite right. So we started building this."
  },
  "Types.html": {
    "href": "Types.html",
    "title": "Types | Hypar Docs",
    "keywords": "Types NOTE: The following functionality is only available as of version 0.4.0. Let's say that you're a mechanical engineer and you want to introduce a new type to Elements called \"VAV Box\". To introduce this new type, first you need to design it. Where will it fit in the existing Elements type hierarchy? Will an existing base type be used? If so, will the base type need to be changed? Once that's figured out you'll need to write code that represents your type (in the case of Elements as a C# class) and propose that change to the maintainers of the library. The maintainers approve the change and your \"VAV Box\" class is made availble in the next release. Any small iteration on the design of your type based on use or user feedback requires that you repeat the whole cycle. This scenario creates several challenges. First, it requires direct interaction with the maintainers of the Elements library. Most AEC developers don't know how to propose a change to the Elements code and requiring that they undertake our code review process just to introduce a container for data that represents a thing they know is challenging. Second, the maintainers of Elements now \"own\" the \"VAV Box\" type and are therefore required to make sure that they don't break it in the future. Imagine how many hundreds of thousands, or potentially millions, of different types of components are in a building. It's not reasonable to assume that one library is going to be able to encapsulate them all. Finally, although having the base description for a type be C# code works well in the short term, it limits the Elements' team's flexibility in the future to work with other languages. To address these challenges we've introduced the ability for an AEC developer to create a schema which describes their type using JSON schema , and to generate source code from that schema. Schemas can be shared and extended allowing for the growth of a type system from the community. Getting Started Core Concepts Element The primary concept behind Elements types is the Element . An Element is the base type for all things that you will create. It has a unique identifier and a name. That's it. Everything else will be added by you. Primitives An Element is extended by adding properties to a schema. The properties can be of the following types. Curve Arc - An arc defined by a center and a radius. Line - A line defined by a start and end points. Polygon - A collection of vertices describing an enclosed polygonal shape. Material - A material specified using the physically based rendering model. NumericProperty - A property value with a unit type. Plane - A plane described by its origin and normal vector. Profile - A composite type containing a perimeter Polygon and a collection of Polygon Representation - A container for solid operations like Extrude and Sweep . Transform - A right-handed coordinate system with +Z \"up\". Vector3 - A vector with x, y, and z components. Create a Type The first step is to define a schema that represents your type. Good examples for what a schema looks like can be found in the Hypar base schemas. Here's the schema for GeometricElement , a type which extends Element to include a Transform and a Representation . JSON schemas can be authored in any text editor, although an editor with good JSON schema support, like Visual Studio Code , is recommended. Good editors have built in JSON schema validation and code completion. You can also use an online validator . An Example Beam The following schema describes a simple beam with a center line and a cross-section profile. Note that using the allOf field, we can inherit from GeometricElement so that a Beam will extend that base type. { \"$id\": \"https://hypar.io/Schemas/Beam.json\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"description\": \"A beam.\", \"title\": \"Beam\", \"x-namespace\": \"Elements\", \"type\": [\"object\", \"null\"], \"allOf\": [{\"$ref\": \"https://hypar.io/Schemas/GeometricElement.json\"}], \"required\": [\"CenterLine\", \"Profile\"], \"properties\": { \"CenterLine\": { \"description\": \"The center line of the beam.\", \"$ref\": \"https://hypar.io/Schemas/Geometry/Line.json\" }, \"Profile\": { \"description\": \"The beam's cross section.\", \"$ref\": \"https://hypar.io/Schemas/Geometry/Profile.json\" } }, \"additionalProperties\": false } Generate Code for your Type The Hypar CLI can be used to generate code for your type. hypar generate-types -u ./beam.json -o ./Structural Generate Code for your Hypar Function You can specify that your Hypar function requires additional types by declaring those types in the element_types property of the hypar.json . The element_types array contains uris, either as relative file paths or urls to JSON schemas representing types. When you run hypar init code will be generated from each of the schemas specified in the element_types array and placed in your function's /src directory."
  },
  "index.html": {
    "href": "index.html",
    "title": "Getting Started with Hypar | Hypar Docs",
    "keywords": "Getting Started with Hypar Hypar is a cloud platform for generating buildings that makes it easy to publish, distribute, and maintain your building design logic. Rather than requiring web development skills to scale and deliver your design logic, Hypar lets you concentrate on what you want to get done while the platform creates the interface for your audience and provides computation, visualization, delivery, interoperability, and access control for your functions. By uploading a function to Hypar you can produce multiple options for a building problem in just a few seconds, and combine them with other people's functions to create rich, realistic designs: In this introduction to Hypar, we'll work with a much simpler function that generates masses of variable dimensions. Pre-Flight Check Before getting started, there are a few things you'll need and some other things you might want to know. Things you'll need A 'modern' web browser. We'll use Google Chrome for this guide, but Firefox or Brave should also work fine. Chrome Firefox Brave VSCode (Windows, Mac OS, Linux) or any other C#-compatible code editor. We strongly suggest using VSCode , because we make a very helpful Hypar Plugin for VSCode (see the next bullet). These instructions currently assume you're using Visual Studio Community 2019+, but the steps should be similar and we'll update this guide soon. Download VSCode If you're using VSCode, install the Hypar Function Builder extension: Select \"Extensions\" in the \"View\" menu. Search for \"Hypar\". Click \"Install\" on Hypar Function Builder . Access to a command line for your operating system. We'll use the Windows Command Prompt for this guide, but other operating system command prompts should work similarly. Microsoft .Net Core 2.1. Hypar uses the cross-platform dotnet framework created and maintained by Microsoft. The version number is important! There might be issues with later or earlier versions of .Net Core. .Net Core 2.1 Things you might want to know Basic familiarity with the C# programming language will help, but if you're not familiar with C# we'll do our best to walk you through making changes to the initial code you'll get by following the steps in this guide. If you want to share your Hypar functions, you have to explicitly make your work public, so don't worry that perfect strangers are judging your work. They will, but only if you decide to make them public. The procedures you'll use in this guide compile your code on your desktop and only upload the resulting binary file. No one at Hypar will examine your source code because we won't have it unless you make it public by some other means or if you send it to us so we can help you solve a problem. None of the Hypar libraries you'll use in this guide bind your code to Hypar web services. For example, if you'd like to use the Elements library for a desktop application, it's an open source project on GitHub and will always be free for anyone to use or extend. You don't even have to tell us you're using it. Signing up for Hypar To upload anything to the Hypar platform, you're going to need an account. Point your browser to https://hypar.io , and you should see a page that looks like this. If you don't have an account already, click on the Create a free account button below the logo. That should take you to the Sign Up screen. Fill in a username, an email address you can access, and the password you'd like to use. Then click on the Sign up button in the center of the screen. Then we do some explaining: Now check the email account you supplied for a message that looks something like this: Click on the Verify Email link in the message and you should see a confirmation page: That's it! You now have a Hypar account. Later in this guide you'll sign in to see your first function in Hypar Explore. Installing and Using the Hypar Command Line Interface (CLI) Open a Windows Command Prompt and input the following command: dotnet tool install -g hypar.cli Close and reopen the Command Prompt to finish the installation. Now you're ready to send your first function to Hypar. First use the command prompt cd (for \" c hange d irectory\") command to navigate to the folder where you'd like to place your function project. Try this in the Windows Command Prompt: hypar new For consistency with the rest of this example give your function the name StarterFunction . A bunch of stuff happens that we'll explain in a moment, but in the meantime enter your Hypar user name and password: Now more stuff happens, but the important thing right now is to know that your function has been published (privately) to Hypar! With one command you've created a web application that we're going to customize and publish again (and again and again), but first let's see what we've got so far. Back to https://hypar.io . This time, click on the sign in button on the left below the logo... ...and sign in using your new account: Once you sign in, you'll see something like the following screen: Create a new workflow using the form on the bottom left. Type in any name you want (perhaps \"Starter workflow\") and click Create . You'll see this screen: Click Add Function in the top left of the screen to open the function library and search for \"StarterFunction\" (or whatever you named your function). Click on the more... link on the lower right of your StarterFunction card: That checked Private box is what's keeping your new function invisible to everyone but you and the administrators of Hypar. If you ever want everyone to see your function, you'll have to uncheck that box and read our warning that the world is about to see your work. Try changing the setting, then make it private again. Now let's make some options. Click Insert on StarterFunction and hide the Function Library. Your function will run automatically and you should see something like this: You've run a web application that you created by just typing hypar new ! Click in the 3D view to zoom, pan, and rotate the result. Now click on StarterFunction's Settings and Alternatives buttons, the first two buttons after its name on the left: In the alternatives list, you can see that your function has actually run many times with different input values. Click different alternatives to view them in 3D. The range sliders on the left are set to allow all possible lengths and widths. You can shrink these ranges to generate just the options you want. Now let's go back and look at everything that happened and what it means for writing your own custom Hypar functions in the future. We'll place blue boxes around what we're talking about, like this: The first thing that happened was that the hypar new command created a new local project folder within the current folder. In Windows Explorer, the new folder looks like this: The next thing hypar new did was add a test project into that folder, in the folder called test above. This is the project that will help you test your function updates locally before uploading them to Hypar. Then the hypar new command created a hypar.json file that you can see in the StarterFunction folder above. We'll use this file to customize and extend the default function. Next the hypar new command executed something called hypar init , which created a couple of more important files in your project, but which you shouldn't have to worry about except to understand what they do and how they change as you edit your hypar.json file. If you open the src folder, you'll see these files: The three files with names containing .g.cs are generated code files. You never need to edit these directly but it's important to know that the hypar init command generates them from the hypar.json file that we'll look at in a moment, because when you make changes to the hypar.json file you'll have to run hypar init again to update these files. These three files are what make your C# code compatible with Hypar services. They're kept separate so that your code won't become directly dependent on the Hypar platform but can easily take advantage of its services. After hypar init executes, there's some housekeeping that completes the local changes, then after you sign in the hypar new command uploads your new function. Go back and open the StarterFunction directory in VS Code: VS Code will look like this, with all of the files in the left column: Now use Code to open the hypar.json file, and we'll look at how this configuration influences what you see when you work with a function on Hypar. The \"inputs\" section of the hypar.json determines what inputs you see for the uploaded function: The \"outputs\" section determines the values you see associated with each option: In the next exercise, we're going add a new Height input to this function. Adding a new function input First, let's open the src/StarterFunctionInputs.g.cs file in Code and look at the StarterFunctionInputs class to see how the hypar.json turns into code. Note how the corresponding entries become public class properties: Edit your hypar.json file to look like the one illustrated below. Copy the \"Width\" output and change the copy's name and description values to refer to \"Height\" and \"The height\" instead of \"Width\" and \"The width\" . VSC politely inserts a comma after the \"Width\" section's closing brace now that it's no longer the last input field: Save this file and open the command prompt again, using the cd command to change the current directory to your project folder. Then run hypar init : hypar init reads the json file to understand how to regenerate the input and output class files as well as the function file. Open StarterFunctionInputs.g.cs to see what changed. Now that we have this new entry for Height , we have to tell our function to use it. Open StarterFunction.cs and change the var height = 1.0; line to use the height input value instead: Now we have our new Height input. Let's send this up to Hypar using hypar publish and see how our function works now: Opening StarterFunction on Hypar again, we now have a Height input in addition to the Length and Width inputs. Unchecking \"Sample Range\" on height and setting its slider to 10m gives us a set of alternatives with identical heights and varied lengths and widths: What if we wanted a maximum height of 20m? Let's go back to the hypar.json file and change the maximum for the input range: Save the file and run hypar publish again at the command prompt: When we open StarterFunction on Hypar again, the range can now be set to 20: Adding a new function output Hypar can also generate non-geometric data. In Hypar, click \"Show outputs\" in the top left. You should see something like this, although your volume result might be different: What if we also wanted to display the area of our cube? For this exercise we'll add a new output to the hypar.json and calculate the result we need. Add these new lines to the hypar.json : Copy the \"Volume\" section down and change its \"name\" field to \"Area\" and its \"description\" to \"The area\" . After those changes, on the command line in the project folder run hypar init : Now in Code let's see what changed. Open src/StarterFunctionOutputs.g.cs and you should see your new Area output under the Volume output: Also note that the StarterFunctionOutputs constructor at the bottom of the illustration has a new double area argument. Calculate and add the area output like this: Once you've made that change and saved the file, publish the function to Hypar again: Return to Hypar, reload the page, and force StarterFunction to run again by tweaking one of its input parameters. Click Show outputs and you should see the result of your area calculation: <!-- TODO: Labels can't be trivially added to masses right now. What if we wanted to see these results in the graphic display as well? We'll handle that by adding **properties** to the generated masses, and display them using the **Label** dropdown. For the moment the **Label** dropdown only has **None** as an entry: ![](./images/HyparLabels.png) <div style=\"page-break-after: always;\"></div> To add labels for our **volume** and **area** values open **StarterFunction.cs** in VSC. Move the two value calculations up under the **height** input, because we're going to need those values a little earlier so we can add them as properties to our **mass**: ![](./images/HyparStartFunctionLabels1.PNG) <div style=\"page-break-after: always;\"></div> Before we add the **mass** to our Hypar **model**, we need to add a couple of **NumericProperty** entries to the **mass**. Add these lines before **model.AddElement(mass)**: ![](./images/HyparAddProperties.PNG) There's a lot happening in these two lines, so let's look at each part, using our new **Volume** property as an example of how both lines work. Since we're adding a property to our **mass**, we use its method **AddProperty**: ![](./images/HyparAddProperty.PNG) The first argument this method needs is a name for the new property, which in this case is **\"Volume\"**: ![](./images/HyparAddPropertyName.PNG) Next the method needs to know what kind of property you're going to add. Eligible values for this argument are **StringProperty** (if we were adding a string value), or in this case **NumericProperty**: ![](./images/HyparAddNumericProperty.PNG) <div style=\"page-break-after: always;\"></div> The new **NumericProperty** needs two arguments: the value, which in this case is the **volume** variable calculated above, and then the **UnitType**, which for this output is **UnitType.Volume**: ![](./images/HyparNewNumericProperty.PNG) Save the file and publish **StarterFunction** again: ![](./images/HyparPublish2019.06.16.png) <div style=\"page-break-after: always;\"></div> When you return to Hypar, click on the **Sample 20 Options** button in **StarterFunction** to create 20 new options, then click on one of the options to open it in the interactive display. In the **Label** dropdown you should see the two new properties you just added: ![](./images/HyparLabels2.PNG) Select **volume** and you should see the value appear in the graphic display on the mass: ![](./images/HyparLabels3.png) Now you see why we specified the **UnitType** for the new property. Specifying the **UnitType** as **UnitType.Volume** tells Hypar to add **m3** to the displayed value to denote cubic meters. Internally Hypar maintains all values in metric units. Functions can calculate the conversion to Imperial units if required. <div style=\"page-break-after: always;\"></div> If you select **area** in the **Label** dropdown, you should see the value notated in square meters: ![](./images/HyparLabels4.png) You're not limited to simple values like these. You can add any static or calculated value you'd like to any Hypar Element (like Mass). --> To learn more about the open source Hypar Elements library browse to the GitHub repository ."
  }
}