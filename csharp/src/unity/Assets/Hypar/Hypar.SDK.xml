<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hypar.SDK</name>
    </assembly>
    <members>
        <member name="T:Hypar.Configuration.HyparConfig">
            <summary>
            A container for Hypar configuration information.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.HyparConfig.Description">
            <summary>
            The description of the function.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.HyparConfig.Function">
            <summary>
            The fully-qualified name of the function.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.HyparConfig.FunctionId">
            <summary>
            The unique identifier of the function.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.HyparConfig.Name">
            <summary>
            The name of the function.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.HyparConfig.Runtime">
            <summary>
            The runtime used to execute the function.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.HyparConfig.Parameters">
            <summary>
            A map of input parameter data for the function.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.HyparConfig.RepositoryUrl">
            <summary>
            An optional git repository that stores your function.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.HyparConfig.Returns">
            <summary>
            A map of return data for the function.
            </summary>
        </member>
        <member name="M:Hypar.Configuration.HyparConfig.FromJson(System.String)">
            <summary>
            Construct a HyparConfig from json.
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Hypar.Configuration.HyparConfig.ToJson">
            <summary>
            Serialize the configuration data to JSON.
            </summary>
        </member>
        <member name="M:Hypar.Configuration.HyparConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Hypar.Configuration.ParameterType">
            <summary>
            An enumeration of possible parameter types.
            </summary>
        </member>
        <member name="F:Hypar.Configuration.ParameterType.Number">
            <summary>
            A numeric parameter.
            </summary>
        </member>
        <member name="F:Hypar.Configuration.ParameterType.Location">
            <summary>
            A location parameter.
            </summary>
        </member>
        <member name="F:Hypar.Configuration.ParameterType.Point">
            <summary>
            A point parameter.
            </summary>
        </member>
        <member name="T:Hypar.Configuration.ParameterData">
            <summary>
            Base class for Hypar configuration input parameters.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.ParameterData.Description">
            <summary>
            A description of the parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Configuration.ParameterData.Type">
            <summary>
            The type of the parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Configuration.ParameterData.#ctor(System.String,Hypar.Configuration.ParameterType)">
            <summary>
            Construct a ParameterData.
            </summary>
            <param name="description">The description of the parameter.</param>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="T:Hypar.Configuration.PointParameter">
            <summary>
            A point parameter.
            </summary>
        </member>
        <member name="M:Hypar.Configuration.PointParameter.#ctor(System.String)">
            <summary>
            Construct a point parameter.
            </summary>
            <param name="description">The description of the point.</param>
        </member>
        <member name="T:Hypar.Configuration.LocationParameter">
            <summary>
            A location parameter.
            </summary>
        </member>
        <member name="M:Hypar.Configuration.LocationParameter.#ctor(System.String)">
            <summary>
            Construct a location parameter.
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:Hypar.Configuration.NumberParameter">
            <summary>
            A numeric parameter.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.NumberParameter.Min">
            <summary>
            The minimum value of the parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Configuration.NumberParameter.Max">
            <summary>
            The maximum value of the parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Configuration.NumberParameter.Step">
            <summary>
            The step of the parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Configuration.NumberParameter.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Construct a NumberParameter.
            </summary>
            <param name="description"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="step"></param>
            <exception cref="T:System.ArgumentException">Thrown when the minimum value is less than the maximum value.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the step is equal to zero.</exception>
        </member>
        <member name="T:Hypar.Configuration.ReturnData">
            <summary>
            Return data for a Hypar function.
            </summary>
        </member>
        <member name="P:Hypar.Configuration.ReturnData.Description">
            <summary>
            A description of the return value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Configuration.ReturnData.Type">
            <summary>
            The type of the return value.
            </summary>
        </member>
        <member name="T:Hypar.Configuration.ParameterDataConverter">
            <summary>
            Converter for types which inherit from ParameterData
            </summary>
        </member>
        <member name="M:Hypar.Configuration.ParameterDataConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert an object of the specified type?
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="P:Hypar.Configuration.ParameterDataConverter.CanWrite">
            <summary>
            Can this converter write json?
            </summary>
        </member>
        <member name="M:Hypar.Configuration.ParameterDataConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Hypar.Configuration.ParameterDataConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Hypar.Elements.Beam">
            <summary>
            A Beam is a structural framing element which is often horizontal.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Beam.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Beam.#ctor(Hypar.Geometry.Line,Hypar.Geometry.Profile,Hypar.Elements.Material,Hypar.Geometry.Vector3,System.Double,System.Double)">
            <summary>
            Construct a Beam.
            </summary>
            <param name="centerLine">The Beam's center line.</param>
            <param name="profile">The Beam's profile.</param>
            <param name="material">The Beam's material.</param>
            <param name="up">The Beam's up axis.</param>
            <param name="startSetback">The setback of the Beam's geometry at the start.</param>
            <param name="endSetback">The setback of the Beam's geometry at the end.</param>
        </member>
        <member name="T:Hypar.Elements.BeamSystem">
            <summary>
            BeamSystem represents a collection of beams within a perimeter.
            </summary>
        </member>
        <member name="P:Hypar.Elements.BeamSystem.Beams">
            <summary>
            A collection of Beams contained in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.BeamSystem.#ctor(System.Int32,Hypar.Geometry.Profile,Hypar.Geometry.Line,Hypar.Geometry.Line,Hypar.Elements.Material)">
            <summary>
            Construct a BeamSystem between two edges.
            </summary>
            <param name="count">The number of Beams to create.</param>
            <param name="profile">The Profile to be used for all Beams.</param>
            <param name="edge1">The first edge of the system.</param>
            <param name="edge2">The second edge of the system.</param>
            <param name="material">The Beam material.</param>
        </member>
        <member name="M:Hypar.Elements.BeamSystem.#ctor(Hypar.Elements.Floor,System.Int32,Hypar.Geometry.Profile,Hypar.Elements.Material)">
            <summary>
            Construct a beam system under a slab.
            </summary>
            <param name="floor">The Floor under which to create Beams.</param>
            <param name="count">The number of Beams to create.</param>
            <param name="profile">The Profile to be used for all Beams.</param>
            <param name="material">The Beam material.</param>
        </member>
        <member name="T:Hypar.Elements.Brace">
            <summary>
            A Brace is a structural framing element which is often diagonal.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Brace.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Brace.#ctor(Hypar.Geometry.Line,Hypar.Geometry.Profile,Hypar.Elements.Material,Hypar.Geometry.Vector3,System.Double,System.Double)">
            <summary>
            Construct a Brace.
            </summary>
            <param name="centerLine">The Brace's center line.</param>
            <param name="profile">The Brace's profile.</param>
            <param name="material">The Brace's material.</param>
            <param name="up">The Brace's up axis.</param>
            <param name="startSetback">The setback of the Brace's geometry at the start.</param>
            <param name="endSetback">The setback of the Brace's geometry at the end.</param>
            [JsonConstructor]
        </member>
        <member name="T:Hypar.Elements.BuiltInMaterials">
            <summary>
            Built in materials.
            </summary>
        </member>
        <member name="F:Hypar.Elements.BuiltInMaterials.Glass">
            <summary>
            Glass.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Hypar.Elements.BuiltInMaterials.Steel">
            <summary>
            Steel.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Hypar.Elements.BuiltInMaterials.Default">
            <summary>
            The default material.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Hypar.Elements.BuiltInMaterials.Concrete">
            <summary>
            Concrete.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Hypar.Elements.BuiltInMaterials.Mass">
            <summary>
            Default material used to represent masses.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Hypar.Elements.BuiltInMaterials.Wood">
            <summary>
            Wood.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Hypar.Elements.BuiltInMaterials.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="T:Hypar.Elements.Column">
            <summary>
            A Column is a structural framing element which is often vertical.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Column.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Column.Location">
            <summary>
            The location of the base of the Column.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Column.Height">
            <summary>
            The height of the Column.
            </summary>
            <value></value>
        </member>
        <member name="M:Hypar.Elements.Column.#ctor(Hypar.Geometry.Vector3,System.Double,Hypar.Geometry.Profile,Hypar.Elements.Material)">
            <summary>
            Construct a Column.
            </summary>
            <param name="location">The location of the base of the Column.</param>
            <param name="height">The Column's height.</param>
            <param name="profile">The Column's profile.</param>
            <param name="material">The Column's material.</param>
        </member>
        <member name="T:Hypar.Elements.Element">
            <summary>
            Base class for all Elements.
            </summary>
        </member>
        <member name="F:Hypar.Elements.Element._subElements">
            <summary>
            A collection of Elements aggregated by this Element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Element.Id">
            <summary>
            The unique identifier of the Element.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Elements.Element.Type">
            <summary>
            The type of the element.
            Used during deserialization to disambiguate derived types.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Element.Parameters">
            <summary>
            A map of Parameters for the Element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Element.Material">
            <summary>
            The element's material.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Element.SubElements">
            <summary>
            A collection of Elements aggregated by this Element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Element.Transform">
            <summary>
            The element's transform.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Element.#ctor">
            <summary>
            Construct a default Element.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Element.AddParameter(System.String,Hypar.Elements.Parameter)">
            <summary>
            Add a Parameter to the Element.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="parameter">The parameter to add.</param>
            <exception cref="T:System.Exception">Thrown when an parameter with the same name already exists.</exception>
        </member>
        <member name="M:Hypar.Elements.Element.RemoveParameter(System.String)">
            <summary>
            Remove a Parameter from the Parameters map.
            </summary>
            <param name="name">The name of the parameter to remove.</param>
            <exception cref="T:System.Exception">Thrown when the specified parameter cannot be found.</exception>
        </member>
        <member name="T:Hypar.Elements.ElementOfType`1">
            <summary>
            Base class for all Elements which have an ElementType.
            </summary>
        </member>
        <member name="P:Hypar.Elements.ElementOfType`1.ElementType">
            <summary>
            The ElementType of the Element.
            </summary>
        </member>
        <member name="T:Hypar.Elements.ElementType">
            <summary>
            Base class for all ElementTypes
            </summary>
        </member>
        <member name="P:Hypar.Elements.ElementType.Id">
            <summary>
            The unique identifier of an ElementType.
            </summary>
        </member>
        <member name="P:Hypar.Elements.ElementType.Type">
            <summary>
            The type of the ElementType.
            Used during serialization.
            </summary>
        </member>
        <member name="P:Hypar.Elements.ElementType.Name">
            <summary>
            The name of the ElementType.
            </summary>
        </member>
        <member name="P:Hypar.Elements.ElementType.Description">
            <summary>
            A description of the ElementType.
            </summary>
        </member>
        <member name="M:Hypar.Elements.ElementType.#ctor(System.String,System.String)">
            <summary>
            Construct an ElementType.
            </summary>
            <param name="name">A name.</param>
            <param name="description">A description.</param>
        </member>
        <member name="T:Hypar.Elements.Floor">
            <summary>
            A Floor is a horizontal element defined by a perimeter and one or several voids.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Floor.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Floor.ElementType">
            <summary>
            The FloorType of the Floor.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Floor.Profile">
            <summary>
            The Profile of the Floor.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Floor.ProfileTransformed">
            <summary>
            The transformed Profile of the Floor.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Floor.Elevation">
            <summary>
            The elevation from which the Floor is extruded.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Floor.#ctor(Hypar.Geometry.Profile,Hypar.Elements.FloorType,System.Double,Hypar.Elements.Material)">
            <summary>
            Construct a Floor.
            </summary>
            <param name="profile">The <see cref="T:Hypar.Geometry.Profile"/>of the Floor.</param>
            <param name="elevation">The elevation of the Floor.</param>
            <param name="elementType">The FloorType of the Floor.</param>
            <param name="material">The Floor's material.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the slab's thickness is less than or equal to 0.0.</exception>
        </member>
        <member name="M:Hypar.Elements.Floor.Mesh">
            <summary>
            Tessellate the Floor.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Floor.Area">
            <summary>
            The area of the Floor.
            Overlapping openings and openings which are outside of the Floor's perimeter,
            will result in incorrect area results.
            </summary>
        </member>
        <member name="T:Hypar.Elements.FloorExtensions">
            <summary>
            Extension methods for Floors.
            </summary>
        </member>
        <member name="M:Hypar.Elements.FloorExtensions.Floors(Hypar.Elements.Mass,System.Collections.Generic.IList{System.Double},Hypar.Elements.FloorType,Hypar.Elements.Material)">
            <summary>
            Create Floors at the specified elevations within a mass.
            </summary>
            <param name="mass"></param>
            <param name="elevations">A collection of elevations at which Floors will be created within the mass.</param>
            <param name="floorType">The FloorType of the Floors.</param>
            <param name="material">The Floor material.</param>
        </member>
        <member name="T:Hypar.Elements.FloorType">
            <summary>
            A container for properties common to Floors.
            </summary>
        </member>
        <member name="P:Hypar.Elements.FloorType.Thickness">
            <summary>
            The thickness of the Floor.
            </summary>
        </member>
        <member name="P:Hypar.Elements.FloorType.Type">
            <summary>
            The type of the FloorType.
            </summary>
        </member>
        <member name="M:Hypar.Elements.FloorType.#ctor(System.String,System.Double,System.String)">
            <summary>
            Construct a FloorType.
            </summary>
            <param name="name">The name of the FloorType.</param>
            <param name="thickness">The thickness of the associated floor.</param>
            <param name="description">A description of the FloorType.</param>
        </member>
        <member name="T:Hypar.Elements.Grid">
            <summary>
            A grid comprised of rows and columns with each cell represented by a polyline.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Grid.Cells">
            <summary>
            Get all cells.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Grid.#ctor(Hypar.Geometry.Line,Hypar.Geometry.Line,System.Int32,System.Int32)">
            <summary>
            Construct a grid.
            </summary>
            <param name="bottom"></param>
            <param name="top"></param>
            <param name="uDivisions">The number of grid divisions in the u direction.</param>
            <param name="vDivisions">The number of grid divisions in the v direction.</param>
        </member>
        <member name="M:Hypar.Elements.Grid.#ctor(Hypar.Geometry.Line,Hypar.Geometry.Line,System.Double,System.Double)">
            <summary>
            Construct a grid.
            </summary>
            <param name="bottom">The bottom edge of the Grid.</param>
            <param name="top">The top edge of the Grid.</param>
            <param name="uDistance">The distance along the u parameter at which points will be created.</param>
            <param name="vDistance">The distance along the v parameter at which points will be created.</param>
        </member>
        <member name="M:Hypar.Elements.Grid.#ctor(Hypar.Geometry.Face,System.Int32,System.Int32)">
            <summary>
            Construct a grid.
            </summary>
            <param name="face">A face whose edges will be used to define the grid.</param>
            <param name="uDivisions">The number of grid divisions in the u direction.</param>
            <param name="vDivisions">The number of grid divisions in the v direction.</param>
        </member>
        <member name="M:Hypar.Elements.Grid.#ctor(Hypar.Geometry.Face,System.Double,System.Double)">
            <summary>
            Construct a Grid.
            </summary>
            <param name="face">A face whose edges will be used to define the grid.</param>
            <param name="uDistance">The distance along the u parameter at which points will be created.</param>
            <param name="vDistance">The distance along the v parameter at which points will be created.</param>
        </member>
        <member name="T:Hypar.Elements.HSSPipeProfileServer">
            <summary>
            A singleton class which serves every HSS pipe section as defined by AISC.
            </summary>
        </member>
        <member name="P:Hypar.Elements.HSSPipeProfileServer.Instance">
            <summary>
            The HSSPipeProfileServer singleton.
            </summary>
        </member>
        <member name="T:Hypar.Elements.Mass">
            <summary>
            A Mass represents an extruded building Mass.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Mass.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Mass.Profile">
            <summary>
            The Profile of the Mass.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Mass.ProfileTransformed">
            <summary>
            The transformed Profile of the Mass.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Mass.Elevation">
            <summary>
            The elevation of the bottom perimeter.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Mass.Height">
            <summary>
            The height of the Mass.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Mass.Volume">
            <summary>
            The volume of the Mass.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Mass.#ctor(Hypar.Geometry.Profile,System.Double,System.Double,Hypar.Elements.Material)">
            <summary>
            Construct a Mass.
            </summary>
            <param name="profile">The Profile of the Mass.</param>
            <param name="elevation">The elevation of the perimeter.</param>
            <param name="height">The height of the Mass from the bottom elevation.</param>
            <param name="material">The Mass' material. The default is the built in Mass material.</param>
        </member>
        <member name="M:Hypar.Elements.Mass.VerticalEdges">
            <summary>
            A collection of curves representing the vertical edges of the Mass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Mass.HorizontalEdges">
            <summary>
            A collection of curves representing the horizontal edges of the Mass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Mass.Faces">
            <summary>
            A collection of polylines representing the perimeter of each face of the Mass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Mass.Mesh">
            <summary>
            Tessellate the Mass.
            </summary>
            <returns>A mesh representing the tessellated Mass.</returns>
        </member>
        <member name="T:Hypar.Elements.Material">
            <summary>
            A material with red, green, blue, alpha, and metallic factor components.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Material.Id">
            <summary>
            The unique identifier of the Material.
            </summary>
            <value></value>
        </member>
        <member name="P:Hypar.Elements.Material.Color">
            <summary>
            The RGBA Color of the Material.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Material.SpecularFactor">
            <summary>
            The specular factor.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Material.GlossinessFactor">
            <summary>
            The glossiness factor.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Material.Name">
            <summary>
            The name of the material.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Material.#ctor(System.String,Hypar.Geometry.Color,System.Single,System.Single)">
            <summary>
            Construct a material.
            </summary>
            <param name="name">The identifier of the material. Identifiers should be unique within a model.</param>
            <param name="color">The RGBA color of the material.</param>
            <param name="specularFactor">The specular component of the color. Between 0.0 and 1.0.</param>
            <param name="glossinessFactor">The glossiness component of the color. Between 0.0 and 1.0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specular or glossiness value is less than 0.0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specular or glossiness value is greater than 1.0.</exception>
        </member>
        <member name="M:Hypar.Elements.Material.Equals(System.Object)">
            <summary>
            Is this material equal to the provided material?
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Hypar.Elements.Material.GetHashCode">
            <summary>
            Get the hash code for the material.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.Elements.Messages">
            <summary>
            Common exception messages.
            </summary>
        </member>
        <member name="F:Hypar.Elements.Messages.EMPTY_POLYLINE_EXCEPTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hypar.Elements.Messages.TOP_BELOW_BOTTOM_EXCEPTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hypar.Elements.Messages.BOTTOM_ABOVE_TOP_EXCEPTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hypar.Elements.Messages.PROFILES_UNEQUAL_VERTEX_EXCEPTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hypar.Elements.Messages.HEIGHT_EXCEPTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hypar.Elements.Messages.ZERO_THICKNESS_EXCEPTION">
            <summary>
            
            </summary>
        </member>
        <member name="T:Hypar.Elements.Model">
            <summary>
            A model is a map of elements, keyed by their unique identifier. 
            </summary>
        </member>
        <member name="P:Hypar.Elements.Model.Origin">
            <summary>
            The origin of the model.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Elements.Model.Elements">
            <summary>
            All Elements in the Model.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Model.Materials">
            <summary>
            All Materials in the Model.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Model.ElementTypes">
            <summary>
            All ElementTypes in the Model.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Model.Profiles">
            <summary>
            All Profiles in the model.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Model.#ctor">
            <summary>
            Construct an empty model.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Model.AddElement(Hypar.Elements.Element)">
            <summary>
            Add an element to the model.
            </summary>
            <param name="element">The element to add to the model.</param>
            <exception cref="T:System.ArgumentException">Thrown when an element with the same Id already exists in the model.</exception>
        </member>
        <member name="M:Hypar.Elements.Model.GetRootLevelElementData(Hypar.Elements.Element)">
            <summary>
            Recursively gather element data to be referenced at the root.
            This includes things like profiles, materials, and element types.
            </summary>
            <param name="element">The Element from which to gather data.</param>
        </member>
        <member name="M:Hypar.Elements.Model.AddElements(System.Collections.Generic.IEnumerable{Hypar.Elements.Element})">
            <summary>
            Add a collection of elements to the model.
            </summary>
            <param name="elements">The elements to add to the model.</param>
        </member>
        <member name="M:Hypar.Elements.Model.GetElementById(System.String)">
            <summary>
            Get an Element by id from the Model.
            </summary>
            <param name="id">The identifier of the Element.</param>
            <returns>An Element or null if no Element can be found with the provided id.</returns>
        </member>
        <member name="M:Hypar.Elements.Model.AddMaterial(Hypar.Elements.Material)">
            <summary>
            Add a material to the model.
            </summary>
            <param name="material">The material to add to the model.</param>
        </member>
        <member name="M:Hypar.Elements.Model.GetMaterialByName(System.String)">
            <summary>
            Get a Material by name.
            </summary>
            <param name="name">The name of the Material.</param>
            <returns>A Material or null if no Material with the specified id can be found.</returns>
        </member>
        <member name="M:Hypar.Elements.Model.GetElementTypeByName(System.String)">
            <summary>
            Get an ElementType by name.
            </summary>
            <param name="name">The name of the ElementType.</param>
            <returns>An ElementType or null if no ElementType with the specified name can be found.</returns>
        </member>
        <member name="M:Hypar.Elements.Model.GetProfileByName(System.String)">
            <summary>
            Get a Profile by name.
            </summary>
            <param name="name">The name of the Profile.</param>
            <returns>A Profile or null if no Profile with the specified name can be found.</returns>
        </member>
        <member name="M:Hypar.Elements.Model.ElementsOfType``1">
            <summary>
            Get all Elements of the specified Type.
            </summary>
            <typeparam name="T">The Type of element to return.</typeparam>
            <returns>A collection of Elements of the specified type.</returns>
        </member>
        <member name="M:Hypar.Elements.Model.SaveGlb(System.String)">
            <summary>
            Save the Model to a binary glTF file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Hypar.Elements.Model.SaveGltf(System.String)">
            <summary>
            Save the Model to a glTF file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Hypar.Elements.Model.ToJson">
            <summary>
            Serialize the model to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Model.FromJson(System.String)">
            <summary>
            Deserialize a model from JSON.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Model.ToHypar">
            <summary>
            Construct a representation of the model for sending to Hypar.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.Elements.Opening">
            <summary>
            An Opening in a Wall.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Opening.DistanceAlongWall">
            <summary>
            The distance along the wall to the lower left corner of the Opening.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Opening.BaseHeight">
            <summary>
            The base height of the Opening.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Opening.Height">
            <summary>
            The height of the Opening.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Opening.Width">
            <summary>
            The width of the Opening.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Opening.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct an Opening.
            </summary>
            <param name="distanceAlongWall">The distance along the Wall.</param>
            <param name="baseHeight">The base height of the Opening.</param>
            <param name="height">The height of the opening.</param>
            <param name="width">The width of the opening.</param>
        </member>
        <member name="T:Hypar.Elements.Panel">
            <summary>
            A zero-thickness planar Panel defined by 3 or 4 points.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Panel.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Panel.Perimeter">
            <summary>
            A CCW collection of points defining the corners of the Panel.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Panel.#ctor(System.Collections.Generic.IList{Hypar.Geometry.Vector3},Hypar.Elements.Material)">
            <summary>
            Construct a Panel.
            </summary>
            <param name="perimeter">The perimeter of the Panel.</param>
            <param name="material">The Panel's material</param>
            <exception cref="T:System.ArgumentException">Thrown when the number of perimeter points is less than 3 or greater than 4.</exception>
        </member>
        <member name="M:Hypar.Elements.Panel.Edges">
            <summary>
            The edges of the Panel.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Panel.Normal">
            <summary>
            The normal of the Panel, defined using the first 3 vertices in the location.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Panel.Mesh">
            <summary>
            Tessellate the Panel.
            </summary>
            <returns>A mesh representing the tessellated Panel.</returns>
        </member>
        <member name="T:Hypar.Elements.Parameter">
            <summary>
            ParameterValue represents both the value and the type of a parameter.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Parameter.Value">
            <summary>
            The value of the Parameter.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Parameter.Type">
            <summary>
            The type of the Parameter.
            </summary>
            <value></value>
        </member>
        <member name="M:Hypar.Elements.Parameter.#ctor(System.Object,Hypar.Elements.ParameterType)">
            <summary>
            Construct a parameter value given a value and a type.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="parameterType">The type of the parameter.</param>
        </member>
        <member name="T:Hypar.Elements.ParameterType">
            <summary>
            An enumeration of unit types for a numeric parameter.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ParameterType.None">
            <summary>
            No unit assigned.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ParameterType.Distance">
            <summary>
            A length in meters.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ParameterType.Area">
            <summary>
            An area in square meters.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ParameterType.Volume">
            <summary>
            A volume in cubic meters.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ParameterType.Mass">
            <summary>
            A mass in kilograms.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ParameterType.Force">
            <summary>
            A force in Newtons.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ParameterType.Text">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="T:Hypar.Elements.ProfileServer">
            <summary>
            Base class for types which serve Profiles.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ProfileServer.InchesToMeters">
            <summary>
            A conversion factor from inches to meters.
            </summary>
        </member>
        <member name="F:Hypar.Elements.ProfileServer._profiles">
            <summary>
            The map of Profiles.
            </summary>
        </member>
        <member name="M:Hypar.Elements.ProfileServer.GetProfileByName(System.String)">
            <summary>
            Get a profile by name from the server.
            </summary>
            <param name="name"></param>
            <returns>A Profile. Throws an exception if a profile with the specified name cannot be found.</returns>
            <exception cref="T:System.Exception">Thrown when a Profile with the specfied name cannot be found.</exception>
        </member>
        <member name="M:Hypar.Elements.ProfileServer.AllProfiles">
            <summary>
            Get all Profiles available in the WideFlangeProfileServer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.Elements.Serialization.ElementConverter">
            <summary>
            The serialization converter for elements.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementConverter.CanConvert(System.Type)">
            <summary>
            Can this converter converter objects of the provided type?
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="P:Hypar.Elements.Serialization.ElementConverter.CanRead">
            <summary>
            Can this converter read json?
            </summary>
            <value></value>
        </member>
        <member name="P:Hypar.Elements.Serialization.ElementConverter.CanWrite">
            <summary>
            Can this converter write json?
            </summary>
            <value></value>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <exception cref="T:System.Exception">Thrown when a type matching the deserialized type name cannot be found.</exception>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Hypar.Elements.Serialization.ElementTypeConverter">
            <summary>
            Converter for objects of type ElementType.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementTypeConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert an object of type objectType?
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="P:Hypar.Elements.Serialization.ElementTypeConverter.CanWrite">
            <summary>
            Can this converter write json?
            </summary>
            <value></value>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementTypeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementTypeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Hypar.Elements.Serialization.ElementTypeToIdConverter">
            <summary>
            Converter for objects of ElementType.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementTypeToIdConverter.#ctor(System.Collections.Generic.Dictionary{System.String,Hypar.Elements.ElementType})">
            <summary>
            Construct an ElementTypeConverter.
            </summary>
            <param name="elementTypes"></param>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementTypeToIdConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert and object of type objectType?
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementTypeToIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Serialization.ElementTypeToIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Hypar.Elements.Serialization.MaterialToIdConverter">
            <summary>
            Converts a Material to its identifier and back.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Serialization.MaterialToIdConverter.#ctor(System.Collections.Generic.Dictionary{System.String,Hypar.Elements.Material})">
            <summary>
            Construct a MaterialConverter.
            </summary>
            <param name="materials">A collection of Materials.</param>
        </member>
        <member name="M:Hypar.Elements.Serialization.MaterialToIdConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert an object of type objectType?
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="M:Hypar.Elements.Serialization.MaterialToIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Serialization.MaterialToIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Hypar.Elements.Serialization.ModelConverter">
            <summary>
            Convert a Model.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Serialization.ModelConverter.CanConvert(System.Type)">
            <summary>
            Can this converter convert and object of type objectType?
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="M:Hypar.Elements.Serialization.ModelConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read json.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Elements.Serialization.ModelConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write json.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Hypar.Elements.Space">
            <summary>
            A space represents the extruded boundary of an occupiable region.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Space.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Space.Elevation">
            <summary>
            The elevation of the Space perimeter.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Space.Height">
            <summary>
            The height of the Space above its perimeter elevation.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Space.Profile">
            <summary>
            The Profile of the Space.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Space.TransformedProfile">
            <summary>
            The transformed Profile of the Space.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Space.#ctor(Hypar.Geometry.Profile,System.Double,System.Double,Hypar.Elements.Material)">
            <summary>
            Construct a space.
            </summary>
            <param name="profile">The Profile of the space.</param>
            <param name="elevation">The elevation of the perimeter.</param>
            <param name="height">The height of the space above the lower elevation.</param>
            <param name="material">The space's material.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the height is less than or equal to 0.0.</exception>
        </member>
        <member name="M:Hypar.Elements.Space.Mesh">
            <summary>
            Tessellate the Space.
            </summary>
            <returns>The Mesh representing the Space.</returns>
        </member>
        <member name="T:Hypar.Elements.StructuralFraming">
            <summary>
            A linear structural element with a cross section.
            </summary>
        </member>
        <member name="P:Hypar.Elements.StructuralFraming.Profile">
            <summary>
            The cross-section profile of the framing element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.StructuralFraming.ProfileTransformed">
            <summary>
            The cross-section profile of the framing element transformed by the Element's Transform.
            </summary>
            <value></value>
        </member>
        <member name="P:Hypar.Elements.StructuralFraming.UpAxis">
            <summary>
            The up axis of the framing element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.StructuralFraming.CenterLine">
            <summary>
            The center line of the framing element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.StructuralFraming.Volume">
            <summary>
            The volume of the StructuralFraming element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.StructuralFraming.StartSetback">
            <summary>
            The setback of the beam's extrusion at the start.
            </summary>
        </member>
        <member name="P:Hypar.Elements.StructuralFraming.EndSetback">
            <summary>
            Thet setback of the Beam's extrusion at the end.
            </summary>
        </member>
        <member name="M:Hypar.Elements.StructuralFraming.#ctor(Hypar.Geometry.Line,Hypar.Geometry.Profile,Hypar.Elements.Material,Hypar.Geometry.Vector3,System.Double,System.Double)">
            <summary>
            Construct a beam.
            </summary>
            <param name="centerLine">The center line of the Beam.</param>
            <param name="profile">The structural Profile of the Beam.</param>
            <param name="material">The Beam's material.</param>
            <param name="up">The up axis of the Beam.</param>
            <param name="startSetback">The setback of the framing's extrusion at its start.</param>
            <param name="endSetback">The setback of the framing's extrusion at its end.</param>
        </member>
        <member name="M:Hypar.Elements.StructuralFraming.Mesh">
            <summary>
            Tessellate the Beam.
            </summary>
            <returns>A mesh representing the tessellated Beam.</returns>
        </member>
        <member name="M:Hypar.Elements.StructuralFraming.Curves">
            <summary>
            Tessellate the Beam's Profile.
            </summary>
            <returns>A collection of curves representing the tessellated Profile.</returns>
        </member>
        <member name="T:Hypar.Elements.Truss">
            <summary>
            A Truss is an aggregation of StructuralFraming Elements.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Truss.Type">
            <summary>
            The type of the Element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Truss.Start">
            <summary>
            The start of the Truss.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Truss.End">
            <summary>
            The end of the Truss.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Truss.Depth">
            <summary>
            The depth of the Truss.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Truss.Divisions">
            <summary>
            The number of divisions in the Truss.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Truss.TopChordProfile">
            <summary>
            The Profile used for members in the top chord of the Truss.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Truss.BottomChordProfile">
            <summary>
            The Profile used for members in the bottom chord of the Truss.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Truss.WebProfile">
            <summary>
            The Profile used for members in the web of the Truss.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Truss.#ctor(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3,System.Double,System.Int32,Hypar.Geometry.Profile,Hypar.Geometry.Profile,Hypar.Geometry.Profile,Hypar.Elements.Material,System.Double,System.Double)">
            <summary>
            Construct a Truss.
            </summary>
            <param name="start">The start of the Truss.</param>
            <param name="end">The end of the Truss.</param>
            <param name="depth">The depth of the Truss.</param>
            <param name="divisions">The number of panels in the Truss.</param>
            <param name="topChordProfile">The Profile to be used for the top chord.</param>
            <param name="bottomChordProfile">The Profile to be used for the bottom chord.</param>
            <param name="webProfile">The Profile to be used for the web.</param>
            <param name="material">The truss' material.</param>
            <param name="startSetback">A setback to apply to the start of all members of the Truss.</param>
            <param name="endSetback">A setback to apply to the end of all members of the Truss.</param>
        </member>
        <member name="T:Hypar.Elements.Wall">
            <summary>
            A wall is a building element which is used to enclose space.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Wall.Profile">
            <summary>
            The Profile of the Wall.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Wall.ProfileTransformed">
            <summary>
            The transformed Profile of the Wall.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Wall.CenterLine">
            <summary>
            The center line of the wall.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Wall.Height">
            <summary>
            The height of the wall.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Wall.Type">
            <summary>
            The type of the Element.
            </summary>
        </member>
        <member name="P:Hypar.Elements.Wall.ElementType">
            <summary>
            The WallType of the Wall.
            </summary>
        </member>
        <member name="M:Hypar.Elements.Wall.#ctor(Hypar.Geometry.Line,Hypar.Elements.WallType,System.Double,System.Collections.Generic.IList{Hypar.Elements.Opening},Hypar.Elements.Material)">
            <summary>
            Construct a wall along a line.
            </summary>
            <param name="centerLine">The center line of the Wall.</param>
            <param name="elementType">The WallType of the Wall.</param>
            <param name="height">The height of the Wall.</param>
            <param name="openings">A collection of Openings in the Wall.</param>
            <param name="material">The Wall's material.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the thickness of the Wall is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the height of the Wall is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the Z components of Wall's start and end points are not the same.</exception>
        </member>
        <member name="M:Hypar.Elements.Wall.Mesh">
            <summary>
            Generate a mesh of the wall.
            </summary>
        </member>
        <member name="T:Hypar.Elements.WallType">
            <summary>
            A container for properties common to Walls.
            </summary>
        </member>
        <member name="P:Hypar.Elements.WallType.Thickness">
            <summary>
            The thickness of the Wall.
            </summary>
        </member>
        <member name="P:Hypar.Elements.WallType.Type">
            <summary>
            The Type of the ElementType.
            </summary>
        </member>
        <member name="M:Hypar.Elements.WallType.#ctor(System.String,System.Double,System.String)">
            <summary>
            Construct a WallType.
            </summary>
            <param name="name">The name of the WallType.</param>
            <param name="thickness">The thickness for all Walls of this WallType.</param>
            <param name="description">The description of the WallType.</param>
            <returns></returns>
        </member>
        <member name="T:Hypar.Elements.WideFlangeProfileServer">
             <summary>
            A singleton class which serves every Wide Flange section as defined by AISC.
             </summary>
        </member>
        <member name="P:Hypar.Elements.WideFlangeProfileServer.Instance">
            <summary>
            The WideFlangeProfileServer singleton.
            </summary>
        </member>
        <member name="T:Hypar.GeoJSON.Feature">
            <summary>
            A GeoJSON feature.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.Feature.Type">
            <summary>
            The type of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.GeoJSON.Feature.Properties">
            <summary>
            All properties of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.GeoJSON.Feature.Geometry">
            <summary>
            The geometry of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.GeoJSON.Feature.BBox">
            <summary>
            The bounding box of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.Feature.#ctor(Hypar.GeoJSON.Geometry,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Construct a feature.
            </summary>
            <param name="geometry"></param>
            <param name="properties"></param>
        </member>
        <member name="T:Hypar.GeoJSON.FeatureCollection">
            <summary>
            A GeoJSON feature collection.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.FeatureCollection.Type">
            <summary>
            The type of the feature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.GeoJSON.FeatureCollection.Features">
            <summary>
            A collection of features.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.FeatureCollection.#ctor(System.Collections.Generic.IEnumerable{Hypar.GeoJSON.Feature})">
            <summary>
            Construct a feature collection.
            </summary>
            <param name="features">A collection of features.</param>
        </member>
        <member name="T:Hypar.GeoJSON.Geometry">
            <summary>
            The base class for all GeoJSON geometry types.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.Geometry.Type">
            <summary>
            The type of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.GeoJSON.Position">
            <summary>
            A GeoJSON position specified by longitude and latitude.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.Position.Latitude">
            <summary>
            The latitude in decimal degrees.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.GeoJSON.Position.Longitude">
            <summary>
            The longitude in decimal degrees.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.Position.#ctor(System.Double,System.Double)">
            <summary>
            Construct a Position.
            </summary>
            <param name="lon"></param>
            <param name="lat"></param>
        </member>
        <member name="M:Hypar.GeoJSON.Position.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.Position.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.Position.ToVectorMeters">
            <summary>
            Convert the position to a vector.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.GeoJSON.Point">
            <summary>
            A GeoJSON point.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.Point.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.Point.#ctor(Hypar.GeoJSON.Position)">
            <summary>
            Construct a Point.
            </summary>
            <param name="coordinates"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided coordinates are null.</exception>
        </member>
        <member name="T:Hypar.GeoJSON.Line">
            <summary>
            A GeoJSON line.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.Line.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.Line.#ctor(Hypar.GeoJSON.Position[])">
             <summary>
             Construct a Line.
             </summary>
             <param name="coordinates"></param>
            <exception cref="T:System.ArgumentException">Thrown when the coordinates provides does not contain 2 items.</exception>
        </member>
        <member name="T:Hypar.GeoJSON.MultiPoint">
            <summary>
            A GeoJSON multipoint.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.MultiPoint.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.MultiPoint.#ctor(Hypar.GeoJSON.Position[])">
            <summary>
            Construct a MultiPoint.
            </summary>
            <param name="coordinates"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the coordinates provided contains 1 item or less.</exception>
        </member>
        <member name="T:Hypar.GeoJSON.LineString">
            <summary>
            A GeoJSON linestring.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.LineString.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.LineString.#ctor(Hypar.GeoJSON.Position[])">
            <summary>
            Construct a LineString.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Hypar.GeoJSON.MultiLineString">
            <summary>
            A GeoJSON multi line string.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.MultiLineString.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.MultiLineString.#ctor(Hypar.GeoJSON.Position[][])">
            <summary>
            Construct a MultiLineString.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Hypar.GeoJSON.Polygon">
            <summary>
            A GeoJSON polygon.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.Polygon.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.Polygon.#ctor(Hypar.GeoJSON.Position[][])">
            <summary>
            Construct a Polygon.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:Hypar.GeoJSON.Polygon.ToPolygons">
            <summary>
            Convert the coordinate array to a collection of polylines.
            The last position of the polygon is dropped.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.GeoJSON.MultiPolygon">
            <summary>
            A GeoJSON multi polygon.
            </summary>
        </member>
        <member name="P:Hypar.GeoJSON.MultiPolygon.Coordinates">
            <summary>
            The coordinates of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.MultiPolygon.#ctor(Hypar.GeoJSON.Position[][])">
            <summary>
            Construct a MultiPolygon.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="T:Hypar.GeoJSON.GeometryCollection">
            <summary>
            A GeoJSON geometry collection.
            </summary>
        </member>
        <member name="M:Hypar.GeoJSON.GeometryCollection.#ctor(Hypar.GeoJSON.Geometry[])">
            <summary>
            Construct a geometry collection.
            </summary>
            <param name="geometries">An array of geometries.</param>
        </member>
        <member name="T:Hypar.GeoJSON.MercatorProjection">
            <summary>
            Methods for computing geographic coordinates.
            </summary>
        </member>
        <member name="M:Hypar.GeoJSON.MercatorProjection.toPixel(System.Double,System.Double)">
            <summary>
            Get the coordinates of the longitude and latitude.
            </summary>
            <param name="lon"></param>
            <param name="lat"></param>
            <returns>An array of doubles containing the x, and y coordintes, in meters.</returns>
        </member>
        <member name="M:Hypar.GeoJSON.MercatorProjection.toGeoCoord(System.Double,System.Double)">
            <summary>
            Get the latitude and longitude of the specified x and y coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>An array of doubles containing the longitude and latitude in degrees.</returns>
        </member>
        <member name="M:Hypar.GeoJSON.MercatorProjection.lonToX(System.Double)">
            <summary>
            Get the x coordinate, in meters, of the specified longitude.
            </summary>
            <param name="lon"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.MercatorProjection.latToY(System.Double)">
            <summary>
            Get the y coordinate, in meters, of the specified latitude.
            </summary>
            <param name="lat"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.GeoJSON.MercatorProjection.xToLon(System.Double)">
            <summary>
            Get the longitude of the specified x coordinate.
            </summary>
            <param name="x">The x coordinate.</param>
            <returns>The longitude in degrees.</returns>
        </member>
        <member name="M:Hypar.GeoJSON.MercatorProjection.yToLat(System.Double)">
            <summary>
            Get the latitude of the specified y coordinate.
            </summary>
            <param name="y">The y coordinate.</param>
            <returns>The latitude in degrees.</returns>
        </member>
        <member name="T:Hypar.Geometry.BBox3">
            <summary>
            An axis-alignment bounding box.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.BBox3.Max">
            <summary>
            The maximum extent of the bounding box.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.BBox3.Min">
            <summary>
            The minimum extent of the bounding box.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.BBox3.#ctor(System.Collections.Generic.IList{Hypar.Geometry.Vector3})">
            <summary>
            Construct a bounding box from a collection of points.
            </summary>
            <param name="points">The points which are contained within the bounding box.</param>
        </member>
        <member name="M:Hypar.Geometry.BBox3.#ctor(Hypar.Geometry.Profile)">
            <summary>
            Construct the BBox3 for a Profile.
            </summary>
            <param name="profile">The Profile.</param>
        </member>
        <member name="M:Hypar.Geometry.BBox3.#ctor(Hypar.Geometry.ICurve)">
            <summary>
            Construct the bounding box for a curve.
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Hypar.Geometry.BBox3.#ctor(System.Collections.Generic.IList{Hypar.Geometry.Polygon})">
            <summary>
            Construct a bounding box for a collection of polygons.
            </summary>
            <param name="polygons"></param>
        </member>
        <member name="M:Hypar.Geometry.BBox3.#ctor(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Construct a bounding box specifying minimum and maximum extents.
            </summary>
            <param name="min">The minimum extent of the bounding box.</param>
            <param name="max">The maximum extent of the bounding box.</param>
        </member>
        <member name="T:Hypar.Geometry.Color">
            <summary>
            Color represents an RGBA color.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Color.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Color.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Color.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Color.Alpha">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a color from its components.
            </summary>
            <param name="red">The red component between 0.0 and 1.0.</param>
            <param name="green">The green component between 0.0 and 1.0.</param>
            <param name="blue">The blue component between 0.0 and 1.0.</param>
            <param name="alpha">The alpha component between 0.0 and 1.0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when any color component is less than 0.0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when any color component is greater than 1.0.</exception>
        </member>
        <member name="M:Hypar.Geometry.Color.ToArray">
            <summary>
            Get the color's components as an array.
            </summary>
            <returns>An array containing the color's components.</returns>
        </member>
        <member name="M:Hypar.Geometry.Color.Equals(System.Object)">
            <summary>
            Is this color equal to the provided color?
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Color.GetHashCode">
            <summary>
            Get the hash code for this color.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.Geometry.Colors">
            <summary>
            Commonly used Colors.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Beige">
            <summary>
            Beige
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Brown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Cobalt">
            <summary>
            Cobalt
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Crimson">
            <summary>
            Crimson
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Darkgray">
            <summary>
            Dark Gray
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Emerald">
            <summary>
            Emerald
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Granite">
            <summary>
            Granite
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Lavender">
            <summary>
            Lavender
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Lime">
            <summary>
            Lime
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Magenta">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Maroon">
            <summary>
            Maroon
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Mint">
            <summary>
            Mint
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Navy">
            <summary>
            Navy
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Olive">
            <summary>
            Olive
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Sand">
            <summary>
            Sand
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Stone">
            <summary>
            Stone
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.White">
            <summary>
            White
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Colors.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="T:Hypar.Geometry.Face">
            <summary>
            A face bounded by a set of edges.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Face.Vertices">
            <summary>
            The vertices which form the Face.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Face.Edges">
            <summary>
            The edges of the Face.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Face.#ctor(System.Collections.Generic.IList{Hypar.Geometry.Line})">
            <summary>
            Construct a Face.
            </summary>
            <param name="edges">A collection of Lines which bound the Face.</param>
        </member>
        <member name="T:Hypar.Geometry.ICurve">
            <summary>
            ICurve is implemented by all curve types.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.ICurve.Length">
            <summary>
            Get the length of the curve.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.ICurve.Start">
            <summary>
            The start of the curve.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.ICurve.End">
            <summary>
            The end of the curve.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.ICurve.Vertices">
            <summary>
            A collection of curve vertices.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.ICurve.PointAt(System.Double)">
            <summary>
            Get a point along the curve at parameter u.
            </summary>
            <param name="u">A parameter on the curve between 0.0 and 1.0.</param>
            <returns>The point on the curve.</returns>
        </member>
        <member name="P:Hypar.Geometry.IElementTypeProvider`1.ElementType">
            <summary>
            The ElementType provided by this instance.
            </summary>
        </member>
        <member name="T:Hypar.Geometry.IIdentifiable">
            <summary>
            The interface for all elements which can be identified with a string identifier.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.IIdentifiable.Id">
            <summary>
            The unique identifier of the element.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.IProfileProvider.Profile">
            <summary>
            A Profile.
            </summary>
        </member>
        <member name="T:Hypar.Geometry.ITessellateMesh">
            <summary>
            ITessellateMesh is implemented by all types which provide a Mesh for visualization.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.ITessellateMesh.Mesh">
            <summary>
            Tessellate.
            </summary>
            <returns>An object of type T containing the tessellation results.</returns>
        </member>
        <member name="T:Hypar.Geometry.Line">
            <summary>
            Line represents a linear curve between two points.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Line.Start">
            <summary>
            The start of the line.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Line.End">
            <summary>
            The end of the line.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Line.Vertices">
            <summary>
            The line's vertices.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Line.Length">
            <summary>
            Get the length of the line.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Line.Direction">
            <summary>
            Get a normalized vector representing the direction of the line.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Line.#ctor(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Construct a line from start and end points.
            </summary>
            <param name="start">The start of the line.</param>
            <param name="end">The end of the line.</param>
            <exception cref="T:System.ArgumentException">Thrown when the start and end points are the same.</exception>
        </member>
        <member name="M:Hypar.Geometry.Line.GetTransform(System.Double,Hypar.Geometry.Vector3)">
            <summary>
            Get a transform whose XY plane is perpendicular to the curve, and whose
            positive Z axis points along the curve.
            </summary>
            <param name="u">The parameter along the Line, between 0.0 and 1.0, at which to calculate the Transform.</param>
            <param name="up">The vector which will become the Y vector of the transform.</param>
            <returns>A transform.</returns>
        </member>
        <member name="M:Hypar.Geometry.Line.PointAt(System.Double)">
            <summary>
            Get a point along the line at parameter u.
            </summary>
            <param name="u"></param>
            <returns>A point on the curve at parameter u.</returns>
        </member>
        <member name="M:Hypar.Geometry.Line.Reversed">
            <summary>
            Get a new line that is the reverse of the original line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Line.Curves">
            <summary>
            Tessellate the curve.
            </summary>
            <returns>A collection of points sampled along the curve.</returns>
        </member>
        <member name="M:Hypar.Geometry.Line.Thicken(System.Double)">
            <summary>
            Thicken a line by the specified amount.
            </summary>
            <param name="amount">The amount to thicken the line.</param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Line.Equals(System.Object)">
            <summary>
            Does this Line equal the provided Line?
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Line.GetHashCode">
            <summary>
            Get the hash code for the Line.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.Geometry.Matrix">
            <summary>
            A column-ordered 4x3 matrix.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Matrix.XAxis">
            <summary>
            The X axis of the Matrix.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Matrix.YAxis">
            <summary>
            The Y axis of the Matrix.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Matrix.ZAxis">
            <summary>
            The Z axis of the Matrix.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Matrix.Translation">
            <summary>
            The translation component of the Matrix.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Matrix.#ctor">
            <summary>
            Construct a 4X3 matrix.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Matrix.#ctor(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3,Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Construct a matrix from axes.
            </summary>
            <param name="x">The X axis.</param>
            <param name="y">The Y axis.</param>
            <param name="z">The Z axis.</param>
            <param name="t">The translation.</param>
        </member>
        <member name="M:Hypar.Geometry.Matrix.SetIdentity">
            <summary>
            Set the matrix to identity.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Matrix.ZeroTranslation">
            <summary>
            Set the translation of the matrix to zero.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Matrix.SetTranslation(Hypar.Geometry.Vector3)">
            <summary>
            Set the translation of the matrix.
            </summary>
            <param name="v">The translation vector.</param>
        </member>
        <member name="M:Hypar.Geometry.Matrix.SetupTranslation(Hypar.Geometry.Vector3)">
            <summary>
            Setup the matrix to translate.
            </summary>
            <param name="v">The translation.</param>
        </member>
        <member name="M:Hypar.Geometry.Matrix.SetupRotate(System.Int32,System.Double)">
            <summary>
            Setup the matrix to rotate.
            </summary>
            <param name="axis">The axis of rotation. 1-x, 2-y, 3-z</param>
            <param name="theta">The angle of rotation in radians.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided axis is not 1-3.</exception>
        </member>
        <member name="M:Hypar.Geometry.Matrix.SetupRotate(Hypar.Geometry.Vector3,System.Double)">
            <summary>
            Setup the matrix to perform rotation.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="theta">The angle of rotation in radians.</param>
        </member>
        <member name="M:Hypar.Geometry.Matrix.SetupScale(Hypar.Geometry.Vector3)">
            <summary>
            Setup the matrix to scale.
            </summary>
            <param name="s">The scale value.</param>
        </member>
        <member name="M:Hypar.Geometry.Matrix.SetupProject(Hypar.Geometry.Plane)">
            <summary>
            Setup the matrix to project.
            </summary>
            <param name="p">The plane on which to project.</param>
            <exception cref="T:System.Exception">Thrown when provided Plane's normal is not unit length.</exception>
        </member>
        <member name="M:Hypar.Geometry.Matrix.op_Multiply(Hypar.Geometry.Vector3,Hypar.Geometry.Matrix)">
            <summary>
            Transform the specified vector.
            </summary>
            <param name="p">The vector to transform.</param>
            <param name="m">The transformation matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Matrix.op_Multiply(Hypar.Geometry.Matrix,Hypar.Geometry.Matrix)">
            <summary>
            Multiply two matrices.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Matrix.Transpose">
            <summary>
            Transpose the matrix.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Matrix.ToString">
            <summary>
            Return the string representation of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.Geometry.Mesh">
            <summary>
            An indexed mesh.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Mesh.VMax">
            <summary>
            The maximum vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.VMin">
            <summary>
            The minimum vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.NMax">
            <summary>
            The maximum normal.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.NMin">
            <summary>
            The minimum normal.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.CMax">
            <summary>
            The maximum color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.CMin">
            <summary>
            The minimum color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.IMax">
            <summary>
            The maximum index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.IMin">
            <summary>
            The minimum index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.Vertices">
            <summary>
            The vertices of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.Normals">
            <summary>
            The normals of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.Indices">
            <summary>
            The indices of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Mesh.VertexColors">
            <summary>
            The vertex colors of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Mesh.#ctor">
            <summary>
            Construct an empty mesh.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Mesh.#ctor(System.Double[],System.Double[],System.UInt16[])">
            <summary>
            Construct a mesh from vertices, normals, and indices.
            </summary>
            <param name="vertices">An array containing doubles of the form [x1, y1, z1, x2, y2, z2...].</param>
            <param name="normals">An array containing doubles of the form [nx1, ny1, nz1, nx2, ny2, nz2...]</param>
            <param name="indices">An array containing integers of the form [0, 1, 2, 0, 2, 3...].</param>
        </member>
        <member name="M:Hypar.Geometry.Mesh.AddTriangle(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3,Hypar.Geometry.Vector3,Hypar.Geometry.Color,Hypar.Geometry.Color,Hypar.Geometry.Color)">
            <summary>
            Add a triangle to the mesh.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="ac"></param>
            <param name="bc"></param>
            <param name="cc"></param>
        </member>
        <member name="M:Hypar.Geometry.Mesh.AddTriangle(System.Collections.Generic.IList{Hypar.Geometry.Vector3},Hypar.Geometry.Color[])">
            <summary>
            Add a triangle to the mesh.
            </summary>
            <param name="v"></param>
            <param name="c"></param>
        </member>
        <member name="M:Hypar.Geometry.Mesh.AddQuad(System.Collections.Generic.IList{Hypar.Geometry.Vector3},Hypar.Geometry.Color[])">
            <summary>
            Add two triangles to the mesh by splitting a rectangular region in two.
            </summary>
            <param name="vertices"></param>
            <param name="colors"></param>
        </member>
        <member name="M:Hypar.Geometry.Mesh.AddTesselatedFace(Hypar.Geometry.Polygon,System.Collections.Generic.IList{Hypar.Geometry.Polygon},Hypar.Geometry.Transform,System.Boolean)">
            <summary>
            Add a tessellated face to the mesh.
            </summary>
            <param name="perimeter">A Polygon representing the perimeter of the face.</param>
            <param name="voids">A collection of Polygons representing voids in the face.</param>
            <param name="transform">A Transform to apply to all vertices of the supplied perimeter.</param>
            <param name="reversed">A flag indicating whether the winding of the Polygons should be reversed.</param>
        </member>
        <member name="M:Hypar.Geometry.Mesh.ToString">
            <summary>
            Get a string representation of the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Mesh.Plane(System.Double,System.Double)">
            <summary>
            Add a Plane to the Model.
            </summary>
            <param name="width"></param>
            <param name="length"></param>
        </member>
        <member name="M:Hypar.Geometry.Mesh.Extrude(Hypar.Geometry.Polygon,System.Double,System.Collections.Generic.IList{Hypar.Geometry.Polygon},System.Boolean)">
            <summary>
            Extrude a Polyon.
            </summary>
            <param name="perimeter">The Polygon to extrude.</param>
            <param name="voids">A collection of Polygons representing voids in the extrusion.</param> 
            <param name="height">The height of the extrusion.</param>
            <param name="capped">A flag indicating whether the extrusion should be capped.</param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Mesh.ExtrudeAlongLine(Hypar.Geometry.Line,Hypar.Geometry.Polygon,System.Collections.Generic.IList{Hypar.Geometry.Polygon},System.Boolean,System.Double,System.Double)">
            <summary>
            Extrude a Polygon along a Line.
            </summary>
            <param name="line">The Line along which to extrude.</param>
            <param name="perimeter">A Polygon to extrude.</param>
            <param name="voids">A collection of Polygons representing voids in the extrusion.</param>
            <param name="capped">A flag indicating whether the extrusion should be capped.</param>
            <param name="startSetback">The setback trom the start of the line of the extrusion.</param>
            <param name="endSetback">The setback from the end of the line of the end of the extrusion.</param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Mesh.Loft(System.Collections.Generic.IList{Hypar.Geometry.Polygon})">
            <summary>
            Create a ruled loft between sections.
            </summary>
            <param name="sections"></param>
        </member>
        <member name="T:Hypar.Geometry.Plane">
            <summary>
            A cartesian plane.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Plane.Origin">
            <summary>
            The origin of the plane.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Plane.Normal">
            <summary>
            The normal of the plane.
            </summary>
            <value></value>
        </member>
        <member name="M:Hypar.Geometry.Plane.#ctor(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Construct a plane.
            </summary>
            <param name="origin">The origin of the plane.</param>
            <param name="normal">The normal of the plane.</param>
        </member>
        <member name="M:Hypar.Geometry.Plane.#ctor(Hypar.Geometry.Vector3,System.Collections.Generic.IList{Hypar.Geometry.Vector3})">
            <summary>
            Construct a plane.
            Only the first three points of the points array will be used.
            </summary>
            <param name="origin">The origin of the plane.</param>
            <param name="points">An array of vectors to be used to determine the normal of the plane.</param>
            <exception cref="T:System.ArgumentException">Thrown when less than three points are provided.</exception>
            <exception cref="T:System.ArgumentException">Thrown when coincident points are provided.</exception>
        </member>
        <member name="T:Hypar.Geometry.Polygon">
            <summary>
            A closed planar polygon.
            </summary>
            <summary>
            Construct profiles.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Polygon.Area">
            <summary>
            The area enclosed by the polygon.
            </summary>
            <value></value>
        </member>
        <member name="P:Hypar.Geometry.Polygon.Vertices">
            <summary>
            The vertices of the polygon.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Polygon.Length">
            <summary>
            The length of the polygon.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Polygon.Start">
            <summary>
            The start of the polygon.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Polygon.End">
            <summary>
            The end of the polygon.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Polygon.Centroid">
            <summary>
            The centroid of the Polygon.
            </summary>
            <returns>
            Retruns a Vector3 representation of the Polygon centroid.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.#ctor(System.Collections.Generic.IList{Hypar.Geometry.Vector3})">
            <summary>
            Construct a Polygon from a collection of vertices.
            </summary>
            <param name="vertices">A collection of vertices.</param>
            <exception cref="T:System.ArgumentException">Thrown when coincident vertices are provided.</exception>
        </member>
        <member name="M:Hypar.Geometry.Polygon.PointAt(System.Double)">
            <summary>
            Get a point on the polygon at parameter u.
            </summary>
            <param name="u">A value between 0.0 and 1.0.</param>
            <returns>Returns a Vector3 indicating a point along the Polygon length from its start vertex.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Contains(Hypar.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon is within the perimeter of this Polygon.
            </summary>
            <param name="polygon">The Polygon to compare.</param>
            <returns>
            Returns true if every vertex of the supplied Polygon falls within the perimeter of this Polygon.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Covers(Hypar.Geometry.Polygon)">
            <summary>
            Tests if the supplied Polygon is within or coincident with the perimeter of this Polygon.
            </summary>
            <param name="polygon">The Polygon to compare.</param>
            <returns>
            Returns true if every vertex of the supplied Polygon falls within or on the perimeter of this Polygon.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Disjoint(Hypar.Geometry.Polygon)">
            <summary>
            Tests if this Polygon and the supplied Polygon are coincident in any way.
            </summary>
            <param name="polygon">The Polygon to compare.</param>
            <returns>
            Returns true if this Polygon and the supplied Polygon do not intersect or touch.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Intersects(Hypar.Geometry.Polygon)">
            <summary>
            Tests if this Polygon and the supplied Polygon share areas within their perimeters.
            </summary>
            <param name="polygon">The Polygon to compare.</param>
            <returns>
            Returns true if any vertex of either Polygon is within the perimeter of the other.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Touches(Hypar.Geometry.Polygon)">
            <summary>
            Tests if this Polygon and the supplied Polygon share at least one perimeter point without interesecting.
            </summary>
            <param name="polygon">The Polygon to compare.</param>
            <returns>
            Returns true if this Polygon and the supplied polygon share at least one perimeter point.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Difference(Hypar.Geometry.Polygon)">
            <summary>
            Constructs the geometric difference between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting Polygon.</param>
            <returns>
            Returns a list of Polygons representing the subtraction of the supplied Polygon from this Polygon.
            Returns null if the area of this Polygon is entirely subtracted.
            Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Intersection(Hypar.Geometry.Polygon)">
            <summary>
            Constructs the Polygon intersections between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting Polygon.</param>
            <returns>
            Returns a list of Polygons representing the interesction of this Polygon with the supplied Polygon.
            Returns null if the two Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Union(Hypar.Geometry.Polygon)">
            <summary>
            Constructs the geometric union between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The Polygon to be combined with this Polygon.</param>
            <returns>
            Returns a single Polygon from a successful union.
            Returns null if a union cannot be performed on the two Polygons.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.XOR(Hypar.Geometry.Polygon)">
            <summary>
            Returns Polygons representing the symmetric difference between this Polygon and the supplied Polygon.
            </summary>
            <param name="polygon">The intersecting polygon.</param>
            <returns>
            Returns a list of Polygons representing the symmetric difference of this Polygon and the supplied Polygon.
            Returns a representation of this Polygon and the supplied Polygon if the Polygons do not intersect.
            </returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Offset(System.Double)">
            <summary>
            Offset this polyline by the specified amount.
            </summary>
            <param name="offset">The amount to offset.</param>
            <returns>A new polyline offset by offset.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Segments">
            <summary>
            Get a collection a lines representing each segment of this polyline.
            </summary>
            <returns>A collection of Lines.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Curves">
            <summary>
            Tessellate the polygon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Reversed">
            <summary>
            Reverse the direction of a polygon.
            </summary>
            <returns>Returns a new polgon with opposite winding.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Equals(System.Object)">
            <summary>
            Is this polygon equal to the provided polygon?
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Hypar.Geometry.Polygon.GetHashCode">
            <summary>
            Get the hash code for the polygon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Project(Hypar.Geometry.Plane)">
            <summary>
            Project the specified vector onto the plane.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Transform(Hypar.Geometry.Transform)">
            <summary>
            Transform the polygon by the specified transform.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.op_Implicit(Hypar.Geometry.Polygon)~Hypar.Geometry.Profile">
            <summary>
            Create a Profile from this Polygon.
            </summary>
            <returns>A new Profile.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Rectangle(Hypar.Geometry.Vector3,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a rectangular profile
            </summary>
            <param name="origin"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="verticalOffset"></param>
            <param name="horizontalOffset"></param>
            <returns>A rectangular Polygon centered around origin.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Rectangle(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Construct a Polygon.
            </summary>
            <param name="min">The minimum coordinate.</param>
            <param name="max">The maximum coordinate.</param>
            <returns>A rectangular Polygon with its lower left corner at min and its upper right corner at max.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Circle(System.Double,System.Int32)">
            <summary>
            A circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="divisions">The number of divisions of the circle.</param>
            <returns>A circle as a Polygon tessellated into the specified number of divisions.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polygon.Ngon(System.Int32,System.Double)">
            <summary>
            Construct a Polygon.
            </summary>
            <param name="sides">The number of side of the Polygon.</param>
            <param name="radius">The radius of the circle in which the Ngon is inscribed.</param>
            <returns>A Polygon with the specified number of sides.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the radius is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the number of sides is less than 3.</exception>
        </member>
        <member name="T:Hypar.Geometry.PolygonExtensions">
            <summary>
            Polygon extension methods.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.PolygonExtensions.ToClipperPath(Hypar.Geometry.Polygon)">
            <summary>
            Construct a clipper path from a Polygon.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.PolygonExtensions.ToPolygon(System.Collections.Generic.List{ClipperLib.IntPoint})">
            <summary>
            Construct a Polygon from a clipper path 
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Hypar.Geometry.Polyline">
            <summary>
            A coplanar continuous set of lines.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Polyline.Vertices">
            <summary>
            The vertices of the polyline.
            </summary>
            <value></value>
        </member>
        <member name="P:Hypar.Geometry.Polyline.Length">
            <summary>
            The length of the polyline.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Polyline.Start">
            <summary>
            The start of the polyline.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Polyline.End">
            <summary>
            The end of the polyline.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Polyline.#ctor(System.Collections.Generic.IList{Hypar.Geometry.Vector3})">
            <summary>
            Construct a polyline from a collection of vertices.
            </summary>
            <param name="vertices">A CCW wound set of vertices.</param>
        </member>
        <member name="M:Hypar.Geometry.Polyline.Reversed">
            <summary>
            Reverse the direction of a polyline.
            </summary>
            <returns>Returns a new polyline with opposite winding.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polyline.ToString">
            <summary>
            Get a string representation of this polyline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Polyline.Segments">
            <summary>
            Get a collection a lines representing each segment of this polyline.
            </summary>
            <returns>A collection of Lines.</returns>
        </member>
        <member name="M:Hypar.Geometry.Polyline.Segment(System.Int32)">
            <summary>
            Get segment i of this polyline.
            </summary>
            <param name="i"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified index is greater than the number of available segments.</exception>
        </member>
        <member name="M:Hypar.Geometry.Polyline.PointAt(System.Double)">
            <summary>
            Get the point at parameter u along the polyline.
            </summary>
            <param name="u">A value between 0.0 and 1.0.</param>
        </member>
        <member name="M:Hypar.Geometry.Polyline.Curves">
            <summary>
            Tessellate the polyline.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hypar.Geometry.VerticalAlignment">
            <summary>
            The vertical alignment of the profile.
            </summary>
        </member>
        <member name="F:Hypar.Geometry.VerticalAlignment.Top">
            <summary>
            Align the profile along its top.
            </summary>
        </member>
        <member name="F:Hypar.Geometry.VerticalAlignment.Center">
            <summary>
            Align the profile along its center.
            </summary>
        </member>
        <member name="F:Hypar.Geometry.VerticalAlignment.Bottom">
            <summary>
            Align the profile along its bottom.
            </summary>
        </member>
        <member name="T:Hypar.Geometry.HorizontalAlignment">
            <summary>
            The horizontal alignment of the profile.
            </summary>
        </member>
        <member name="F:Hypar.Geometry.HorizontalAlignment.Left">
            <summary>
            Align the profile along its left edge.
            </summary>
        </member>
        <member name="F:Hypar.Geometry.HorizontalAlignment.Center">
            <summary>
            Align the profile along its center.
            </summary>
        </member>
        <member name="F:Hypar.Geometry.HorizontalAlignment.Right">
            <summary>
            Align the profile along its right edge.
            </summary>
        </member>
        <member name="T:Hypar.Geometry.Profile">
            <summary>
            A Profile describes 
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Profile.Id">
            <summary>
            The identifier of the Profile.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Profile.Name">
            <summary>
            The name of the Profile.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Profile.Area">
            <summary>
            The area of the Profile.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Profile.Perimeter">
            <summary>
            The perimeter of the Profile.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Profile.Voids">
            <summary>
            A collection of Polygons representing voids in the Profile.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Profile.#ctor(Hypar.Geometry.Polygon,System.Collections.Generic.IList{Hypar.Geometry.Polygon},System.String)">
            <summary>
            Construct a Profile.
            </summary>
            <param name="name">The name of the Profile.</param>
            <param name="perimeter">The perimeter of the Profile.</param>
            <param name="voids">A collection of Polygons representing voids in the Profile.</param>
        </member>
        <member name="M:Hypar.Geometry.Profile.#ctor(System.String)">
            <summary>
            Default constructor for Profile.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Profile.#ctor(Hypar.Geometry.Polygon,System.String)">
            <summary>
            Construct a Profile.
            </summary>
            <param name="name">The name of the Profile.</param>
            <param name="perimeter">The perimeter of the Profile</param>
        </member>
        <member name="M:Hypar.Geometry.Profile.#ctor(Hypar.Geometry.Polygon,Hypar.Geometry.Polygon,System.String)">
            <summary>
            Construct a Profile.
            </summary>
            <param name="name">The name of the Profile.</param>
            <param name="perimeter">The perimeter of the Profile.</param>
            <param name="singleVoid">A void in the Profile.</param>
        </member>
        <member name="T:Hypar.Geometry.Quaternion">
            <summary>
            A quaternion.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Quaternion.X">
            <summary>
            The X component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Quaternion.Y">
            <summary>
            The Y component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Quaternion.Z">
            <summary>
            The Z component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Quaternion.W">
            <summary>
            The W component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Quaternion.#ctor(Hypar.Geometry.Vector3,System.Double)">
            <summary>
            Construct a Quaternion from an axis and an angle in radians.
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
        </member>
        <member name="T:Hypar.Geometry.Transform">
            <summary>
            A Transform defined by an origin and x, y, and z axes.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Transform.Origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Transform.XAxis">
            <summary>
            The X axis.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Transform.YAxis">
            <summary>
            The Y axis.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Transform.ZAxis">
            <summary>
            The Z axis.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Transform.XY">
            <summary>
            The XY plane of the Transform.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Transform.YZ">
            <summary>
            The YZ plane of the Transform.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Transform.XZ">
            <summary>
            The XZ plane of the Transform.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Transform.#ctor">
            <summary>
            Construct the identity Transform.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Transform.#ctor(Hypar.Geometry.Vector3)">
            <summary>
            Construct a Transform with a translation.
            </summary>
            <param name="origin">The origin of the Transform.</param>
        </member>
        <member name="M:Hypar.Geometry.Transform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a Transform with a translation.
            </summary>
            <param name="x">The X component of translation.</param>
            <param name="y">The Y component of translation.</param>
            <param name="z">The Z component of translation.</param>
        </member>
        <member name="M:Hypar.Geometry.Transform.#ctor(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Construct a Transform by origin and axes.
            </summary>
            <param name="origin">The origin of the Transform.</param>
            <param name="xAxis">The X axis of the Transform.</param>
            <param name="zAxis">The Z axis of the Transform.</param>
        </member>
        <member name="M:Hypar.Geometry.Transform.ToString">
            <summary>
            Get a string representation of the Transform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Transform.OfPoint(Hypar.Geometry.Vector3)">
            <summary>
            Transform a Vector into the coordinate space defined by this Transform.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>A new Vector transformed by this Transform.</returns>
        </member>
        <member name="M:Hypar.Geometry.Transform.OfPolygon(Hypar.Geometry.Polygon)">
            <summary>
            Transform the specified Polygon.
            </summary>
            <param name="polygon">The polygon to Transform.</param>
            <returns>A new Polygon transformed by this Transform.</returns>
        </member>
        <member name="M:Hypar.Geometry.Transform.OfLine(Hypar.Geometry.Line)">
            <summary>
            Transform the specified Line.
            </summary>
            <param name="line">The Line to transform.</param>
            <returns>A new Line transformed by this Transform.</returns>
        </member>
        <member name="M:Hypar.Geometry.Transform.OfProfile(Hypar.Geometry.Profile)">
            <summary>
            Transform the specified Profile.
            </summary>
            <param name="profile">The Profile to transform.</param>
            <returns>A new Profile transformed by this Transform.</returns>
        </member>
        <member name="M:Hypar.Geometry.Transform.Move(Hypar.Geometry.Vector3)">
            <summary>
            Apply a translation to the Transform.
            </summary>
            <param name="translation">The translation to apply.</param>
        </member>
        <member name="M:Hypar.Geometry.Transform.Rotate(Hypar.Geometry.Vector3,System.Double)">
            <summary>
            Apply a rotation to the Transform.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in degrees.</param>
        </member>
        <member name="M:Hypar.Geometry.Transform.Scale(Hypar.Geometry.Vector3)">
            <summary>
            Apply a scale to the Transform.
            </summary>
            <param name="amount">The amount to scale.</param>
        </member>
        <member name="T:Hypar.Geometry.Vector3">
            <summary>
            A 3D vector.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Vector3.Origin">
            <summary>
            Construct a vector at the origin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.Equals(System.Object)">
            <summary>
            Is this vector equal to the provide vector?
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Hypar.Geometry.Vector3.GetHashCode">
            <summary>
            Get the hash code for the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hypar.Geometry.Vector3.XAxis">
            <summary>
            Construct a vector along the X axis.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Vector3.YAxis">
            <summary>
            Construct a vector along the Y axis.
            </summary>
        </member>
        <member name="P:Hypar.Geometry.Vector3.ZAxis">
            <summary>
            Construct a vector along the Z axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.AtNEqualSpacesAlongLine(Hypar.Geometry.Line,System.Int32,System.Boolean)">
            <summary>
            Construct vectors at n equal spaces along the provided line.
            </summary>
            <param name="line">The line.</param>
            <param name="n">The number of samples along the line.</param>
            <param name="includeEnds">A flag indicating whether or not to include points for the start and end of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.#ctor">
            <summary>
            Construct a default vector at the origin.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a vector from x, y, and z components.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Hypar.Geometry.Vector3.#ctor(System.Double,System.Double)">
            <summary>
            Construct a vector from x, and y components.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Hypar.Geometry.Vector3.Length">
            <summary>
            Get the length of this vector.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Vector3.Normalized">
            <summary>
            Return a new vector which is the normalized version of this vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.Cross(Hypar.Geometry.Vector3)">
            <summary>
            Compute the cross product of this vector and v.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.Dot(Hypar.Geometry.Vector3)">
            <summary>
            Compute the dot product of this vector a v.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.AngleTo(Hypar.Geometry.Vector3)">
            <summary>
            The angle in radians from this vector to another vector.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.Average(Hypar.Geometry.Vector3)">
            <summary>
            Compute the average of this vector and v.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.ProjectOnto(Hypar.Geometry.Vector3)">
            <summary>
            Project vector a onto this vector.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.op_Multiply(Hypar.Geometry.Vector3,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.op_Multiply(System.Double,Hypar.Geometry.Vector3)">
            <summary>
            Multiply a scalar and a vector.
            </summary>
            <param name="a"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.op_Subtraction(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Subtract two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.op_Addition(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Add two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.op_GreaterThan(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Compute whether all components of vector a are greater than those of vector b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.op_LessThan(Hypar.Geometry.Vector3,Hypar.Geometry.Vector3)">
            <summary>
            Compute whether all components of vector a are less than those of vector b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.IsParallelTo(Hypar.Geometry.Vector3)">
            <summary>
            Determine whether this vector is parallel to v.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.Negated">
            <summary>
            Construct a new vector which is the inverse of this vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.ToArray">
            <summary>
            Convert a vector's components to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.ToString">
            <summary>
            A string representation of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.IsAlmostEqualTo(Hypar.Geometry.Vector3,System.Double)">
            <summary>
            Determine whether this vector's components are equal to those of v, within tolerance.
            </summary>
            <param name="v"></param>
            <param name="tolerance">The tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.DistanceTo(Hypar.Geometry.Vector3)">
            <summary>
            The distance from this point to b.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3.Project(Hypar.Geometry.Plane)">
            <summary>
            Project the specified vector onto the plane.
            </summary>
            <param name="p">The plane on which to project the point.</param>
        </member>
        <member name="T:Hypar.Geometry.Vector3Extensions">
            <summary>
            Extension methods for Vector3.
            </summary>
        </member>
        <member name="M:Hypar.Geometry.Vector3Extensions.AreCoplanar(System.Collections.Generic.IList{Hypar.Geometry.Vector3})">
            <summary>
            Are the provided points on the same plane?
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3Extensions.BBox(System.Collections.Generic.IList{Hypar.Geometry.Vector3})">
            <summary>
            Get the bounding box for a set of points.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3Extensions.Average(System.Collections.Generic.IList{Hypar.Geometry.Vector3})">
            <summary>
            Find the average of a collection of Vector3.
            </summary>
            <param name="points">The Vector3 collection to average.</param>
            <returns>A Vector3 representing the average.</returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3Extensions.Shrink(System.Collections.Generic.IList{Hypar.Geometry.Vector3},System.Double)">
            <summary>
            Shrink a collection of Vector3 towards their average.
            </summary>
            <param name="points">The collection of Vector3 to shrink.</param>
            <param name="distance">The distance to shrink along the vector to average.</param>
            <returns></returns>
        </member>
        <member name="M:Hypar.Geometry.Vector3Extensions.ToArray(System.Collections.Generic.IList{Hypar.Geometry.Vector3})">
            <summary>
            Convert a collection of Vector3 to a flat array of double.
            </summary>
            <param name="points">The collection of Vector3 to convert.</param>
            <returns>An array containing x,y,z,x1,y1,z1,x2,y2,z2,...</returns>
        </member>
    </members>
</doc>
